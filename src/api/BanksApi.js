/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadCredentialsError', 'model/Bank', 'model/BankList', 'model/ErrorMessage', 'model/PageableBankList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadCredentialsError'), require('../model/Bank'), require('../model/BankList'), require('../model/ErrorMessage'), require('../model/PageableBankList'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.BanksApi = factory(root.FinApiResTfulServices.ApiClient, root.FinApiResTfulServices.BadCredentialsError, root.FinApiResTfulServices.Bank, root.FinApiResTfulServices.BankList, root.FinApiResTfulServices.ErrorMessage, root.FinApiResTfulServices.PageableBankList);
  }
}(this, function(ApiClient, BadCredentialsError, Bank, BankList, ErrorMessage, PageableBankList) {
  'use strict';

  /**
   * Banks service.
   * @module api/BanksApi
   * @version v1.92.0
   */

  /**
   * Constructs a new BanksApi. 
   * @alias module:api/BanksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAndSearchAllBanks operation.
     * @callback module:api/BanksApi~getAndSearchAllBanksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageableBankList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get and search all banks
     * Get and search banks from finAPI's database of banks. Must pass the authorized user's access_token, or your client's access_token. You can set optional search criteria to get only those banks that you are interested in. If you do not specify any search criteria, then this service functions as a 'get all' service.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.ids A comma-separated list of bank identifiers. If specified, then only banks whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
     * @param {String} opts.search If specified, then only those banks will be contained in the result whose 'name', 'blz', 'bic' or 'city' contains the given search string (the matching works case-insensitive). If no banks contain the search string in any of the regarded fields, then the result will be an empty list. Note that you may also pass an IBAN in this field, in which case finAPI will try to find the related bank in its database and regard only this bank for the search. Also note: If the given search string consists of several terms (separated by whitespace), then ALL of these terms must apply to a bank in order for it to get included into the result.
     * @param {Boolean} opts.isSupported If specified, then only supported (in case of 'true' value) or unsupported (in case of 'false' value) banks will be regarded.  NOTE: This field is deprecated and will be removed at some point. Please refer to field 'supportedInterfaces' instead.
     * @param {Boolean} opts.pinsAreVolatile If specified, then only those banks will be regarded that have the given value (true or false) for their 'pinsAreVolatile' field.  NOTE: This field is deprecated and will be removed at some point.
     * @param {Array.<String>} opts.supportedDataSources Comma-separated list of data sources. Possible values: WEB_SCRAPER,FINTS_SERVER. If this parameter is specified, then only those banks will be regarded in the search that support ALL of the given data sources. Note that this does NOT imply that those data sources must be the only data sources that are supported by a bank.  NOTE: This field is deprecated and will be removed at some point. Please refer to field 'supportedInterfaces' instead.
     * @param {Array.<String>} opts.supportedInterfaces Comma-separated list of bank interfaces. Possible values: FINTS_SERVER,WEB_SCRAPER,XS2A. If this parameter is specified, then all the banks that support at least one of the given interfaces will be returned. Note that this does NOT imply that those interfaces must be the only ones that are supported by a bank.
     * @param {Array.<String>} opts.location Comma-separated list of two-letter country codes (ISO 3166 ALPHA-2). If set, then only those banks will be regarded in the search that are located in the specified countries. Notes: Banks which do not have a location set (i.e. international institutes) will ALWAYS be regarded in the search, independent of what you specify for this field. When you pass a country code that doesn't exist in the ISO 3166 ALPHA-2 standard, then the service will respond with 400 BAD_REQUEST.
     * @param {Array.<Number>} opts.tppAuthenticationGroupIds A comma-separated list of TPP authentication group identifiers. If specified, then only banks who have at least one interface belonging to one of the given groups will be regarded. The maximum number of identifiers is 1000.
     * @param {Boolean} opts.isTestBank If specified, then only those banks will be regarded that have the given value (true or false) for their 'isTestBank' field.
     * @param {Number} opts.page Result page that you want to retrieve. (default to 1)
     * @param {Number} opts.perPage Maximum number of records per page. By default it's 20. Can be at most 500. NOTE: Due to its validation and visualization, the swagger frontend might show very low performance, or even crashes, when a service responds with a lot of data. It is recommended to use a HTTP client like Postman or DHC instead of our swagger frontend for service calls with large page sizes. (default to 20)
     * @param {Array.<String>} opts.order Determines the order of the results. You can order the results by 'id', 'name', 'blz', 'bic' or 'popularity'. The default order for all services is 'id,asc'. You can also order by multiple properties. In that case the order of the parameters passed is important. Example: '/banks?order=name,desc&order=id,asc' will return banks ordered by 'name' (descending), where banks with the same 'name' are ordered by 'id' (ascending). The general format is: 'property[,asc|desc]', with 'asc' being the default value. Please note that ordering by multiple fields is not supported in our swagger frontend, but you can test this feature with any HTTP tool of your choice (e.g. postman or DHC). 
     * @param {module:api/BanksApi~getAndSearchAllBanksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageableBankList}
     */
    this.getAndSearchAllBanks = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'isSupported': opts['isSupported'],
        'pinsAreVolatile': opts['pinsAreVolatile'],
        'isTestBank': opts['isTestBank'],
        'page': opts['page'],
        'perPage': opts['perPage'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'multi'
        },
        'supportedDataSources': {
          value: opts['supportedDataSources'],
          collectionFormat: 'multi'
        },
        'supportedInterfaces': {
          value: opts['supportedInterfaces'],
          collectionFormat: 'multi'
        },
        'location': {
          value: opts['location'],
          collectionFormat: 'multi'
        },
        'tppAuthenticationGroupIds': {
          value: opts['tppAuthenticationGroupIds'],
          collectionFormat: 'multi'
        },
        'order': {
          value: opts['order'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = PageableBankList;

      return this.apiClient.callApi(
        '/api/v1/banks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBank operation.
     * @callback module:api/BanksApi~getBankCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bank} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a bank
     * Get a single bank from finAPI's database of banks. You have to pass the bank's identifier, and either the authorized user's access_token, or your client's access token.
     * @param {Number} id Identifier of requested bank
     * @param {module:api/BanksApi~getBankCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bank}
     */
    this.getBank = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBank");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Bank;

      return this.apiClient.callApi(
        '/api/v1/banks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleBanks operation.
     * @callback module:api/BanksApi~getMultipleBanksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple banks
     * Get a list of multiple banks from finAPI's database of banks. You have to pass a list of bank identifiers, and either the authorized user's access_token, or your client's access token. Note that banks whose identifiers do not exist will not be contained in the result (If this applies to all of the given identifiers, then the result will be an empty list).<br/><br/><b>WARNING</b>: This service is deprecated and will be removed at some point. If you want to get multiple banks, please instead use the service 'Get and search all banks' and pass a comma-separated list of identifiers with the parameter 'ids'.
     * @param {Array.<Number>} ids Comma-separated list of identifiers of requested banks
     * @param {module:api/BanksApi~getMultipleBanksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankList}
     */
    this.getMultipleBanks = function(ids, callback) {
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getMultipleBanks");
      }


      var pathParams = {
        'ids': ids
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = BankList;

      return this.apiClient.callApi(
        '/api/v1/banks/{ids}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
