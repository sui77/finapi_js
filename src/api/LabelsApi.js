/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadCredentialsError', 'model/ErrorMessage', 'model/IdentifierList', 'model/Label', 'model/LabelList', 'model/LabelParams', 'model/PageableLabelList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadCredentialsError'), require('../model/ErrorMessage'), require('../model/IdentifierList'), require('../model/Label'), require('../model/LabelList'), require('../model/LabelParams'), require('../model/PageableLabelList'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.LabelsApi = factory(root.FinApiResTfulServices.ApiClient, root.FinApiResTfulServices.BadCredentialsError, root.FinApiResTfulServices.ErrorMessage, root.FinApiResTfulServices.IdentifierList, root.FinApiResTfulServices.Label, root.FinApiResTfulServices.LabelList, root.FinApiResTfulServices.LabelParams, root.FinApiResTfulServices.PageableLabelList);
  }
}(this, function(ApiClient, BadCredentialsError, ErrorMessage, IdentifierList, Label, LabelList, LabelParams, PageableLabelList) {
  'use strict';

  /**
   * Labels service.
   * @module api/LabelsApi
   * @version v1.92.0
   */

  /**
   * Constructs a new LabelsApi. 
   * @alias module:api/LabelsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createLabel operation.
     * @callback module:api/LabelsApi~createLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new label
     * Create a new label for a specific user. Must pass the new label's name and the user's access_token.<br/><br/>Users can create labels to flag transactions (see method PATCH /transactions), with the goal of collecting and getting an overview of all transactions of a certain 'type'. In this sense, labels are similar to transaction categories. However, labels are supposed to depict more of an implicit meaning of a transaction. For instance, a user might want to assign a flag to a transaction that reminds him that he can offset it against tax. At the same time, the category of the transactions might be something like 'insurance', which is a more 'fact-based', or 'objective' way of typing the transaction. Despite this semantic difference between categories and labels, there is also the difference that a transaction can be assigned multiple labels at the same time (while in contrast it can have just a single category).
     * @param {module:model/LabelParams} body Label's name
     * @param {module:api/LabelsApi~createLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    this.createLabel = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLabel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Label;

      return this.apiClient.callApi(
        '/api/v1/labels', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllLabels operation.
     * @callback module:api/LabelsApi~deleteAllLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentifierList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all labels
     * Delete all labels of the user that is authorized by the access_token. Must pass the user's access_token.
     * @param {module:api/LabelsApi~deleteAllLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentifierList}
     */
    this.deleteAllLabels = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = IdentifierList;

      return this.apiClient.callApi(
        '/api/v1/labels', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLabel operation.
     * @callback module:api/LabelsApi~deleteLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label
     * Delete a single label of the user that is authorized by the access_token. Must pass the label's identifier and the user's access_token.
     * @param {Number} id Identifier of the label to delete
     * @param {module:api/LabelsApi~deleteLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLabel = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLabel");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/labels/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editLabel operation.
     * @callback module:api/LabelsApi~editLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a label
     * Change the name of a label of the user that is authorized by the access_token. Must pass the label's identifier, the label's new name and the user's access_token.
     * @param {Number} id Label's identifier
     * @param {module:model/LabelParams} body Label's new name
     * @param {module:api/LabelsApi~editLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    this.editLabel = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editLabel");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editLabel");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Label;

      return this.apiClient.callApi(
        '/api/v1/labels/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAndSearchAllLabels operation.
     * @callback module:api/LabelsApi~getAndSearchAllLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageableLabelList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get and search all labels
     * Get labels of the user that is authorized by the access_token. Must pass the user's access_token. You can set optional search criteria to get only those labels that you are interested in. If you do not specify any search criteria, then this service functions as a 'get all' service.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.ids A comma-separated list of label identifiers. If specified, then only labels whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
     * @param {String} opts.search If specified, then only those labels will be contained in the result whose 'name' contains the given search string (the matching works case-insensitive). If no labels contain the search string in their name, then the result will be an empty list. NOTE: If the given search string consists of several terms (separated by whitespace), then ALL of these terms must be contained in the name in order for a label to get included into the result.
     * @param {Number} opts.page Result page that you want to retrieve (default to 1)
     * @param {Number} opts.perPage Maximum number of records per page. By default it's 20. Can be at most 500. NOTE: Due to its validation and visualization, the swagger frontend might show very low performance, or even crashes, when a service responds with a lot of data. It is recommended to use a HTTP client like Postman or DHC instead of our swagger frontend for service calls with large page sizes. (default to 20)
     * @param {Array.<String>} opts.order Determines the order of the results. You can order the results by 'id' or 'name'. The default order for all services is 'id,asc'. Since both fields (id and name) are unique, ordering by multiple fields is pointless. The general format is: 'property[,asc|desc]', with 'asc' being the default value. 
     * @param {module:api/LabelsApi~getAndSearchAllLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageableLabelList}
     */
    this.getAndSearchAllLabels = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'page': opts['page'],
        'perPage': opts['perPage'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'multi'
        },
        'order': {
          value: opts['order'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = PageableLabelList;

      return this.apiClient.callApi(
        '/api/v1/labels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLabel operation.
     * @callback module:api/LabelsApi~getLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a label
     * Get a single label of the user that is authorized by the access_token. Must pass the label's identifier and the user's access_token.
     * @param {Number} id Identifier of requested label
     * @param {module:api/LabelsApi~getLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    this.getLabel = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLabel");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Label;

      return this.apiClient.callApi(
        '/api/v1/labels/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleLabels operation.
     * @callback module:api/LabelsApi~getMultipleLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple labels
     * Get a list of multiple labels of the user that is authorized by the access_token.Must pass the labels' identifiers and the user's access_token. Identifiers that do not exist or do not relate to the authorized user will not be contained in the result (If this applies to all of the given identifiers, then the result will be an empty list). WARNING: This service is deprecated and will be removed at some point. If you want to get multiple labels, please instead use the service 'Get all labels' and pass a comma-separated list of identifiers as a parameter 'ids'.
     * @param {Array.<Number>} ids Comma-separated list of identifiers of requested labels
     * @param {module:api/LabelsApi~getMultipleLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelList}
     */
    this.getMultipleLabels = function(ids, callback) {
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getMultipleLabels");
      }


      var pathParams = {
        'ids': ids
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = LabelList;

      return this.apiClient.callApi(
        '/api/v1/labels/{ids}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
