/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadCredentialsError', 'model/CashFlowList', 'model/Category', 'model/CategoryList', 'model/CategoryParams', 'model/EditCategoryParams', 'model/ErrorMessage', 'model/IdentifierList', 'model/PageableCategoryList', 'model/TrainCategorizationData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadCredentialsError'), require('../model/CashFlowList'), require('../model/Category'), require('../model/CategoryList'), require('../model/CategoryParams'), require('../model/EditCategoryParams'), require('../model/ErrorMessage'), require('../model/IdentifierList'), require('../model/PageableCategoryList'), require('../model/TrainCategorizationData'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.CategoriesApi = factory(root.FinApiResTfulServices.ApiClient, root.FinApiResTfulServices.BadCredentialsError, root.FinApiResTfulServices.CashFlowList, root.FinApiResTfulServices.Category, root.FinApiResTfulServices.CategoryList, root.FinApiResTfulServices.CategoryParams, root.FinApiResTfulServices.EditCategoryParams, root.FinApiResTfulServices.ErrorMessage, root.FinApiResTfulServices.IdentifierList, root.FinApiResTfulServices.PageableCategoryList, root.FinApiResTfulServices.TrainCategorizationData);
  }
}(this, function(ApiClient, BadCredentialsError, CashFlowList, Category, CategoryList, CategoryParams, EditCategoryParams, ErrorMessage, IdentifierList, PageableCategoryList, TrainCategorizationData) {
  'use strict';

  /**
   * Categories service.
   * @module api/CategoriesApi
   * @version v1.92.0
   */

  /**
   * Constructs a new CategoriesApi. 
   * @alias module:api/CategoriesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCategory operation.
     * @callback module:api/CategoriesApi~createCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new category
     * Create a new custom transaction category for the authorized user, that can then be assigned to transactions via PATCH /transactions, and that will also be regarded in finAPI's automatic transactions categorization process. Must pass the user's access_token.
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryParams} opts.body Parameters of the new category
     * @param {module:api/CategoriesApi~createCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.createCategory = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Category;

      return this.apiClient.callApi(
        '/api/v1/categories', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllCategories operation.
     * @callback module:api/CategoriesApi~deleteAllCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentifierList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all categories
     * Delete all custom categories of the user that is authorized by the access_token. Must pass the user's access_token. Note that this deletes both parent categories as well as any related sub-categories.
     * @param {module:api/CategoriesApi~deleteAllCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentifierList}
     */
    this.deleteAllCategories = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = IdentifierList;

      return this.apiClient.callApi(
        '/api/v1/categories', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategory operation.
     * @callback module:api/CategoriesApi~deleteCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a category
     * Delete a single category of the user that is authorized by the access_token. Must pass the user's access_token. Note that you can only delete user-custom categories (category's where the 'isCustom' flag is true). Also note that when deleting a parent category, all its sub-categories will be deleted as well.
     * @param {Number} id Category identifier
     * @param {module:api/CategoriesApi~deleteCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCategory = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCategory");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/categories/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editCategory operation.
     * @callback module:api/CategoriesApi~editCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a category
     * Change the name of a custom transaction category belonging to the authorized user. Must pass the user's access_token.
     * @param {Number} id Identifier of the category to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditCategoryParams} opts.body New category name
     * @param {module:api/CategoriesApi~editCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.editCategory = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCategory");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Category;

      return this.apiClient.callApi(
        '/api/v1/categories/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAndSearchAllCategories operation.
     * @callback module:api/CategoriesApi~getAndSearchAllCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageableCategoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get and search all categories
     * Get a list of all global finAPI categories as well as all custom categories of the authorized user. Must pass the user's access_token. You can set optional search criteria to get only those categories that you are interested in. If you do not specify any search criteria, then this service functions as a 'get all' service.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.ids A comma-separated list of category identifiers. If specified, then only categories whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
     * @param {String} opts.search If specified, then only those categories will be contained in the result whose 'name' contains the given search string (the matching works case-insensitive). If no categories contain the search string in their name, then the result will be an empty list. NOTE: If the given search string consists of several terms (separated by whitespace), then ALL of these terms must be contained in the name in order for a category to get included into the result.
     * @param {Boolean} opts.isCustom If specified, then the result will contain only categories that are either finAPI global (in case of value 'false'), or only categories that have been created by the authorized user (in case of value 'true').
     * @param {Number} opts.page Result page that you want to retrieve. (default to 1)
     * @param {Number} opts.perPage Maximum number of records per page. By default it's 20. Can be at most 500. NOTE: Due to its validation and visualization, the swagger frontend might show very low performance, or even crashes, when a service responds with a lot of data. It is recommended to use a HTTP client like Postman or DHC instead of our swagger frontend for service calls with large page sizes. (default to 20)
     * @param {Array.<String>} opts.order Determines the order of the results. You can order the results by 'id', 'name' and 'isCustom'. The default order is 'id,asc'. You can also order by multiple properties. In that case the order of the parameters passed is important. Example: '/categories?order=isCustom,desc&order=name' will return all custom categories followed by all default categories. Both groups are ordered ascending by name. The general format is: 'property[,asc|desc]', with 'asc' being the default value. Please note that ordering by multiple fields is not supported in our swagger frontend, but you can test this feature with any HTTP tool of your choice (e.g. postman or DHC). 
     * @param {module:api/CategoriesApi~getAndSearchAllCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageableCategoryList}
     */
    this.getAndSearchAllCategories = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'isCustom': opts['isCustom'],
        'page': opts['page'],
        'perPage': opts['perPage'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'multi'
        },
        'order': {
          value: opts['order'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = PageableCategoryList;

      return this.apiClient.callApi(
        '/api/v1/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCashFlows operation.
     * @callback module:api/CategoriesApi~getCashFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashFlowList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cash flows
     * Get the cash flow(s) (= total income, spending, and balance) for one or several categories. You can specify various criteria such as the time period to calculate the cash flows for, or what categories to do the calculations for. Note that the cash flow for a category may include the cash flows for all of its sub-categories, or not include it, depending on the 'includeSubCashFlows' setting. Must pass the user's access_token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search If specified, then only transactions that contain the search term in their purpose or counterpart fields will be contained in the result. Note that the search is case insensitive.
     * @param {String} opts.counterpart The counterpart is the person or institution that received your payment, or that you made the payment to. If this parameter is specified, then only transactions that contain the given term in one (or more) of their counterpart fields ('counterpartName', 'counterpartAccountNumber', 'counterpartIban', 'counterpartBic' or 'counterpartBlz') will be contained in the result. Note that the search is case insensitive.
     * @param {String} opts.purpose If specified, then only those transactions will be contained in the result whose purpose field contains the given search string. Note that the search is case insensitive.NOTE: If the given search string consists of several terms (separated by whitespace), then ALL of these terms must be contained in the purpose in order for a transaction to get included into the result.
     * @param {Array.<Number>} opts.accountIds A comma-separated list of account identifiers. If specified, then only transactions that relate to the given accounts will be regarded. If not specified, then all accounts will be regarded.
     * @param {String} opts.minBankBookingDate Lower bound for a transaction's booking date as returned by the bank (= original booking date), in the format 'YYYY-MM-DD' (e.g. '2016-01-01'). If specified, then only transactions whose 'bankBookingDate' is equal to or later than the given date will be regarded.
     * @param {String} opts.maxBankBookingDate Upper bound for a transaction's booking date as returned by the bank (= original booking date), in the format 'YYYY-MM-DD' (e.g. '2016-01-01'). If specified, then only transactions whose 'bankBookingDate' is equal to or earlier than the given date will be regarded.
     * @param {String} opts.minFinapiBookingDate Lower bound for a transaction's booking date as set by finAPI, in the format 'YYYY-MM-DD' (e.g. '2016-01-01'). For details about the meaning of the finAPI booking date, please see the field's documentation in the service's response.
     * @param {String} opts.maxFinapiBookingDate Upper bound for a transaction's booking date as set by finAPI, in the format 'YYYY-MM-DD' (e.g. '2016-01-01'). For details about the meaning of the finAPI booking date, please see the field's documentation in the service's response.
     * @param {Number} opts.minAmount If specified, then only transactions whose amount is equal to or greater than the given amount will be regarded. Can contain a positive or negative number with at most two decimal places. Examples: -300.12, or 90.95
     * @param {Number} opts.maxAmount If specified, then only transactions whose amount is equal to or less than the given amount will be regarded. Can contain a positive or negative number with at most two decimal places. Examples: -300.12, or 90.95
     * @param {module:model/String} opts.direction If specified, then only transactions with the given direction(s) will be regarded. Use 'income' for regarding only received payments (amount >= 0), 'spending' for regarding only outgoing payments (amount < 0), or 'all' to regard both directions. If not specified, the direction defaults to 'all'. (default to all)
     * @param {Array.<Number>} opts.labelIds A comma-separated list of label identifiers. If specified, then only transactions that have been marked with at least one of the given labels will be contained in the result.
     * @param {Array.<Number>} opts.categoryIds If specified, then the result will contain only those cash flows that relate to the given categories. Note that the cash flow for a category may include/exclude the cash flows of its sub-categories, depending on the 'includeSubCashFlows' setting. To include the cash flow of not categorized transactions, pass the value '0' as categoryId. Note: When this parameter is NOT set, then the result will contain a cash flow for all categories that have transactions associated to them (this includes the 'null'-category for the cash flow of not categorized transactions), more precisely: transactions that fulfill the filter criteria. Categories that have no associated transactions according to the filter criteria will not appear in the result. However, when you specify this parameter, then all specified categories will have a cash flow entry in the result, even if there are no associated transactions for the category (the cash flow will have income, spending and balance all set to zero).
     * @param {Boolean} opts.isNew If specified, then only transactions that have their 'isNew' flag set to true/false will be regarded for the cash flow calculations.
     * @param {String} opts.minImportDate Lower bound for a transaction's import date, in the format 'YYYY-MM-DD' (e.g. '2016-01-01'). If specified, then only transactions whose 'importDate' is equal to or later than the given date will be regarded.
     * @param {String} opts.maxImportDate Upper bound for a transaction's import date, in the format 'YYYY-MM-DD' (e.g. '2016-01-01'). If specified, then only transactions whose 'importDate' is equal to or earlier than the given date will be regarded.
     * @param {Boolean} opts.includeSubCashFlows If it is true, then the income, spending, balance and count of transactions of a main category results from all transactions that have either this (main) category or any of its subcategories assigned (of course all transactions depends from the other filtering settings); If it is false, then the income, spending, balance and count of transactions of a main category only results from the transactions that have exactly this (main) category assigned. Default value for this parameter is 'true'. (default to true)
     * @param {Array.<String>} opts.order Determines the order of the results. You can order the results by 'income', 'spending', 'balance', 'category.id' or 'category.name'. The default order for this service is 'category.id,asc'. You can also order by multiple properties. In that case the order of the parameters passed is important. Example: '/cashFlows?order=income,desc&order=spending,asc&balance,desc' will return as first result the category with the highest income. If two categories have the same income, it returns the category with the highest spending first (because spending is a negative value) and so on. The general format is: 'property[,asc|desc]', with 'asc' being the default value. Please note that ordering by multiple fields is not supported in our swagger frontend, but you can test this feature with any HTTP tool of your choice (e.g. postman or DHC). 
     * @param {module:api/CategoriesApi~getCashFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashFlowList}
     */
    this.getCashFlows = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'counterpart': opts['counterpart'],
        'purpose': opts['purpose'],
        'minBankBookingDate': opts['minBankBookingDate'],
        'maxBankBookingDate': opts['maxBankBookingDate'],
        'minFinapiBookingDate': opts['minFinapiBookingDate'],
        'maxFinapiBookingDate': opts['maxFinapiBookingDate'],
        'minAmount': opts['minAmount'],
        'maxAmount': opts['maxAmount'],
        'direction': opts['direction'],
        'isNew': opts['isNew'],
        'minImportDate': opts['minImportDate'],
        'maxImportDate': opts['maxImportDate'],
        'includeSubCashFlows': opts['includeSubCashFlows'],
      };
      var collectionQueryParams = {
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'multi'
        },
        'labelIds': {
          value: opts['labelIds'],
          collectionFormat: 'multi'
        },
        'categoryIds': {
          value: opts['categoryIds'],
          collectionFormat: 'multi'
        },
        'order': {
          value: opts['order'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = CashFlowList;

      return this.apiClient.callApi(
        '/api/v1/categories/cashFlows', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategory operation.
     * @callback module:api/CategoriesApi~getCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a category
     * Get a single category that is either a global finAPI category or a custom category of the authorized user. Must pass the category's identifier and the user's access_token.
     * @param {Number} id Category identifier
     * @param {module:api/CategoriesApi~getCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.getCategory = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategory");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Category;

      return this.apiClient.callApi(
        '/api/v1/categories/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleCategories operation.
     * @callback module:api/CategoriesApi~getMultipleCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple categories
     * Get a list of multiple categories that are either a global finAPI category or a custom category of the authorized user. Must pass the categories' identifiers and the user's access_token. Categories whose identifiers do not exist or that relate to a different user not be contained in the result (If this applies to all of the given identifiers, then the result will be an empty list). WARNING: This service is deprecated and will be removed at some point. If you want to get multiple categories, please instead use the service 'Get and search all categories' and pass a comma-separated list of identifiers as a parameter 'ids'.
     * @param {Array.<Number>} ids Comma-separated list of identifiers of requested categories
     * @param {module:api/CategoriesApi~getMultipleCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryList}
     */
    this.getMultipleCategories = function(ids, callback) {
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getMultipleCategories");
      }


      var pathParams = {
        'ids': ids
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = CategoryList;

      return this.apiClient.callApi(
        '/api/v1/categories/{ids}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainCategorization operation.
     * @callback module:api/CategoriesApi~trainCategorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Train categorization
     * This service allows you to create user-specific categorization rules (for the user that is authorized by the access_token). Pass a categorization sample (=set of transaction data and a target category), and finAPI will train the user's categorization rules so that similar transactions will be categorized accordingly in future. Basically, this service behaves the same as when assigning categories to existing transactions via the 'Edit a transaction' service, with the difference that you can directly pass transaction data to this service, without the need of having any transactions actually imported in finAPI. Must pass the user's access_token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TrainCategorizationData} opts.body Categorization sample
     * @param {module:api/CategoriesApi~trainCategorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.trainCategorization = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/categories/trainCategorization', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
