/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadCredentialsError', 'model/ErrorMessage', 'model/ExecutePasswordChangeParams', 'model/PasswordChangingResource', 'model/RequestPasswordChangeParams', 'model/User', 'model/UserCreateParams', 'model/UserUpdateParams', 'model/VerificationStatusResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadCredentialsError'), require('../model/ErrorMessage'), require('../model/ExecutePasswordChangeParams'), require('../model/PasswordChangingResource'), require('../model/RequestPasswordChangeParams'), require('../model/User'), require('../model/UserCreateParams'), require('../model/UserUpdateParams'), require('../model/VerificationStatusResource'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.UsersApi = factory(root.FinApiResTfulServices.ApiClient, root.FinApiResTfulServices.BadCredentialsError, root.FinApiResTfulServices.ErrorMessage, root.FinApiResTfulServices.ExecutePasswordChangeParams, root.FinApiResTfulServices.PasswordChangingResource, root.FinApiResTfulServices.RequestPasswordChangeParams, root.FinApiResTfulServices.User, root.FinApiResTfulServices.UserCreateParams, root.FinApiResTfulServices.UserUpdateParams, root.FinApiResTfulServices.VerificationStatusResource);
  }
}(this, function(ApiClient, BadCredentialsError, ErrorMessage, ExecutePasswordChangeParams, PasswordChangingResource, RequestPasswordChangeParams, User, UserCreateParams, UserUpdateParams, VerificationStatusResource) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version v1.92.0
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user
     * <p>Create a new user. Must pass your global (i.e. client) access_token. </p><p>This service returns the user's password as plain text. </p><p>The automatic update of the user's bank connections is disabled by default for any new user. User identifiers are regarded case-insensitive by finAPI.</p><p>Please note that finAPI generally has a restricted set of allowed characters for input fields. You can find the allowed characters <a href = \"https://finapi.zendesk.com/hc/en-us/articles/222013148-What-symbols-are-allowed-in-finAPI-\">here</a>. If a field does not explicitly specify a set of allowed characters, then these are the characters that are allowed for the field. Some fields may specify a different set of characters, in which case this will be documented for the field (like for the 'id' field in this service).</p>
     * @param {module:model/UserCreateParams} body User's details
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.createUser = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/v1/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizedUser operation.
     * @callback module:api/UsersApi~deleteAuthorizedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the authorized user
     * Delete the authorized user. Must pass the user's access_token. ATTENTION: This deletes the user including all of his bank connections, accounts, balance data and transactions! THIS PROCESS CANNOT BE UNDONE! Note that a user cannot get deleted while any of his bank connections are currently busy (in the process of import, update, or transactions categorization). <p>Note: finAPI will send a notification about the deletion of the user to each of your clients that has a user synchronization callback URL set in its configuration. This also includes the client that is performing this request.</p>
     * @param {module:api/UsersApi~deleteAuthorizedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAuthorizedUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUnverifiedUser operation.
     * @callback module:api/UsersApi~deleteUnverifiedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an unverified user
     * Delete an unverified user. Must pass your global (i.e. client) access_token.<br/><br/>Notes:<br/>&bull; Unverified users can only exist if the field 'isUserAutoVerificationEnabled' (see Client Configuration Resource) is set to 'false' (or had been false at some point in the past).<br/>&bull; finAPI will send a notification about the deletion of the user to each of your clients that has a user synchronization callback URL set in its configuration. This also includes the client that is performing this request.<br/>&bull; finAPI regards user identifiers case-insensitive.
     * @param {String} userId 
     * @param {module:api/UsersApi~deleteUnverifiedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUnverifiedUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUnverifiedUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{userId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editAuthorizedUser operation.
     * @callback module:api/UsersApi~editAuthorizedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit the authorized user
     * Edit the authorized user's data and settings. Must pass the user's access_token. Pass an empty string (but not null) to unset either the email or phone number. At least one field must have a non-null value in the request body. This service returns the user's password as 'XXXXX'.
     * @param {module:model/UserUpdateParams} body User's details
     * @param {module:api/UsersApi~editAuthorizedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.editAuthorizedUser = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editAuthorizedUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/v1/users', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the executePasswordChange operation.
     * @callback module:api/UsersApi~executePasswordChangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute password change
     * Change the password of a user. Must pass your global (i.e. client) access_token.<br/><br/>Note: When changing the password of a user, all tokens that have been handed out for that user (for whatever client) will be revoked! Also note that finAPI regards user identifiers case-insensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutePasswordChangeParams} opts.body 
     * @param {module:api/UsersApi~executePasswordChangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.executePasswordChange = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/executePasswordChange', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizedUser operation.
     * @callback module:api/UsersApi~getAuthorizedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the authorized user
     * Get the authorized user's data. Must pass the user's access_token. Only the authorized user can get his data, i.e. his access_token must be used. This service returns the user's password as 'XXXXX'.
     * @param {module:api/UsersApi~getAuthorizedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getAuthorizedUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/v1/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVerificationStatus operation.
     * @callback module:api/UsersApi~getVerificationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationStatusResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's verification status
     * Get the verification status of the requested user. Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.
     * @param {String} userId User's identifier
     * @param {module:api/UsersApi~getVerificationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationStatusResource}
     */
    this.getVerificationStatus = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getVerificationStatus");
      }


      var pathParams = {
      };
      var queryParams = {
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = VerificationStatusResource;

      return this.apiClient.callApi(
        '/api/v1/users/verificationStatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordChange operation.
     * @callback module:api/UsersApi~requestPasswordChangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordChangingResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request password change
     * Request password change for a user. Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestPasswordChangeParams} opts.body 
     * @param {module:api/UsersApi~requestPasswordChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordChangingResource}
     */
    this.requestPasswordChange = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = PasswordChangingResource;

      return this.apiClient.callApi(
        '/api/v1/users/requestPasswordChange', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyUser operation.
     * @callback module:api/UsersApi~verifyUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify a user
     * Verify a user. User verification is only required when your client does not have auto-verification enabled (see field 'isUserAutoVerificationEnabled' in Client Configuration Resource). Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.
     * @param {String} userId User's identifier
     * @param {module:api/UsersApi~verifyUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.verifyUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling verifyUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['finapi_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/verify/{userId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
