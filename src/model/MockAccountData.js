/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NewTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NewTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.MockAccountData = factory(root.FinApiResTfulServices.ApiClient, root.FinApiResTfulServices.NewTransaction);
  }
}(this, function(ApiClient, NewTransaction) {
  'use strict';

  /**
   * The MockAccountData model module.
   * @module model/MockAccountData
   * @version v1.92.0
   */

  /**
   * Constructs a new <code>MockAccountData</code>.
   * Mock account data
   * @alias module:model/MockAccountData
   * @class
   * @param accountId {Number} Account identifier
   * @param accountBalance {Number} The balance that this account should be set to. Note that when the balance does not add up to the current balance plus the sum of the transactions you pass in the 'newTransactions' field, finAPI will fix the balance deviation with the insertion of an adjusting entry ('Zwischensaldo' transaction).
   */
  var exports = function(accountId, accountBalance) {
    this.accountId = accountId;
    this.accountBalance = accountBalance;
  };

  /**
   * Constructs a <code>MockAccountData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MockAccountData} obj Optional instance to populate.
   * @return {module:model/MockAccountData} The populated <code>MockAccountData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'Number');
      if (data.hasOwnProperty('accountBalance'))
        obj.accountBalance = ApiClient.convertToType(data['accountBalance'], 'Number');
      if (data.hasOwnProperty('newTransactions'))
        obj.newTransactions = ApiClient.convertToType(data['newTransactions'], [NewTransaction]);
    }
    return obj;
  }

  /**
   * Account identifier
   * @member {Number} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * The balance that this account should be set to. Note that when the balance does not add up to the current balance plus the sum of the transactions you pass in the 'newTransactions' field, finAPI will fix the balance deviation with the insertion of an adjusting entry ('Zwischensaldo' transaction).
   * @member {Number} accountBalance
   */
  exports.prototype.accountBalance = undefined;

  /**
   * New transactions that should be imported into the account (maximum 1000 transactions at once). Please make sure that the value you pass in the 'accountBalance' field equals the current account balance plus the sum of the new transactions that you pass here, otherwise finAPI will detect a deviation in the balance and fix it with the insertion of an adjusting entry ('Zwischensaldo' transaction). Please also note that it is not guaranteed that all transactions that you pass here will actually get imported. More specifically, finAPI will ignore any transactions whose booking date is prior to the booking date of the latest currently existing transactions minus 10 days (which is the 'update window' that finAPI uses when importing new transactions). Also, finAPI will ignore any transactions that are considered duplicates of already existing transactions within the update window. This is the case for instance when you try to import a new transaction with the same booking date and same amount as an already existing transaction. In such cases, you might get an adjusting entry too ('Zwischensaldo' transaction), as your given balance might not add up to the transactions that will exist in the account after the update.
   * @member {Array.<module:model/NewTransaction>} newTransactions
   */
  exports.prototype.newTransactions = undefined;

  return exports;

}));
