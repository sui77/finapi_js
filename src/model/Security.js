/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.Security = factory(root.FinApiResTfulServices.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Security model module.
   * @module model/Security
   * @version v1.92.0
   */

  /**
   * Constructs a new <code>Security</code>.
   * Container for a security position's data
   * @alias module:model/Security
   * @class
   * @param id {Number} Identifier. Note: Whenever a security account is being updated, its security positions will be internally re-created, meaning that the identifier of a security position might change over time.
   * @param accountId {Number} Security account identifier
   */
  var exports = function(id, accountId) {
    this.id = id;
    this.accountId = accountId;
  };

  /**
   * Constructs a <code>Security</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Security} obj Optional instance to populate.
   * @return {module:model/Security} The populated <code>Security</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('isin'))
        obj.isin = ApiClient.convertToType(data['isin'], 'String');
      if (data.hasOwnProperty('wkn'))
        obj.wkn = ApiClient.convertToType(data['wkn'], 'String');
      if (data.hasOwnProperty('quote'))
        obj.quote = ApiClient.convertToType(data['quote'], 'Number');
      if (data.hasOwnProperty('quoteCurrency'))
        obj.quoteCurrency = ApiClient.convertToType(data['quoteCurrency'], 'String');
      if (data.hasOwnProperty('quoteType'))
        obj.quoteType = ApiClient.convertToType(data['quoteType'], 'String');
      if (data.hasOwnProperty('quoteDate'))
        obj.quoteDate = ApiClient.convertToType(data['quoteDate'], 'String');
      if (data.hasOwnProperty('quantityNominal'))
        obj.quantityNominal = ApiClient.convertToType(data['quantityNominal'], 'Number');
      if (data.hasOwnProperty('quantityNominalType'))
        obj.quantityNominalType = ApiClient.convertToType(data['quantityNominalType'], 'String');
      if (data.hasOwnProperty('marketValue'))
        obj.marketValue = ApiClient.convertToType(data['marketValue'], 'Number');
      if (data.hasOwnProperty('marketValueCurrency'))
        obj.marketValueCurrency = ApiClient.convertToType(data['marketValueCurrency'], 'String');
      if (data.hasOwnProperty('entryQuote'))
        obj.entryQuote = ApiClient.convertToType(data['entryQuote'], 'Number');
      if (data.hasOwnProperty('entryQuoteCurrency'))
        obj.entryQuoteCurrency = ApiClient.convertToType(data['entryQuoteCurrency'], 'String');
      if (data.hasOwnProperty('profitOrLoss'))
        obj.profitOrLoss = ApiClient.convertToType(data['profitOrLoss'], 'Number');
    }
    return obj;
  }

  /**
   * Identifier. Note: Whenever a security account is being updated, its security positions will be internally re-created, meaning that the identifier of a security position might change over time.
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * Security account identifier
   * @member {Number} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * Name
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * ISIN
   * @member {String} isin
   */
  exports.prototype.isin = undefined;

  /**
   * WKN
   * @member {String} wkn
   */
  exports.prototype.wkn = undefined;

  /**
   * Quote
   * @member {Number} quote
   */
  exports.prototype.quote = undefined;

  /**
   * Currency of quote
   * @member {String} quoteCurrency
   */
  exports.prototype.quoteCurrency = undefined;

  /**
   * Type of quote. 'PERC' if quote is a percentage value, 'ACTU' if quote is the actual amount
   * @member {module:model/Security.QuoteTypeEnum} quoteType
   */
  exports.prototype.quoteType = undefined;

  /**
   * Quote date in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time).
   * @member {String} quoteDate
   */
  exports.prototype.quoteDate = undefined;

  /**
   * Value of quantity or nominal
   * @member {Number} quantityNominal
   */
  exports.prototype.quantityNominal = undefined;

  /**
   * Type of quantity or nominal value. 'UNIT' if value is a quantity, 'FAMT' if value is the nominal amount
   * @member {module:model/Security.QuantityNominalTypeEnum} quantityNominalType
   */
  exports.prototype.quantityNominalType = undefined;

  /**
   * Market value
   * @member {Number} marketValue
   */
  exports.prototype.marketValue = undefined;

  /**
   * Currency of market value
   * @member {String} marketValueCurrency
   */
  exports.prototype.marketValueCurrency = undefined;

  /**
   * Entry quote
   * @member {Number} entryQuote
   */
  exports.prototype.entryQuote = undefined;

  /**
   * Currency of entry quote
   * @member {String} entryQuoteCurrency
   */
  exports.prototype.entryQuoteCurrency = undefined;

  /**
   * Current profit or loss
   * @member {Number} profitOrLoss
   */
  exports.prototype.profitOrLoss = undefined;


  /**
   * Allowed values for the <code>quoteType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.QuoteTypeEnum = {
    /**
     * value: "ACTU"
     * @const
     */
    ACTU: "ACTU",

    /**
     * value: "PERC"
     * @const
     */
    PERC: "PERC"
  };


  /**
   * Allowed values for the <code>quantityNominalType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.QuantityNominalTypeEnum = {
    /**
     * value: "UNIT"
     * @const
     */
    UNIT: "UNIT",

    /**
     * value: "FAMT"
     * @const
     */
    FAMT: "FAMT"
  };

  return exports;

}));
