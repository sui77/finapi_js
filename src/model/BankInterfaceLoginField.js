/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.BankInterfaceLoginField = factory(root.FinApiResTfulServices.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The BankInterfaceLoginField model module.
   * @module model/BankInterfaceLoginField
   * @version v1.92.0
   */

  /**
   * Constructs a new <code>BankInterfaceLoginField</code>.
   * Container for a bank's login credential field
   * @alias module:model/BankInterfaceLoginField
   * @class
   * @param label {String} Contains a German label for the input field that you should provide to the user. Also, these labels are used to identify login fields on the API-level, when you pass credentials to the service.
   * @param isSecret {Boolean} Whether this field has to be treated as a secret. In this case your application should use a password input field instead of a cleartext field.
   * @param isVolatile {Boolean} Whether this field depicts a credential that is volatile. If a field is volatile, it means that the value for the field, as provided by the user, is usually valid only for a single authentication, and is then invalidated on bank-side. If a bank uses volatile login credentials, it is strongly inadvisable to store the credentials in finAPI, as stored credentials will not work for future authentications.
   */
  var exports = function(label, isSecret, isVolatile) {
    this.label = label;
    this.isSecret = isSecret;
    this.isVolatile = isVolatile;
  };

  /**
   * Constructs a <code>BankInterfaceLoginField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BankInterfaceLoginField} obj Optional instance to populate.
   * @return {module:model/BankInterfaceLoginField} The populated <code>BankInterfaceLoginField</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('label'))
        obj.label = ApiClient.convertToType(data['label'], 'String');
      if (data.hasOwnProperty('isSecret'))
        obj.isSecret = ApiClient.convertToType(data['isSecret'], 'Boolean');
      if (data.hasOwnProperty('isVolatile'))
        obj.isVolatile = ApiClient.convertToType(data['isVolatile'], 'Boolean');
    }
    return obj;
  }

  /**
   * Contains a German label for the input field that you should provide to the user. Also, these labels are used to identify login fields on the API-level, when you pass credentials to the service.
   * @member {String} label
   */
  exports.prototype.label = undefined;

  /**
   * Whether this field has to be treated as a secret. In this case your application should use a password input field instead of a cleartext field.
   * @member {Boolean} isSecret
   */
  exports.prototype.isSecret = undefined;

  /**
   * Whether this field depicts a credential that is volatile. If a field is volatile, it means that the value for the field, as provided by the user, is usually valid only for a single authentication, and is then invalidated on bank-side. If a bank uses volatile login credentials, it is strongly inadvisable to store the credentials in finAPI, as stored credentials will not work for future authentications.
   * @member {Boolean} isVolatile
   */
  exports.prototype.isVolatile = undefined;

  return exports;

}));
