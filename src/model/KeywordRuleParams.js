/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.KeywordRuleParams = factory(root.FinApiResTfulServices.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The KeywordRuleParams model module.
   * @module model/KeywordRuleParams
   * @version v1.92.0
   */

  /**
   * Constructs a new <code>KeywordRuleParams</code>.
   * Parameters of keyword rule
   * @alias module:model/KeywordRuleParams
   * @class
   * @param categoryId {Number} ID of the category that this rule should assign to the matching transactions
   * @param direction {module:model/KeywordRuleParams.DirectionEnum} Direction for the rule. 'Income' means that the rule applies to transactions with a positive amount only, 'Spending' means it applies to transactions with a negative amount only. 'Both' means that it applies to both kind of transactions. Note that in case of 'Both', finAPI will create two individual rules (one with direction 'Income' and one with direction 'Spending').
   * @param keywords {Array.<String>} Set of keywords for the rule (Keywords are regarded case-insensitive). The minimum number of keywords is 1. The maximum number of keywords is 100.
   */
  var exports = function(categoryId, direction, keywords) {
    this.categoryId = categoryId;
    this.direction = direction;
    this.keywords = keywords;
  };

  /**
   * Constructs a <code>KeywordRuleParams</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/KeywordRuleParams} obj Optional instance to populate.
   * @return {module:model/KeywordRuleParams} The populated <code>KeywordRuleParams</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('categoryId'))
        obj.categoryId = ApiClient.convertToType(data['categoryId'], 'Number');
      if (data.hasOwnProperty('direction'))
        obj.direction = ApiClient.convertToType(data['direction'], 'String');
      if (data.hasOwnProperty('keywords'))
        obj.keywords = ApiClient.convertToType(data['keywords'], ['String']);
    }
    return obj;
  }

  /**
   * ID of the category that this rule should assign to the matching transactions
   * @member {Number} categoryId
   */
  exports.prototype.categoryId = undefined;

  /**
   * Direction for the rule. 'Income' means that the rule applies to transactions with a positive amount only, 'Spending' means it applies to transactions with a negative amount only. 'Both' means that it applies to both kind of transactions. Note that in case of 'Both', finAPI will create two individual rules (one with direction 'Income' and one with direction 'Spending').
   * @member {module:model/KeywordRuleParams.DirectionEnum} direction
   */
  exports.prototype.direction = undefined;

  /**
   * Set of keywords for the rule (Keywords are regarded case-insensitive). The minimum number of keywords is 1. The maximum number of keywords is 100.
   * @member {Array.<String>} keywords
   */
  exports.prototype.keywords = undefined;


  /**
   * Allowed values for the <code>direction</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DirectionEnum = {
    /**
     * value: "Income"
     * @const
     */
    income: "Income",

    /**
     * value: "Spending"
     * @const
     */
    spending: "Spending",

    /**
     * value: "Both"
     * @const
     */
    both: "Both"
  };

  return exports;

}));
