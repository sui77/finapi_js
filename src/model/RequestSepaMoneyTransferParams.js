/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MultiStepAuthenticationCallback', 'model/SingleMoneyTransferRecipientData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MultiStepAuthenticationCallback'), require('./SingleMoneyTransferRecipientData'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.RequestSepaMoneyTransferParams = factory(root.FinApiResTfulServices.ApiClient, root.FinApiResTfulServices.MultiStepAuthenticationCallback, root.FinApiResTfulServices.SingleMoneyTransferRecipientData);
  }
}(this, function(ApiClient, MultiStepAuthenticationCallback, SingleMoneyTransferRecipientData) {
  'use strict';

  /**
   * The RequestSepaMoneyTransferParams model module.
   * @module model/RequestSepaMoneyTransferParams
   * @version v1.92.0
   */

  /**
   * Constructs a new <code>RequestSepaMoneyTransferParams</code>.
   * Parameters for a single or collective SEPA money transfer order request
   * @alias module:model/RequestSepaMoneyTransferParams
   * @class
   * @param amount {Number} The amount to transfer. Must be a positive decimal number with at most two decimal places (e.g. 99.99)
   * @param accountId {Number} Identifier of the bank account that you want to transfer money from
   */
  var exports = function(amount, accountId) {
    this.amount = amount;
    this.accountId = accountId;
  };

  /**
   * Constructs a <code>RequestSepaMoneyTransferParams</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RequestSepaMoneyTransferParams} obj Optional instance to populate.
   * @return {module:model/RequestSepaMoneyTransferParams} The populated <code>RequestSepaMoneyTransferParams</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('recipientName'))
        obj.recipientName = ApiClient.convertToType(data['recipientName'], 'String');
      if (data.hasOwnProperty('recipientIban'))
        obj.recipientIban = ApiClient.convertToType(data['recipientIban'], 'String');
      if (data.hasOwnProperty('recipientBic'))
        obj.recipientBic = ApiClient.convertToType(data['recipientBic'], 'String');
      if (data.hasOwnProperty('clearingAccountId'))
        obj.clearingAccountId = ApiClient.convertToType(data['clearingAccountId'], 'String');
      if (data.hasOwnProperty('endToEndId'))
        obj.endToEndId = ApiClient.convertToType(data['endToEndId'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'Number');
      if (data.hasOwnProperty('purpose'))
        obj.purpose = ApiClient.convertToType(data['purpose'], 'String');
      if (data.hasOwnProperty('sepaPurposeCode'))
        obj.sepaPurposeCode = ApiClient.convertToType(data['sepaPurposeCode'], 'String');
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'Number');
      if (data.hasOwnProperty('bankingPin'))
        obj.bankingPin = ApiClient.convertToType(data['bankingPin'], 'String');
      if (data.hasOwnProperty('storeSecrets'))
        obj.storeSecrets = ApiClient.convertToType(data['storeSecrets'], 'Boolean');
      if (data.hasOwnProperty('twoStepProcedureId'))
        obj.twoStepProcedureId = ApiClient.convertToType(data['twoStepProcedureId'], 'String');
      if (data.hasOwnProperty('executionDate'))
        obj.executionDate = ApiClient.convertToType(data['executionDate'], 'String');
      if (data.hasOwnProperty('singleBooking'))
        obj.singleBooking = ApiClient.convertToType(data['singleBooking'], 'Boolean');
      if (data.hasOwnProperty('additionalMoneyTransfers'))
        obj.additionalMoneyTransfers = ApiClient.convertToType(data['additionalMoneyTransfers'], [SingleMoneyTransferRecipientData]);
      if (data.hasOwnProperty('challengeResponse'))
        obj.challengeResponse = ApiClient.convertToType(data['challengeResponse'], 'String');
      if (data.hasOwnProperty('multiStepAuthentication'))
        obj.multiStepAuthentication = MultiStepAuthenticationCallback.constructFromObject(data['multiStepAuthentication']);
      if (data.hasOwnProperty('hideTransactionDetailsInWebForm'))
        obj.hideTransactionDetailsInWebForm = ApiClient.convertToType(data['hideTransactionDetailsInWebForm'], 'Boolean');
      if (data.hasOwnProperty('storePin'))
        obj.storePin = ApiClient.convertToType(data['storePin'], 'Boolean');
    }
    return obj;
  }

  /**
   * Name of the recipient. Note: Neither finAPI nor the involved bank servers are guaranteed to validate the recipient name. Even if the recipient name does not depict the actual registered account holder of the specified recipient account, the money transfer request might still be successful. This field is optional only when you pass a clearing account as the recipient. Otherwise, this field is required.
   * @member {String} recipientName
   */
  exports.prototype.recipientName = undefined;

  /**
   * IBAN of the recipient's account. This field is optional only when you pass a clearing account as the recipient. Otherwise, this field is required.
   * @member {String} recipientIban
   */
  exports.prototype.recipientIban = undefined;

  /**
   * BIC of the recipient's account. Note: This field is optional when you pass a clearing account as the recipient or if the bank connection of the account that you want to transfer money from supports the IBAN-Only money transfer. You can find this out via GET /bankConnections/<id>. If no BIC is given, finAPI will try to recognize it using the given recipientIban value (if it's given). And then if the result value is not empty, it will be used for the money transfer request independent of whether it is required or not (unless you pass a clearing account, in which case the value will always be ignored).
   * @member {String} recipientBic
   */
  exports.prototype.recipientBic = undefined;

  /**
   * Identifier of a clearing account. If this field is set, then the fields 'recipientName', 'recipientIban' and 'recipientBic' will be ignored and the recipient account will be the specified clearing account.
   * @member {String} clearingAccountId
   */
  exports.prototype.clearingAccountId = undefined;

  /**
   * End-To-End ID for the transfer transaction
   * @member {String} endToEndId
   */
  exports.prototype.endToEndId = undefined;

  /**
   * The amount to transfer. Must be a positive decimal number with at most two decimal places (e.g. 99.99)
   * @member {Number} amount
   */
  exports.prototype.amount = undefined;

  /**
   * The purpose of the transfer transaction
   * @member {String} purpose
   */
  exports.prototype.purpose = undefined;

  /**
   * SEPA purpose code, according to ISO 20022, external codes set.
   * @member {String} sepaPurposeCode
   */
  exports.prototype.sepaPurposeCode = undefined;

  /**
   * Identifier of the bank account that you want to transfer money from
   * @member {Number} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * Online banking PIN. Any symbols are allowed. Max length: 170. If a PIN is stored in the bank connection, then this field may remain unset. If finAPI's web form is not required and the field is set though then it will always be used (even if there is some other PIN stored in the bank connection). If you want the user to enter a PIN in finAPI's web form even when a PIN is stored, then just set the field to any value, so that the service recognizes that you wish to use the web form flow.
   * @member {String} bankingPin
   */
  exports.prototype.bankingPin = undefined;

  /**
   * Whether to store the PIN. If the PIN is stored, it is not required to pass the PIN again when executing SEPA orders. Default value is 'false'. <br/><br/>NOTES:<br/> - before you set this field to true, please regard the 'pinsAreVolatile' flag of the bank connection that the account belongs to;<br/> - this field is ignored in case when the user will need to use finAPI's web form. The user will be able to decide whether to store the PIN or not in the web form, depending on the 'storeSecretsAvailableInWebForm' setting (see Client Configuration).
   * @member {Boolean} storeSecrets
   * @default false
   */
  exports.prototype.storeSecrets = false;

  /**
   * The bank-given ID of the two-step-procedure that should be used for the order. For a list of available two-step-procedures, see the corresponding bank connection (GET /bankConnections). If this field is not set, then the bank connection's default two-step-procedure will be used. Note that in this case, when the bank connection has no default two-step-procedure set, then the response of the service depends on whether you need to use finAPI's web form or not. If you need to use the web form, the user will be prompted to select the two-step-procedure within the web form. If you don't need to use the web form, then the service will return an error (passing a value for this field is required in this case).
   * @member {String} twoStepProcedureId
   */
  exports.prototype.twoStepProcedureId = undefined;

  /**
   * Execution date for the money transfer(s), in the format 'YYYY-MM-DD'. If not specified, then the current date will be used.
   * @member {String} executionDate
   */
  exports.prototype.executionDate = undefined;

  /**
   * This field is only regarded when you pass multiple orders. It determines whether the orders should be processed by the bank as one collective booking (in case of 'false'), or as single bookings (in case of 'true'). Default value is 'false'.
   * @member {Boolean} singleBooking
   * @default false
   */
  exports.prototype.singleBooking = false;

  /**
   * In case that you want to submit not just a single money transfer, but do a collective money transfer, use this field to pass a list of additional money transfer orders. The service will then pass a collective money transfer request to the bank, including both the money transfer specified on the top-level, as well as all money transfers specified in this list. The maximum count of money transfers that you can pass (in total) is 15000. Note that you should check the account's 'supportedOrders' field to find out whether or not it is supporting collective money transfers.
   * @member {Array.<module:model/SingleMoneyTransferRecipientData>} additionalMoneyTransfers
   */
  exports.prototype.additionalMoneyTransfers = undefined;

  /**
   * NOTE: This field is DEPRECATED and will get removed at some point. Please refer to the 'multiStepAuthentication' field instead.<br/><br/>Challenge response. This field should be set only when the previous attempt to request a SEPA money transfer failed with HTTP code 510, i.e. the bank sent a challenge for the user for an additional authentication. In this case, this field must contain the response to the bank's challenge. Please note that in case of using finAPI's web form you have to leave this field unset and the application will automatically recognize that the user has to input challenge response and then a web form will be shown to the user.
   * @member {String} challengeResponse
   */
  exports.prototype.challengeResponse = undefined;

  /**
   * Container for multi-step authentication data. Required when a previous service call initiated a multi-step authentication.
   * @member {module:model/MultiStepAuthenticationCallback} multiStepAuthentication
   */
  exports.prototype.multiStepAuthentication = undefined;

  /**
   * Whether the finAPI web form should hide transaction details when prompting the caller for the second factor. Default value is false.
   * @member {Boolean} hideTransactionDetailsInWebForm
   * @default false
   */
  exports.prototype.hideTransactionDetailsInWebForm = false;

  /**
   * Whether to store the PIN. If the PIN is stored, it is not required to pass the PIN again when executing SEPA orders. Default value is 'false'. <br/><br/>NOTES:<br/> - before you set this field to true, please regard the 'pinsAreVolatile' flag of the bank connection that the account belongs to;<br/> - this field is ignored in case when the user will need to use finAPI's web form. The user will be able to decide whether to store the PIN or not in the web form, depending on the 'storeSecretsAvailableInWebForm' setting (see Client Configuration).<br><br>NOTE: This field is deprecated and will be removed at some point. Use 'storeSecrets' instead.
   * @member {Boolean} storePin
   * @default false
   */
  exports.prototype.storePin = false;

  return exports;

}));
