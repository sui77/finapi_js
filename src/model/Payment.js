/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.Payment = factory(root.FinApiResTfulServices.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Payment model module.
   * @module model/Payment
   * @version v1.92.0
   */

  /**
   * Constructs a new <code>Payment</code>.
   * Container for a payment's data
   * @alias module:model/Payment
   * @class
   * @param id {Number} Payment identifier
   * @param accountId {Number} Identifier of the account to which this payment relates
   * @param type {module:model/Payment.TypeEnum} Payment type
   * @param amount {Number} Total money amount of the payment order(s), as absolute value
   * @param orderCount {Number} Total count of orders included in this payment
   * @param status {module:model/Payment.StatusEnum} Current payment status:<br/> &bull; OPEN: means that this payment has been created in finAPI, but not yet submitted to the bank.<br/> &bull; PENDING: means that this payment has been requested at the bank, but not yet executed.<br/> &bull; SUCCESSFUL: means that this payment has been successfully executed.<br/> &bull; NOT_SUCCESSFUL: means that this payment could not be executed successfully.<br/> &bull; DISCARDED: means that this payment was discarded, either because another payment was requested for the same account before this payment was executed and the bank does not support this, or because the bank has rejected the payment even before the execution.
   */
  var exports = function(id, accountId, type, amount, orderCount, status) {
    this.id = id;
    this.accountId = accountId;
    this.type = type;
    this.amount = amount;
    this.orderCount = orderCount;
    this.status = status;
  };

  /**
   * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Payment} obj Optional instance to populate.
   * @return {module:model/Payment} The populated <code>Payment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'Number');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'Number');
      if (data.hasOwnProperty('orderCount'))
        obj.orderCount = ApiClient.convertToType(data['orderCount'], 'Number');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('bankMessage'))
        obj.bankMessage = ApiClient.convertToType(data['bankMessage'], 'String');
      if (data.hasOwnProperty('requestDate'))
        obj.requestDate = ApiClient.convertToType(data['requestDate'], 'String');
      if (data.hasOwnProperty('executionDate'))
        obj.executionDate = ApiClient.convertToType(data['executionDate'], 'String');
    }
    return obj;
  }

  /**
   * Payment identifier
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * Identifier of the account to which this payment relates
   * @member {Number} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * Payment type
   * @member {module:model/Payment.TypeEnum} type
   */
  exports.prototype.type = undefined;

  /**
   * Total money amount of the payment order(s), as absolute value
   * @member {Number} amount
   */
  exports.prototype.amount = undefined;

  /**
   * Total count of orders included in this payment
   * @member {Number} orderCount
   */
  exports.prototype.orderCount = undefined;

  /**
   * Current payment status:<br/> &bull; OPEN: means that this payment has been created in finAPI, but not yet submitted to the bank.<br/> &bull; PENDING: means that this payment has been requested at the bank, but not yet executed.<br/> &bull; SUCCESSFUL: means that this payment has been successfully executed.<br/> &bull; NOT_SUCCESSFUL: means that this payment could not be executed successfully.<br/> &bull; DISCARDED: means that this payment was discarded, either because another payment was requested for the same account before this payment was executed and the bank does not support this, or because the bank has rejected the payment even before the execution.
   * @member {module:model/Payment.StatusEnum} status
   */
  exports.prototype.status = undefined;

  /**
   * Contains the bank's response to the execution of this payment. This field is not set until the payment gets executed. Note that even after the execution of the payment, the field might still not be set, if the bank did not send any response message.
   * @member {String} bankMessage
   */
  exports.prototype.bankMessage = undefined;

  /**
   * Time of when this payment was requested, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time)
   * @member {String} requestDate
   */
  exports.prototype.requestDate = undefined;

  /**
   * Time of when this payment was executed, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time)
   * @member {String} executionDate
   */
  exports.prototype.executionDate = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "MONEY_TRANSFER"
     * @const
     */
    MONEY_TRANSFER: "MONEY_TRANSFER",

    /**
     * value: "DIRECT_DEBIT"
     * @const
     */
    DIRECT_DEBIT: "DIRECT_DEBIT"
  };


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "OPEN"
     * @const
     */
    OPEN: "OPEN",

    /**
     * value: "PENDING"
     * @const
     */
    PENDING: "PENDING",

    /**
     * value: "SUCCESSFUL"
     * @const
     */
    SUCCESSFUL: "SUCCESSFUL",

    /**
     * value: "NOT_SUCCESSFUL"
     * @const
     */
    NOT_SUCCESSFUL: "NOT_SUCCESSFUL",

    /**
     * value: "DISCARDED"
     * @const
     */
    DISCARDED: "DISCARDED"
  };

  return exports;

}));
