/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FinApiResTfulServices) {
      root.FinApiResTfulServices = {};
    }
    root.FinApiResTfulServices.TwoStepProcedure = factory(root.FinApiResTfulServices.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The TwoStepProcedure model module.
   * @module model/TwoStepProcedure
   * @version v1.92.0
   */

  /**
   * Constructs a new <code>TwoStepProcedure</code>.
   * Two-step-procedure for user authorization on bank-side
   * @alias module:model/TwoStepProcedure
   * @class
   * @param procedureId {String} Bank-given ID of the procedure
   * @param procedureName {String} Bank-given name of the procedure
   * @param implicitExecute {Boolean} If 'true', then there is no need for your client to pass back anything to finAPI to continue the authorization when using this procedure. The authorization will be dealt with directly between the user, finAPI, and the bank.
   */
  var exports = function(procedureId, procedureName, implicitExecute) {
    this.procedureId = procedureId;
    this.procedureName = procedureName;
    this.implicitExecute = implicitExecute;
  };

  /**
   * Constructs a <code>TwoStepProcedure</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TwoStepProcedure} obj Optional instance to populate.
   * @return {module:model/TwoStepProcedure} The populated <code>TwoStepProcedure</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('procedureId'))
        obj.procedureId = ApiClient.convertToType(data['procedureId'], 'String');
      if (data.hasOwnProperty('procedureName'))
        obj.procedureName = ApiClient.convertToType(data['procedureName'], 'String');
      if (data.hasOwnProperty('procedureChallengeType'))
        obj.procedureChallengeType = ApiClient.convertToType(data['procedureChallengeType'], 'String');
      if (data.hasOwnProperty('implicitExecute'))
        obj.implicitExecute = ApiClient.convertToType(data['implicitExecute'], 'Boolean');
    }
    return obj;
  }

  /**
   * Bank-given ID of the procedure
   * @member {String} procedureId
   */
  exports.prototype.procedureId = undefined;

  /**
   * Bank-given name of the procedure
   * @member {String} procedureName
   */
  exports.prototype.procedureName = undefined;

  /**
   * The challenge type of the procedure. Possible values are:<br/><br/>&bull; <code>TEXT</code> - the challenge will be a text that contains instructions for the user on how to proceed with the authorization.<br/>&bull; <code>PHOTO</code> - the challenge will contain a BASE-64 string depicting a photo (or any kind of QR-code-like data) that must be shown to the user.<br/>&bull; <code>FLICKER_CODE</code> - the challenge will contain a BASE-64 string depicting a flicker code animation that must be shown to the user.<br/><br/>Note that this challenge type information does not originate from the bank, but is determined by finAPI internally. There is no guarantee that the determined challenge type is correct. Note also that this field may not be set, meaning that finAPI could not determine the challenge type of the procedure.
   * @member {String} procedureChallengeType
   */
  exports.prototype.procedureChallengeType = undefined;

  /**
   * If 'true', then there is no need for your client to pass back anything to finAPI to continue the authorization when using this procedure. The authorization will be dealt with directly between the user, finAPI, and the bank.
   * @member {Boolean} implicitExecute
   */
  exports.prototype.implicitExecute = undefined;

  return exports;

}));
