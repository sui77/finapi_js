/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.LabelsApi();
  });

  describe('(package)', function() {
    describe('LabelsApi', function() {
      describe('createLabel', function() {
        it('should call createLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for createLabel call and complete the assertions
          /*
          var body = new FinApiResTfulServices.LabelParams();
          body.name = "test";

          instance.createLabel(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Label);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("test");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAllLabels', function() {
        it('should call deleteAllLabels successfully', function(done) {
          // TODO: uncomment deleteAllLabels call and complete the assertions
          /*

          instance.deleteAllLabels(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteLabel', function() {
        it('should call deleteLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteLabel call
          /*
          var id = 789;

          instance.deleteLabel(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editLabel', function() {
        it('should call editLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for editLabel call and complete the assertions
          /*
          var id = 789;
          var body = new FinApiResTfulServices.LabelParams();
          body.name = "test";

          instance.editLabel(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Label);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("test");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAndSearchAllLabels', function() {
        it('should call getAndSearchAllLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for getAndSearchAllLabels call and complete the assertions
          /*
          var opts = {};
          opts.ids = [3.4];
          opts.search = "search_example";
          opts.page = 1;
          opts.perPage = 20;
          opts.order = ["order_example"];

          instance.getAndSearchAllLabels(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableLabelList);
            {
              let dataCtr = data.labels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Label);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("test");
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLabel', function() {
        it('should call getLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for getLabel call and complete the assertions
          /*
          var id = 789;

          instance.getLabel(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Label);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("test");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMultipleLabels', function() {
        it('should call getMultipleLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for getMultipleLabels call and complete the assertions
          /*
          var ids = [3.4];

          instance.getMultipleLabels(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.LabelList);
            {
              let dataCtr = data.labels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Label);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("test");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
