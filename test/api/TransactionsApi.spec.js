/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.TransactionsApi();
  });

  describe('(package)', function() {
    describe('TransactionsApi', function() {
      describe('deleteAllTransactions', function() {
        it('should call deleteAllTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAllTransactions call and complete the assertions
          /*
          var opts = {};
          opts.maxDeletionDate = "maxDeletionDate_example";
          opts.safeMode = true;
          opts.rememberDeletion = false;

          instance.deleteAllTransactions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTransaction', function() {
        it('should call deleteTransaction successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTransaction call
          /*
          var id = 789;

          instance.deleteTransaction(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editMultipleTransactions', function() {
        it('should call editMultipleTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for editMultipleTransactions call and complete the assertions
          /*
          var body = new FinApiResTfulServices.UpdateMultipleTransactionsParams();
          body.isNew = false;
          body.isPotentialDuplicate = false;
          body.categoryId = 378;
          body.trainCategorization = true;
          body.labelIds = [1,2,3];
          body.ids = [1,2,3];
          body.accountIds = [1,2,3];

          instance.editMultipleTransactions(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editMultipleTransactionsDeprecated', function() {
        it('should call editMultipleTransactionsDeprecated successfully', function(done) {
          // TODO: uncomment, update parameter values for editMultipleTransactionsDeprecated call and complete the assertions
          /*
          var ids = [3.4];
          var body = new FinApiResTfulServices.UpdateTransactionsParams();
          body.isNew = false;
          body.isPotentialDuplicate = false;
          body.categoryId = 378;
          body.trainCategorization = true;
          body.labelIds = [1,2,3];

          instance.editMultipleTransactionsDeprecated(ids, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editTransaction', function() {
        it('should call editTransaction successfully', function(done) {
          // TODO: uncomment, update parameter values for editTransaction call and complete the assertions
          /*
          var id = 789;
          var body = new FinApiResTfulServices.UpdateTransactionsParams();
          body.isNew = false;
          body.isPotentialDuplicate = false;
          body.categoryId = 378;
          body.trainCategorization = true;
          body.labelIds = [1,2,3];

          instance.editTransaction(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Transaction);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.parentId).to.be.a('number');
            expect(data.parentId).to.be(2);
            expect(data.accountId).to.be.a('number');
            expect(data.accountId).to.be(1);
            expect(data.valueDate).to.be.a('string');
            expect(data.valueDate).to.be("2018-01-01 00:00:00.000");
            expect(data.bankBookingDate).to.be.a('string');
            expect(data.bankBookingDate).to.be("2018-01-01 00.00.00.000");
            expect(data.finapiBookingDate).to.be.a('string');
            expect(data.finapiBookingDate).to.be("2018-01-01 00:00:00.000");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(-99.99);
            expect(data.purpose).to.be.a('string');
            expect(data.purpose).to.be("Restaurantbesuch");
            expect(data.counterpartName).to.be.a('string');
            expect(data.counterpartName).to.be("Bar Centrale");
            expect(data.counterpartAccountNumber).to.be.a('string');
            expect(data.counterpartAccountNumber).to.be("0061110500");
            expect(data.counterpartIban).to.be.a('string');
            expect(data.counterpartIban).to.be("DE13700800000061110500");
            expect(data.counterpartBlz).to.be.a('string');
            expect(data.counterpartBlz).to.be("70080000");
            expect(data.counterpartBic).to.be.a('string');
            expect(data.counterpartBic).to.be("DRESDEFF700");
            expect(data.counterpartBankName).to.be.a('string');
            expect(data.counterpartBankName).to.be("Commerzbank vormals Dresdner Bank");
            expect(data.counterpartMandateReference).to.be.a('string');
            expect(data.counterpartMandateReference).to.be("MR123");
            expect(data.counterpartCustomerReference).to.be.a('string');
            expect(data.counterpartCustomerReference).to.be("CUR123");
            expect(data.counterpartCreditorId).to.be.a('string');
            expect(data.counterpartCreditorId).to.be("CRI123");
            expect(data.counterpartDebitorId).to.be.a('string');
            expect(data.counterpartDebitorId).to.be("CRI098");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("Ãœberweisungsauftrag");
            expect(data.typeCodeZka).to.be.a('string');
            expect(data.typeCodeZka).to.be("999");
            expect(data.typeCodeSwift).to.be.a('string');
            expect(data.typeCodeSwift).to.be("RAPRDE51");
            expect(data.sepaPurposeCode).to.be.a('string');
            expect(data.sepaPurposeCode).to.be("OTHR");
            expect(data.primanota).to.be.a('string');
            expect(data.primanota).to.be("Primanota");
            expect(data.category).to.be.a(FinApiResTfulServices.Category);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be(378);
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("Sport & Fitness");
              expect(data.category.parentId).to.be.a('number');
              expect(data.category.parentId).to.be(373);
              expect(data.category.parentName).to.be.a('string');
              expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
              expect(data.category.isCustom).to.be.a('boolean');
              expect(data.category.isCustom).to.be(false);
              {
                let dataCtr = data.category.children;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
            {
              let dataCtr = data.labels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Label);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("test");
              }
            }
            expect(data.isPotentialDuplicate).to.be.a('boolean');
            expect(data.isPotentialDuplicate).to.be(false);
            expect(data.isAdjustingEntry).to.be.a('boolean');
            expect(data.isAdjustingEntry).to.be(false);
            expect(data.isNew).to.be.a('boolean');
            expect(data.isNew).to.be(true);
            expect(data.importDate).to.be.a('string');
            expect(data.importDate).to.be("2018-01-01 00:00:00.000");
            {
              let dataCtr = data.children;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.paypalData).to.be.a(FinApiResTfulServices.PaypalTransactionData);
                  expect(data.paypalData.invoiceNumber).to.be.a('string');
              expect(data.paypalData.invoiceNumber).to.be("INV2-KXVU-7Z64-DT6W-MG2X");
              expect(data.paypalData.fee).to.be.a('number');
              expect(data.paypalData.fee).to.be(-0.99);
              expect(data.paypalData.net).to.be.a('number');
              expect(data.paypalData.net).to.be(9.99);
              expect(data.paypalData.auctionSite).to.be.a('string');
              expect(data.paypalData.auctionSite).to.be("eBay");
            expect(data.endToEndReference).to.be.a('string');
            expect(data.endToEndReference).to.be("001100550526");
            expect(data.compensationAmount).to.be.a('number');
            expect(data.compensationAmount).to.be(-1.11);
            expect(data.originalAmount).to.be.a('number');
            expect(data.originalAmount).to.be(-9.99);
            expect(data.differentDebitor).to.be.a('string');
            expect(data.differentDebitor).to.be("DIFD70204");
            expect(data.differentCreditor).to.be.a('string');
            expect(data.differentCreditor).to.be("DIFC98450");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAndSearchAllTransactions', function() {
        it('should call getAndSearchAllTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for getAndSearchAllTransactions call and complete the assertions
          /*
          var view = "view_example";
          var opts = {};
          opts.ids = [3.4];
          opts.search = "search_example";
          opts.counterpart = "counterpart_example";
          opts.purpose = "purpose_example";
          opts.accountIds = [3.4];
          opts.minBankBookingDate = "minBankBookingDate_example";
          opts.maxBankBookingDate = "maxBankBookingDate_example";
          opts.minFinapiBookingDate = "minFinapiBookingDate_example";
          opts.maxFinapiBookingDate = "maxFinapiBookingDate_example";
          opts.minAmount = 8.14;
          opts.maxAmount = 8.14;
          opts.direction = "all";
          opts.labelIds = [3.4];
          opts.categoryIds = [3.4];
          opts.includeChildCategories = true;
          opts.isNew = true;
          opts.isPotentialDuplicate = true;
          opts.isAdjustingEntry = true;
          opts.minImportDate = "minImportDate_example";
          opts.maxImportDate = "maxImportDate_example";
          opts.page = 1;
          opts.perPage = 20;
          opts.order = ["order_example"];

          instance.getAndSearchAllTransactions(view, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableTransactionList);
            {
              let dataCtr = data.transactions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Transaction);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.parentId).to.be.a('number');
                expect(data.parentId).to.be(2);
                expect(data.accountId).to.be.a('number');
                expect(data.accountId).to.be(1);
                expect(data.valueDate).to.be.a('string');
                expect(data.valueDate).to.be("2018-01-01 00:00:00.000");
                expect(data.bankBookingDate).to.be.a('string');
                expect(data.bankBookingDate).to.be("2018-01-01 00.00.00.000");
                expect(data.finapiBookingDate).to.be.a('string');
                expect(data.finapiBookingDate).to.be("2018-01-01 00:00:00.000");
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(-99.99);
                expect(data.purpose).to.be.a('string');
                expect(data.purpose).to.be("Restaurantbesuch");
                expect(data.counterpartName).to.be.a('string');
                expect(data.counterpartName).to.be("Bar Centrale");
                expect(data.counterpartAccountNumber).to.be.a('string');
                expect(data.counterpartAccountNumber).to.be("0061110500");
                expect(data.counterpartIban).to.be.a('string');
                expect(data.counterpartIban).to.be("DE13700800000061110500");
                expect(data.counterpartBlz).to.be.a('string');
                expect(data.counterpartBlz).to.be("70080000");
                expect(data.counterpartBic).to.be.a('string');
                expect(data.counterpartBic).to.be("DRESDEFF700");
                expect(data.counterpartBankName).to.be.a('string');
                expect(data.counterpartBankName).to.be("Commerzbank vormals Dresdner Bank");
                expect(data.counterpartMandateReference).to.be.a('string');
                expect(data.counterpartMandateReference).to.be("MR123");
                expect(data.counterpartCustomerReference).to.be.a('string');
                expect(data.counterpartCustomerReference).to.be("CUR123");
                expect(data.counterpartCreditorId).to.be.a('string');
                expect(data.counterpartCreditorId).to.be("CRI123");
                expect(data.counterpartDebitorId).to.be.a('string');
                expect(data.counterpartDebitorId).to.be("CRI098");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("Ãœberweisungsauftrag");
                expect(data.typeCodeZka).to.be.a('string');
                expect(data.typeCodeZka).to.be("999");
                expect(data.typeCodeSwift).to.be.a('string');
                expect(data.typeCodeSwift).to.be("RAPRDE51");
                expect(data.sepaPurposeCode).to.be.a('string');
                expect(data.sepaPurposeCode).to.be("OTHR");
                expect(data.primanota).to.be.a('string');
                expect(data.primanota).to.be("Primanota");
                expect(data.category).to.be.a(FinApiResTfulServices.Category);
                      expect(data.category.id).to.be.a('number');
                  expect(data.category.id).to.be(378);
                  expect(data.category.name).to.be.a('string');
                  expect(data.category.name).to.be("Sport & Fitness");
                  expect(data.category.parentId).to.be.a('number');
                  expect(data.category.parentId).to.be(373);
                  expect(data.category.parentName).to.be.a('string');
                  expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
                  expect(data.category.isCustom).to.be.a('boolean');
                  expect(data.category.isCustom).to.be(false);
                  {
                    let dataCtr = data.category.children;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be("0");
                    }
                  }
                {
                  let dataCtr = data.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.Label);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(1);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("test");
                  }
                }
                expect(data.isPotentialDuplicate).to.be.a('boolean');
                expect(data.isPotentialDuplicate).to.be(false);
                expect(data.isAdjustingEntry).to.be.a('boolean');
                expect(data.isAdjustingEntry).to.be(false);
                expect(data.isNew).to.be.a('boolean');
                expect(data.isNew).to.be(true);
                expect(data.importDate).to.be.a('string');
                expect(data.importDate).to.be("2018-01-01 00:00:00.000");
                {
                  let dataCtr = data.children;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
                expect(data.paypalData).to.be.a(FinApiResTfulServices.PaypalTransactionData);
                      expect(data.paypalData.invoiceNumber).to.be.a('string');
                  expect(data.paypalData.invoiceNumber).to.be("INV2-KXVU-7Z64-DT6W-MG2X");
                  expect(data.paypalData.fee).to.be.a('number');
                  expect(data.paypalData.fee).to.be(-0.99);
                  expect(data.paypalData.net).to.be.a('number');
                  expect(data.paypalData.net).to.be(9.99);
                  expect(data.paypalData.auctionSite).to.be.a('string');
                  expect(data.paypalData.auctionSite).to.be("eBay");
                expect(data.endToEndReference).to.be.a('string');
                expect(data.endToEndReference).to.be("001100550526");
                expect(data.compensationAmount).to.be.a('number');
                expect(data.compensationAmount).to.be(-1.11);
                expect(data.originalAmount).to.be.a('number');
                expect(data.originalAmount).to.be(-9.99);
                expect(data.differentDebitor).to.be.a('string');
                expect(data.differentDebitor).to.be("DIFD70204");
                expect(data.differentCreditor).to.be.a('string');
                expect(data.differentCreditor).to.be("DIFC98450");
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);
            expect(data.income).to.be.a('number');
            expect(data.income).to.be();
            expect(data.spending).to.be.a('number');
            expect(data.spending).to.be();
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMultipleTransactions', function() {
        it('should call getMultipleTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for getMultipleTransactions call and complete the assertions
          /*
          var ids = [3.4];

          instance.getMultipleTransactions(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.TransactionList);
            {
              let dataCtr = data.transactions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Transaction);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.parentId).to.be.a('number');
                expect(data.parentId).to.be(2);
                expect(data.accountId).to.be.a('number');
                expect(data.accountId).to.be(1);
                expect(data.valueDate).to.be.a('string');
                expect(data.valueDate).to.be("2018-01-01 00:00:00.000");
                expect(data.bankBookingDate).to.be.a('string');
                expect(data.bankBookingDate).to.be("2018-01-01 00.00.00.000");
                expect(data.finapiBookingDate).to.be.a('string');
                expect(data.finapiBookingDate).to.be("2018-01-01 00:00:00.000");
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(-99.99);
                expect(data.purpose).to.be.a('string');
                expect(data.purpose).to.be("Restaurantbesuch");
                expect(data.counterpartName).to.be.a('string');
                expect(data.counterpartName).to.be("Bar Centrale");
                expect(data.counterpartAccountNumber).to.be.a('string');
                expect(data.counterpartAccountNumber).to.be("0061110500");
                expect(data.counterpartIban).to.be.a('string');
                expect(data.counterpartIban).to.be("DE13700800000061110500");
                expect(data.counterpartBlz).to.be.a('string');
                expect(data.counterpartBlz).to.be("70080000");
                expect(data.counterpartBic).to.be.a('string');
                expect(data.counterpartBic).to.be("DRESDEFF700");
                expect(data.counterpartBankName).to.be.a('string');
                expect(data.counterpartBankName).to.be("Commerzbank vormals Dresdner Bank");
                expect(data.counterpartMandateReference).to.be.a('string');
                expect(data.counterpartMandateReference).to.be("MR123");
                expect(data.counterpartCustomerReference).to.be.a('string');
                expect(data.counterpartCustomerReference).to.be("CUR123");
                expect(data.counterpartCreditorId).to.be.a('string');
                expect(data.counterpartCreditorId).to.be("CRI123");
                expect(data.counterpartDebitorId).to.be.a('string');
                expect(data.counterpartDebitorId).to.be("CRI098");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("Ãœberweisungsauftrag");
                expect(data.typeCodeZka).to.be.a('string');
                expect(data.typeCodeZka).to.be("999");
                expect(data.typeCodeSwift).to.be.a('string');
                expect(data.typeCodeSwift).to.be("RAPRDE51");
                expect(data.sepaPurposeCode).to.be.a('string');
                expect(data.sepaPurposeCode).to.be("OTHR");
                expect(data.primanota).to.be.a('string');
                expect(data.primanota).to.be("Primanota");
                expect(data.category).to.be.a(FinApiResTfulServices.Category);
                      expect(data.category.id).to.be.a('number');
                  expect(data.category.id).to.be(378);
                  expect(data.category.name).to.be.a('string');
                  expect(data.category.name).to.be("Sport & Fitness");
                  expect(data.category.parentId).to.be.a('number');
                  expect(data.category.parentId).to.be(373);
                  expect(data.category.parentName).to.be.a('string');
                  expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
                  expect(data.category.isCustom).to.be.a('boolean');
                  expect(data.category.isCustom).to.be(false);
                  {
                    let dataCtr = data.category.children;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be("0");
                    }
                  }
                {
                  let dataCtr = data.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.Label);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(1);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("test");
                  }
                }
                expect(data.isPotentialDuplicate).to.be.a('boolean');
                expect(data.isPotentialDuplicate).to.be(false);
                expect(data.isAdjustingEntry).to.be.a('boolean');
                expect(data.isAdjustingEntry).to.be(false);
                expect(data.isNew).to.be.a('boolean');
                expect(data.isNew).to.be(true);
                expect(data.importDate).to.be.a('string');
                expect(data.importDate).to.be("2018-01-01 00:00:00.000");
                {
                  let dataCtr = data.children;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
                expect(data.paypalData).to.be.a(FinApiResTfulServices.PaypalTransactionData);
                      expect(data.paypalData.invoiceNumber).to.be.a('string');
                  expect(data.paypalData.invoiceNumber).to.be("INV2-KXVU-7Z64-DT6W-MG2X");
                  expect(data.paypalData.fee).to.be.a('number');
                  expect(data.paypalData.fee).to.be(-0.99);
                  expect(data.paypalData.net).to.be.a('number');
                  expect(data.paypalData.net).to.be(9.99);
                  expect(data.paypalData.auctionSite).to.be.a('string');
                  expect(data.paypalData.auctionSite).to.be("eBay");
                expect(data.endToEndReference).to.be.a('string');
                expect(data.endToEndReference).to.be("001100550526");
                expect(data.compensationAmount).to.be.a('number');
                expect(data.compensationAmount).to.be(-1.11);
                expect(data.originalAmount).to.be.a('number');
                expect(data.originalAmount).to.be(-9.99);
                expect(data.differentDebitor).to.be.a('string');
                expect(data.differentDebitor).to.be("DIFD70204");
                expect(data.differentCreditor).to.be.a('string');
                expect(data.differentCreditor).to.be("DIFC98450");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTransaction', function() {
        it('should call getTransaction successfully', function(done) {
          // TODO: uncomment, update parameter values for getTransaction call and complete the assertions
          /*
          var id = 789;

          instance.getTransaction(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Transaction);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.parentId).to.be.a('number');
            expect(data.parentId).to.be(2);
            expect(data.accountId).to.be.a('number');
            expect(data.accountId).to.be(1);
            expect(data.valueDate).to.be.a('string');
            expect(data.valueDate).to.be("2018-01-01 00:00:00.000");
            expect(data.bankBookingDate).to.be.a('string');
            expect(data.bankBookingDate).to.be("2018-01-01 00.00.00.000");
            expect(data.finapiBookingDate).to.be.a('string');
            expect(data.finapiBookingDate).to.be("2018-01-01 00:00:00.000");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(-99.99);
            expect(data.purpose).to.be.a('string');
            expect(data.purpose).to.be("Restaurantbesuch");
            expect(data.counterpartName).to.be.a('string');
            expect(data.counterpartName).to.be("Bar Centrale");
            expect(data.counterpartAccountNumber).to.be.a('string');
            expect(data.counterpartAccountNumber).to.be("0061110500");
            expect(data.counterpartIban).to.be.a('string');
            expect(data.counterpartIban).to.be("DE13700800000061110500");
            expect(data.counterpartBlz).to.be.a('string');
            expect(data.counterpartBlz).to.be("70080000");
            expect(data.counterpartBic).to.be.a('string');
            expect(data.counterpartBic).to.be("DRESDEFF700");
            expect(data.counterpartBankName).to.be.a('string');
            expect(data.counterpartBankName).to.be("Commerzbank vormals Dresdner Bank");
            expect(data.counterpartMandateReference).to.be.a('string');
            expect(data.counterpartMandateReference).to.be("MR123");
            expect(data.counterpartCustomerReference).to.be.a('string');
            expect(data.counterpartCustomerReference).to.be("CUR123");
            expect(data.counterpartCreditorId).to.be.a('string');
            expect(data.counterpartCreditorId).to.be("CRI123");
            expect(data.counterpartDebitorId).to.be.a('string');
            expect(data.counterpartDebitorId).to.be("CRI098");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("Ãœberweisungsauftrag");
            expect(data.typeCodeZka).to.be.a('string');
            expect(data.typeCodeZka).to.be("999");
            expect(data.typeCodeSwift).to.be.a('string');
            expect(data.typeCodeSwift).to.be("RAPRDE51");
            expect(data.sepaPurposeCode).to.be.a('string');
            expect(data.sepaPurposeCode).to.be("OTHR");
            expect(data.primanota).to.be.a('string');
            expect(data.primanota).to.be("Primanota");
            expect(data.category).to.be.a(FinApiResTfulServices.Category);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be(378);
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("Sport & Fitness");
              expect(data.category.parentId).to.be.a('number');
              expect(data.category.parentId).to.be(373);
              expect(data.category.parentName).to.be.a('string');
              expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
              expect(data.category.isCustom).to.be.a('boolean');
              expect(data.category.isCustom).to.be(false);
              {
                let dataCtr = data.category.children;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
            {
              let dataCtr = data.labels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Label);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("test");
              }
            }
            expect(data.isPotentialDuplicate).to.be.a('boolean');
            expect(data.isPotentialDuplicate).to.be(false);
            expect(data.isAdjustingEntry).to.be.a('boolean');
            expect(data.isAdjustingEntry).to.be(false);
            expect(data.isNew).to.be.a('boolean');
            expect(data.isNew).to.be(true);
            expect(data.importDate).to.be.a('string');
            expect(data.importDate).to.be("2018-01-01 00:00:00.000");
            {
              let dataCtr = data.children;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.paypalData).to.be.a(FinApiResTfulServices.PaypalTransactionData);
                  expect(data.paypalData.invoiceNumber).to.be.a('string');
              expect(data.paypalData.invoiceNumber).to.be("INV2-KXVU-7Z64-DT6W-MG2X");
              expect(data.paypalData.fee).to.be.a('number');
              expect(data.paypalData.fee).to.be(-0.99);
              expect(data.paypalData.net).to.be.a('number');
              expect(data.paypalData.net).to.be(9.99);
              expect(data.paypalData.auctionSite).to.be.a('string');
              expect(data.paypalData.auctionSite).to.be("eBay");
            expect(data.endToEndReference).to.be.a('string');
            expect(data.endToEndReference).to.be("001100550526");
            expect(data.compensationAmount).to.be.a('number');
            expect(data.compensationAmount).to.be(-1.11);
            expect(data.originalAmount).to.be.a('number');
            expect(data.originalAmount).to.be(-9.99);
            expect(data.differentDebitor).to.be.a('string');
            expect(data.differentDebitor).to.be("DIFD70204");
            expect(data.differentCreditor).to.be.a('string');
            expect(data.differentCreditor).to.be("DIFC98450");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('restoreTransaction', function() {
        it('should call restoreTransaction successfully', function(done) {
          // TODO: uncomment, update parameter values for restoreTransaction call and complete the assertions
          /*
          var id = 789;

          instance.restoreTransaction(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Transaction);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.parentId).to.be.a('number');
            expect(data.parentId).to.be(2);
            expect(data.accountId).to.be.a('number');
            expect(data.accountId).to.be(1);
            expect(data.valueDate).to.be.a('string');
            expect(data.valueDate).to.be("2018-01-01 00:00:00.000");
            expect(data.bankBookingDate).to.be.a('string');
            expect(data.bankBookingDate).to.be("2018-01-01 00.00.00.000");
            expect(data.finapiBookingDate).to.be.a('string');
            expect(data.finapiBookingDate).to.be("2018-01-01 00:00:00.000");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(-99.99);
            expect(data.purpose).to.be.a('string');
            expect(data.purpose).to.be("Restaurantbesuch");
            expect(data.counterpartName).to.be.a('string');
            expect(data.counterpartName).to.be("Bar Centrale");
            expect(data.counterpartAccountNumber).to.be.a('string');
            expect(data.counterpartAccountNumber).to.be("0061110500");
            expect(data.counterpartIban).to.be.a('string');
            expect(data.counterpartIban).to.be("DE13700800000061110500");
            expect(data.counterpartBlz).to.be.a('string');
            expect(data.counterpartBlz).to.be("70080000");
            expect(data.counterpartBic).to.be.a('string');
            expect(data.counterpartBic).to.be("DRESDEFF700");
            expect(data.counterpartBankName).to.be.a('string');
            expect(data.counterpartBankName).to.be("Commerzbank vormals Dresdner Bank");
            expect(data.counterpartMandateReference).to.be.a('string');
            expect(data.counterpartMandateReference).to.be("MR123");
            expect(data.counterpartCustomerReference).to.be.a('string');
            expect(data.counterpartCustomerReference).to.be("CUR123");
            expect(data.counterpartCreditorId).to.be.a('string');
            expect(data.counterpartCreditorId).to.be("CRI123");
            expect(data.counterpartDebitorId).to.be.a('string');
            expect(data.counterpartDebitorId).to.be("CRI098");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("Ãœberweisungsauftrag");
            expect(data.typeCodeZka).to.be.a('string');
            expect(data.typeCodeZka).to.be("999");
            expect(data.typeCodeSwift).to.be.a('string');
            expect(data.typeCodeSwift).to.be("RAPRDE51");
            expect(data.sepaPurposeCode).to.be.a('string');
            expect(data.sepaPurposeCode).to.be("OTHR");
            expect(data.primanota).to.be.a('string');
            expect(data.primanota).to.be("Primanota");
            expect(data.category).to.be.a(FinApiResTfulServices.Category);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be(378);
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("Sport & Fitness");
              expect(data.category.parentId).to.be.a('number');
              expect(data.category.parentId).to.be(373);
              expect(data.category.parentName).to.be.a('string');
              expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
              expect(data.category.isCustom).to.be.a('boolean');
              expect(data.category.isCustom).to.be(false);
              {
                let dataCtr = data.category.children;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
            {
              let dataCtr = data.labels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Label);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("test");
              }
            }
            expect(data.isPotentialDuplicate).to.be.a('boolean');
            expect(data.isPotentialDuplicate).to.be(false);
            expect(data.isAdjustingEntry).to.be.a('boolean');
            expect(data.isAdjustingEntry).to.be(false);
            expect(data.isNew).to.be.a('boolean');
            expect(data.isNew).to.be(true);
            expect(data.importDate).to.be.a('string');
            expect(data.importDate).to.be("2018-01-01 00:00:00.000");
            {
              let dataCtr = data.children;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.paypalData).to.be.a(FinApiResTfulServices.PaypalTransactionData);
                  expect(data.paypalData.invoiceNumber).to.be.a('string');
              expect(data.paypalData.invoiceNumber).to.be("INV2-KXVU-7Z64-DT6W-MG2X");
              expect(data.paypalData.fee).to.be.a('number');
              expect(data.paypalData.fee).to.be(-0.99);
              expect(data.paypalData.net).to.be.a('number');
              expect(data.paypalData.net).to.be(9.99);
              expect(data.paypalData.auctionSite).to.be.a('string');
              expect(data.paypalData.auctionSite).to.be("eBay");
            expect(data.endToEndReference).to.be.a('string');
            expect(data.endToEndReference).to.be("001100550526");
            expect(data.compensationAmount).to.be.a('number');
            expect(data.compensationAmount).to.be(-1.11);
            expect(data.originalAmount).to.be.a('number');
            expect(data.originalAmount).to.be(-9.99);
            expect(data.differentDebitor).to.be.a('string');
            expect(data.differentDebitor).to.be("DIFD70204");
            expect(data.differentCreditor).to.be.a('string');
            expect(data.differentCreditor).to.be("DIFC98450");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('splitTransaction', function() {
        it('should call splitTransaction successfully', function(done) {
          // TODO: uncomment, update parameter values for splitTransaction call and complete the assertions
          /*
          var id = 789;
          var body = new FinApiResTfulServices.SplitTransactionsParams();
          body.subTransactions = [new FinApiResTfulServices.SubTransactionParams()];
          body.subTransactions[0].amount = -99.99;
          body.subTransactions[0].categoryId = 378;
          body.subTransactions[0].purpose = "Restaurantbesuch";
          body.subTransactions[0].counterpart = "TueV Bayern";
          body.subTransactions[0].counterpartAccountNumber = "61110500";
          body.subTransactions[0].counterpartIban = "DE13700800000061110500";
          body.subTransactions[0].counterpartBic = "DRESDEFF700";
          body.subTransactions[0].counterpartBlz = "70080000";
          body.subTransactions[0].labelIds = [1,2,3];

          instance.splitTransaction(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Transaction);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.parentId).to.be.a('number');
            expect(data.parentId).to.be(2);
            expect(data.accountId).to.be.a('number');
            expect(data.accountId).to.be(1);
            expect(data.valueDate).to.be.a('string');
            expect(data.valueDate).to.be("2018-01-01 00:00:00.000");
            expect(data.bankBookingDate).to.be.a('string');
            expect(data.bankBookingDate).to.be("2018-01-01 00.00.00.000");
            expect(data.finapiBookingDate).to.be.a('string');
            expect(data.finapiBookingDate).to.be("2018-01-01 00:00:00.000");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(-99.99);
            expect(data.purpose).to.be.a('string');
            expect(data.purpose).to.be("Restaurantbesuch");
            expect(data.counterpartName).to.be.a('string');
            expect(data.counterpartName).to.be("Bar Centrale");
            expect(data.counterpartAccountNumber).to.be.a('string');
            expect(data.counterpartAccountNumber).to.be("0061110500");
            expect(data.counterpartIban).to.be.a('string');
            expect(data.counterpartIban).to.be("DE13700800000061110500");
            expect(data.counterpartBlz).to.be.a('string');
            expect(data.counterpartBlz).to.be("70080000");
            expect(data.counterpartBic).to.be.a('string');
            expect(data.counterpartBic).to.be("DRESDEFF700");
            expect(data.counterpartBankName).to.be.a('string');
            expect(data.counterpartBankName).to.be("Commerzbank vormals Dresdner Bank");
            expect(data.counterpartMandateReference).to.be.a('string');
            expect(data.counterpartMandateReference).to.be("MR123");
            expect(data.counterpartCustomerReference).to.be.a('string');
            expect(data.counterpartCustomerReference).to.be("CUR123");
            expect(data.counterpartCreditorId).to.be.a('string');
            expect(data.counterpartCreditorId).to.be("CRI123");
            expect(data.counterpartDebitorId).to.be.a('string');
            expect(data.counterpartDebitorId).to.be("CRI098");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("Ãœberweisungsauftrag");
            expect(data.typeCodeZka).to.be.a('string');
            expect(data.typeCodeZka).to.be("999");
            expect(data.typeCodeSwift).to.be.a('string');
            expect(data.typeCodeSwift).to.be("RAPRDE51");
            expect(data.sepaPurposeCode).to.be.a('string');
            expect(data.sepaPurposeCode).to.be("OTHR");
            expect(data.primanota).to.be.a('string');
            expect(data.primanota).to.be("Primanota");
            expect(data.category).to.be.a(FinApiResTfulServices.Category);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be(378);
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("Sport & Fitness");
              expect(data.category.parentId).to.be.a('number');
              expect(data.category.parentId).to.be(373);
              expect(data.category.parentName).to.be.a('string');
              expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
              expect(data.category.isCustom).to.be.a('boolean');
              expect(data.category.isCustom).to.be(false);
              {
                let dataCtr = data.category.children;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
            {
              let dataCtr = data.labels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Label);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("test");
              }
            }
            expect(data.isPotentialDuplicate).to.be.a('boolean');
            expect(data.isPotentialDuplicate).to.be(false);
            expect(data.isAdjustingEntry).to.be.a('boolean');
            expect(data.isAdjustingEntry).to.be(false);
            expect(data.isNew).to.be.a('boolean');
            expect(data.isNew).to.be(true);
            expect(data.importDate).to.be.a('string');
            expect(data.importDate).to.be("2018-01-01 00:00:00.000");
            {
              let dataCtr = data.children;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.paypalData).to.be.a(FinApiResTfulServices.PaypalTransactionData);
                  expect(data.paypalData.invoiceNumber).to.be.a('string');
              expect(data.paypalData.invoiceNumber).to.be("INV2-KXVU-7Z64-DT6W-MG2X");
              expect(data.paypalData.fee).to.be.a('number');
              expect(data.paypalData.fee).to.be(-0.99);
              expect(data.paypalData.net).to.be.a('number');
              expect(data.paypalData.net).to.be(9.99);
              expect(data.paypalData.auctionSite).to.be.a('string');
              expect(data.paypalData.auctionSite).to.be("eBay");
            expect(data.endToEndReference).to.be.a('string');
            expect(data.endToEndReference).to.be("001100550526");
            expect(data.compensationAmount).to.be.a('number');
            expect(data.compensationAmount).to.be(-1.11);
            expect(data.originalAmount).to.be.a('number');
            expect(data.originalAmount).to.be(-9.99);
            expect(data.differentDebitor).to.be.a('string');
            expect(data.differentDebitor).to.be("DIFD70204");
            expect(data.differentCreditor).to.be.a('string');
            expect(data.differentCreditor).to.be("DIFC98450");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('triggerCategorization', function() {
        it('should call triggerCategorization successfully', function(done) {
          // TODO: uncomment, update parameter values for triggerCategorization call
          /*
          var body = new FinApiResTfulServices.TriggerCategorizationParams();
          body.bankConnectionIds = [1,2,3];

          instance.triggerCategorization(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
