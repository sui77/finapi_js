/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.MocksAndTestsApi();
  });

  describe('(package)', function() {
    describe('MocksAndTestsApi', function() {
      describe('checkCategorization', function() {
        it('should call checkCategorization successfully', function(done) {
          // TODO: uncomment, update parameter values for checkCategorization call and complete the assertions
          /*
          var body = new FinApiResTfulServices.CheckCategorizationData();
          body.transactionData = [new FinApiResTfulServices.CheckCategorizationTransactionData()];
          body.transactionData[0].transactionId = "transaction";
          body.transactionData[0].accountTypeId = 1;
          body.transactionData[0].amount = -99.99;
          body.transactionData[0].purpose = "Restaurantbesuch";
          body.transactionData[0].counterpart = "Bar Centrale";
          body.transactionData[0].counterpartIban = "DE13700800000061110500";
          body.transactionData[0].counterpartAccountNumber = "61110500";
          body.transactionData[0].counterpartBlz = "70080000";
          body.transactionData[0].counterpartBic = "DRESDEFF700";
          body.transactionData[0].mcCode = "5542";
          body.transactionData[0].typeCodeZka = "999";

          instance.checkCategorization(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.CategorizationCheckResults);
            {
              let dataCtr = data.categorizationCheckResult;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.CategorizationCheckResult);
                expect(data.transactionId).to.be.a('string');
                expect(data.transactionId).to.be("transaction");
                expect(data.category).to.be.a(FinApiResTfulServices.Category);
                      expect(data.category.id).to.be.a('number');
                  expect(data.category.id).to.be(378);
                  expect(data.category.name).to.be.a('string');
                  expect(data.category.name).to.be("Sport & Fitness");
                  expect(data.category.parentId).to.be.a('number');
                  expect(data.category.parentId).to.be(373);
                  expect(data.category.parentName).to.be.a('string');
                  expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
                  expect(data.category.isCustom).to.be.a('boolean');
                  expect(data.category.isCustom).to.be(false);
                  {
                    let dataCtr = data.category.children;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be("0");
                    }
                  }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mockBatchUpdate', function() {
        it('should call mockBatchUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for mockBatchUpdate call
          /*
          var body = new FinApiResTfulServices.MockBatchUpdateParams();
          body.mockBankConnectionUpdates = [new FinApiResTfulServices.MockBankConnectionUpdate()];
          body.mockBankConnectionUpdates[0].bankConnectionId = 1;
          body.mockBankConnectionUpdates[0]._interface = "XS2A";
          body.mockBankConnectionUpdates[0].simulateBankLoginError = false;
          body.mockBankConnectionUpdates[0].mockAccountsData = [new FinApiResTfulServices.MockAccountData()];
          body.mockBankConnectionUpdates[0].mockAccountsData[0].accountId = 1;
          body.mockBankConnectionUpdates[0].mockAccountsData[0].accountBalance = 99.99;
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions = [new FinApiResTfulServices.NewTransaction()];
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].amount = -99.99;
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].purpose = "Restaurantbesuch";
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].counterpart = "Bar Centrale";
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].counterpartIban = "DE13700800000061110500";
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].counterpartBlz = "70080000";
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].counterpartBic = "DRESDEFF700";
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].counterpartAccountNumber = "61110500";
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].bookingDate = "2018-01-01";
          body.mockBankConnectionUpdates[0].mockAccountsData[0].newTransactions[0].valueDate = "2018-01-01";
          body.triggerNotifications = true;

          instance.mockBatchUpdate(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
