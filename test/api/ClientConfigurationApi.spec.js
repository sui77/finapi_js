/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.ClientConfigurationApi();
  });

  describe('(package)', function() {
    describe('ClientConfigurationApi', function() {
      describe('editClientConfiguration', function() {
        it('should call editClientConfiguration successfully', function(done) {
          // TODO: uncomment, update parameter values for editClientConfiguration call and complete the assertions
          /*
          var opts = {};
          opts.body = new FinApiResTfulServices.ClientConfigurationParams();
          opts.body.userNotificationCallbackUrl = "https://bank.server.com/notification";
          opts.body.userSynchronizationCallbackUrl = "https://bank.server.com/synchronization";
          opts.body.refreshTokensValidityPeriod = 3600;
          opts.body.userAccessTokensValidityPeriod = 3600;
          opts.body.clientAccessTokensValidityPeriod = 3600;
          opts.body.isPinStorageAvailableInWebForm = true;
          opts.body.storeSecretsAvailableInWebForm = true;
          opts.body.applicationName = "My App";
          opts.body.finTSProductRegistrationNumber = "ABCDEF1234567890ABCDEF123";

          instance.editClientConfiguration(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.ClientConfiguration);
            expect(data.isAutomaticBatchUpdateEnabled).to.be.a('boolean');
            expect(data.isAutomaticBatchUpdateEnabled).to.be(true);
            expect(data.userNotificationCallbackUrl).to.be.a('string');
            expect(data.userNotificationCallbackUrl).to.be("https://bank.server.com/notification");
            expect(data.userSynchronizationCallbackUrl).to.be.a('string');
            expect(data.userSynchronizationCallbackUrl).to.be("https://bank.server.com/synchronization");
            expect(data.refreshTokensValidityPeriod).to.be.a('number');
            expect(data.refreshTokensValidityPeriod).to.be(3600);
            expect(data.userAccessTokensValidityPeriod).to.be.a('number');
            expect(data.userAccessTokensValidityPeriod).to.be(3600);
            expect(data.clientAccessTokensValidityPeriod).to.be.a('number');
            expect(data.clientAccessTokensValidityPeriod).to.be(3600);
            expect(data.maxUserLoginAttempts).to.be.a('number');
            expect(data.maxUserLoginAttempts).to.be(3);
            expect(data.isUserAutoVerificationEnabled).to.be.a('boolean');
            expect(data.isUserAutoVerificationEnabled).to.be(true);
            expect(data.isMandatorAdmin).to.be.a('boolean');
            expect(data.isMandatorAdmin).to.be(false);
            expect(data.isWebScrapingEnabled).to.be.a('boolean');
            expect(data.isWebScrapingEnabled).to.be(true);
            expect(data.isXs2aEnabled).to.be.a('boolean');
            expect(data.isXs2aEnabled).to.be(true);
            {
              let dataCtr = data.availableBankGroups;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.applicationName).to.be.a('string');
            expect(data.applicationName).to.be("My App");
            expect(data.finTSProductRegistrationNumber).to.be.a('string');
            expect(data.finTSProductRegistrationNumber).to.be("XXXXX");
            expect(data.storeSecretsAvailableInWebForm).to.be.a('boolean');
            expect(data.storeSecretsAvailableInWebForm).to.be(true);
            expect(data.paymentsEnabled).to.be.a('boolean');
            expect(data.paymentsEnabled).to.be(true);
            expect(data.pinStorageAvailableInWebForm).to.be.a('boolean');
            expect(data.pinStorageAvailableInWebForm).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getClientConfiguration', function() {
        it('should call getClientConfiguration successfully', function(done) {
          // TODO: uncomment getClientConfiguration call and complete the assertions
          /*

          instance.getClientConfiguration(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.ClientConfiguration);
            expect(data.isAutomaticBatchUpdateEnabled).to.be.a('boolean');
            expect(data.isAutomaticBatchUpdateEnabled).to.be(true);
            expect(data.userNotificationCallbackUrl).to.be.a('string');
            expect(data.userNotificationCallbackUrl).to.be("https://bank.server.com/notification");
            expect(data.userSynchronizationCallbackUrl).to.be.a('string');
            expect(data.userSynchronizationCallbackUrl).to.be("https://bank.server.com/synchronization");
            expect(data.refreshTokensValidityPeriod).to.be.a('number');
            expect(data.refreshTokensValidityPeriod).to.be(3600);
            expect(data.userAccessTokensValidityPeriod).to.be.a('number');
            expect(data.userAccessTokensValidityPeriod).to.be(3600);
            expect(data.clientAccessTokensValidityPeriod).to.be.a('number');
            expect(data.clientAccessTokensValidityPeriod).to.be(3600);
            expect(data.maxUserLoginAttempts).to.be.a('number');
            expect(data.maxUserLoginAttempts).to.be(3);
            expect(data.isUserAutoVerificationEnabled).to.be.a('boolean');
            expect(data.isUserAutoVerificationEnabled).to.be(true);
            expect(data.isMandatorAdmin).to.be.a('boolean');
            expect(data.isMandatorAdmin).to.be(false);
            expect(data.isWebScrapingEnabled).to.be.a('boolean');
            expect(data.isWebScrapingEnabled).to.be(true);
            expect(data.isXs2aEnabled).to.be.a('boolean');
            expect(data.isXs2aEnabled).to.be(true);
            {
              let dataCtr = data.availableBankGroups;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.applicationName).to.be.a('string');
            expect(data.applicationName).to.be("My App");
            expect(data.finTSProductRegistrationNumber).to.be.a('string');
            expect(data.finTSProductRegistrationNumber).to.be("XXXXX");
            expect(data.storeSecretsAvailableInWebForm).to.be.a('boolean');
            expect(data.storeSecretsAvailableInWebForm).to.be(true);
            expect(data.paymentsEnabled).to.be.a('boolean');
            expect(data.paymentsEnabled).to.be(true);
            expect(data.pinStorageAvailableInWebForm).to.be.a('boolean');
            expect(data.pinStorageAvailableInWebForm).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
