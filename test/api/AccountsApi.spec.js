/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.AccountsApi();
  });

  describe('(package)', function() {
    describe('AccountsApi', function() {
      describe('deleteAccount', function() {
        it('should call deleteAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAccount call
          /*
          var id = 789;

          instance.deleteAccount(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAllAccounts', function() {
        it('should call deleteAllAccounts successfully', function(done) {
          // TODO: uncomment deleteAllAccounts call and complete the assertions
          /*

          instance.deleteAllAccounts(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editAccount', function() {
        it('should call editAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for editAccount call and complete the assertions
          /*
          var id = 789;
          var opts = {};
          opts.body = new FinApiResTfulServices.AccountParams();
          opts.body.accountName = "Testaccount";
          opts.body.accountTypeId = 1;
          opts.body.accountType = "Checking";
          opts.body.isNew = true;

          instance.editAccount(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Account);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.bankConnectionId).to.be.a('number');
            expect(data.bankConnectionId).to.be(1);
            expect(data.accountName).to.be.a('string');
            expect(data.accountName).to.be("Testaccount");
            expect(data.iban).to.be.a('string');
            expect(data.iban).to.be("DE89370400440532013000");
            expect(data.accountNumber).to.be.a('string');
            expect(data.accountNumber).to.be("12345678");
            expect(data.subAccountNumber).to.be.a('string');
            expect(data.subAccountNumber).to.be("1234");
            expect(data.accountHolderName).to.be.a('string');
            expect(data.accountHolderName).to.be("Herr Max Mustermann");
            expect(data.accountHolderId).to.be.a('string');
            expect(data.accountHolderId).to.be("XXXXX");
            expect(data.accountCurrency).to.be.a('string');
            expect(data.accountCurrency).to.be("EUR");
            expect(data.accountTypeId).to.be.a('number');
            expect(data.accountTypeId).to.be(1);
            expect(data.accountTypeName).to.be.a('string');
            expect(data.accountTypeName).to.be("Checking");
            expect(data.accountType).to.be.a('string');
            expect(data.accountType).to.be("Checking");
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(99.99);
            expect(data.overdraft).to.be.a('number');
            expect(data.overdraft).to.be(99.99);
            expect(data.overdraftLimit).to.be.a('number');
            expect(data.overdraftLimit).to.be(99.99);
            expect(data.availableFunds).to.be.a('number');
            expect(data.availableFunds).to.be(99.99);
            expect(data.lastSuccessfulUpdate).to.be.a('string');
            expect(data.lastSuccessfulUpdate).to.be("2018-01-01 00:00:00.000");
            expect(data.lastUpdateAttempt).to.be.a('string');
            expect(data.lastUpdateAttempt).to.be("2018-01-01 00:00:00.000");
            expect(data.isNew).to.be.a('boolean');
            expect(data.isNew).to.be(true);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("UPDATED");
            {
              let dataCtr = data.supportedOrders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("SEPA_MONEY_TRANSFER");
              }
            }
            {
              let dataCtr = data.interfaces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.AccountInterface);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("FINTS_SERVER");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("UPDATED");
                {
                  let dataCtr = data.capabilities;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("DATA_DOWNLOAD");
                  }
                }
                expect(data.lastSuccessfulUpdate).to.be.a('string');
                expect(data.lastSuccessfulUpdate).to.be("2018-01-01 00:00:00.000");
                expect(data.lastUpdateAttempt).to.be.a('string');
                expect(data.lastUpdateAttempt).to.be("2018-01-01 00:00:00.000");
              }
            }
            {
              let dataCtr = data.clearingAccounts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.ClearingAccountData);
                expect(data.clearingAccountId).to.be.a('string');
                expect(data.clearingAccountId).to.be("BA-TUYEF7D24CGK6");
                expect(data.clearingAccountName).to.be.a('string');
                expect(data.clearingAccountName).to.be("BA-TUYEF7D24CGK6");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executeSepaDirectDebit', function() {
        it('should call executeSepaDirectDebit successfully', function(done) {
          // TODO: uncomment, update parameter values for executeSepaDirectDebit call and complete the assertions
          /*
          var body = new FinApiResTfulServices.ExecuteSepaDirectDebitParams();
          body.accountId = 1;
          body.bankingTan = "0123";

          instance.executeSepaDirectDebit(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PaymentExecutionResponse);
            expect(data.successMessage).to.be.a('string');
            expect(data.successMessage).to.be("Auftrag ausgef√ºhrt.");
            expect(data.warnMessage).to.be.a('string');
            expect(data.warnMessage).to.be("Es liegen Warnungen vor.");
            expect(data.paymentId).to.be.a('number');
            expect(data.paymentId).to.be(1);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executeSepaMoneyTransfer', function() {
        it('should call executeSepaMoneyTransfer successfully', function(done) {
          // TODO: uncomment, update parameter values for executeSepaMoneyTransfer call and complete the assertions
          /*
          var body = new FinApiResTfulServices.ExecuteSepaMoneyTransferParams();
          body.accountId = 1;
          body.bankingTan = "098765";

          instance.executeSepaMoneyTransfer(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PaymentExecutionResponse);
            expect(data.successMessage).to.be.a('string');
            expect(data.successMessage).to.be("Auftrag ausgef√ºhrt.");
            expect(data.warnMessage).to.be.a('string');
            expect(data.warnMessage).to.be("Es liegen Warnungen vor.");
            expect(data.paymentId).to.be.a('number');
            expect(data.paymentId).to.be(1);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAccount', function() {
        it('should call getAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for getAccount call and complete the assertions
          /*
          var id = 789;

          instance.getAccount(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Account);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.bankConnectionId).to.be.a('number');
            expect(data.bankConnectionId).to.be(1);
            expect(data.accountName).to.be.a('string');
            expect(data.accountName).to.be("Testaccount");
            expect(data.iban).to.be.a('string');
            expect(data.iban).to.be("DE89370400440532013000");
            expect(data.accountNumber).to.be.a('string');
            expect(data.accountNumber).to.be("12345678");
            expect(data.subAccountNumber).to.be.a('string');
            expect(data.subAccountNumber).to.be("1234");
            expect(data.accountHolderName).to.be.a('string');
            expect(data.accountHolderName).to.be("Herr Max Mustermann");
            expect(data.accountHolderId).to.be.a('string');
            expect(data.accountHolderId).to.be("XXXXX");
            expect(data.accountCurrency).to.be.a('string');
            expect(data.accountCurrency).to.be("EUR");
            expect(data.accountTypeId).to.be.a('number');
            expect(data.accountTypeId).to.be(1);
            expect(data.accountTypeName).to.be.a('string');
            expect(data.accountTypeName).to.be("Checking");
            expect(data.accountType).to.be.a('string');
            expect(data.accountType).to.be("Checking");
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(99.99);
            expect(data.overdraft).to.be.a('number');
            expect(data.overdraft).to.be(99.99);
            expect(data.overdraftLimit).to.be.a('number');
            expect(data.overdraftLimit).to.be(99.99);
            expect(data.availableFunds).to.be.a('number');
            expect(data.availableFunds).to.be(99.99);
            expect(data.lastSuccessfulUpdate).to.be.a('string');
            expect(data.lastSuccessfulUpdate).to.be("2018-01-01 00:00:00.000");
            expect(data.lastUpdateAttempt).to.be.a('string');
            expect(data.lastUpdateAttempt).to.be("2018-01-01 00:00:00.000");
            expect(data.isNew).to.be.a('boolean');
            expect(data.isNew).to.be(true);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("UPDATED");
            {
              let dataCtr = data.supportedOrders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("SEPA_MONEY_TRANSFER");
              }
            }
            {
              let dataCtr = data.interfaces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.AccountInterface);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("FINTS_SERVER");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("UPDATED");
                {
                  let dataCtr = data.capabilities;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("DATA_DOWNLOAD");
                  }
                }
                expect(data.lastSuccessfulUpdate).to.be.a('string');
                expect(data.lastSuccessfulUpdate).to.be("2018-01-01 00:00:00.000");
                expect(data.lastUpdateAttempt).to.be.a('string');
                expect(data.lastUpdateAttempt).to.be("2018-01-01 00:00:00.000");
              }
            }
            {
              let dataCtr = data.clearingAccounts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.ClearingAccountData);
                expect(data.clearingAccountId).to.be.a('string');
                expect(data.clearingAccountId).to.be("BA-TUYEF7D24CGK6");
                expect(data.clearingAccountName).to.be.a('string');
                expect(data.clearingAccountName).to.be("BA-TUYEF7D24CGK6");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAndSearchAllAccounts', function() {
        it('should call getAndSearchAllAccounts successfully', function(done) {
          // TODO: uncomment, update parameter values for getAndSearchAllAccounts call and complete the assertions
          /*
          var opts = {};
          opts.ids = [3.4];
          opts.search = "search_example";
          opts.accountTypeIds = [3.4];
          opts.accountTypes = ["accountTypes_example"];
          opts.bankConnectionIds = [3.4];
          opts.minLastSuccessfulUpdate = "minLastSuccessfulUpdate_example";
          opts.maxLastSuccessfulUpdate = "maxLastSuccessfulUpdate_example";
          opts.minBalance = 8.14;
          opts.maxBalance = 8.14;

          instance.getAndSearchAllAccounts(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.AccountList);
            {
              let dataCtr = data.accounts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Account);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.bankConnectionId).to.be.a('number');
                expect(data.bankConnectionId).to.be(1);
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("Testaccount");
                expect(data.iban).to.be.a('string');
                expect(data.iban).to.be("DE89370400440532013000");
                expect(data.accountNumber).to.be.a('string');
                expect(data.accountNumber).to.be("12345678");
                expect(data.subAccountNumber).to.be.a('string');
                expect(data.subAccountNumber).to.be("1234");
                expect(data.accountHolderName).to.be.a('string');
                expect(data.accountHolderName).to.be("Herr Max Mustermann");
                expect(data.accountHolderId).to.be.a('string');
                expect(data.accountHolderId).to.be("XXXXX");
                expect(data.accountCurrency).to.be.a('string');
                expect(data.accountCurrency).to.be("EUR");
                expect(data.accountTypeId).to.be.a('number');
                expect(data.accountTypeId).to.be(1);
                expect(data.accountTypeName).to.be.a('string');
                expect(data.accountTypeName).to.be("Checking");
                expect(data.accountType).to.be.a('string');
                expect(data.accountType).to.be("Checking");
                expect(data.balance).to.be.a('number');
                expect(data.balance).to.be(99.99);
                expect(data.overdraft).to.be.a('number');
                expect(data.overdraft).to.be(99.99);
                expect(data.overdraftLimit).to.be.a('number');
                expect(data.overdraftLimit).to.be(99.99);
                expect(data.availableFunds).to.be.a('number');
                expect(data.availableFunds).to.be(99.99);
                expect(data.lastSuccessfulUpdate).to.be.a('string');
                expect(data.lastSuccessfulUpdate).to.be("2018-01-01 00:00:00.000");
                expect(data.lastUpdateAttempt).to.be.a('string');
                expect(data.lastUpdateAttempt).to.be("2018-01-01 00:00:00.000");
                expect(data.isNew).to.be.a('boolean');
                expect(data.isNew).to.be(true);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("UPDATED");
                {
                  let dataCtr = data.supportedOrders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("SEPA_MONEY_TRANSFER");
                  }
                }
                {
                  let dataCtr = data.interfaces;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.AccountInterface);
                    expect(data._interface).to.be.a('string');
                    expect(data._interface).to.be("FINTS_SERVER");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("UPDATED");
                    {
                      let dataCtr = data.capabilities;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("DATA_DOWNLOAD");
                      }
                    }
                    expect(data.lastSuccessfulUpdate).to.be.a('string');
                    expect(data.lastSuccessfulUpdate).to.be("2018-01-01 00:00:00.000");
                    expect(data.lastUpdateAttempt).to.be.a('string');
                    expect(data.lastUpdateAttempt).to.be("2018-01-01 00:00:00.000");
                  }
                }
                {
                  let dataCtr = data.clearingAccounts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.ClearingAccountData);
                    expect(data.clearingAccountId).to.be.a('string');
                    expect(data.clearingAccountId).to.be("BA-TUYEF7D24CGK6");
                    expect(data.clearingAccountName).to.be.a('string');
                    expect(data.clearingAccountName).to.be("BA-TUYEF7D24CGK6");
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDailyBalances', function() {
        it('should call getDailyBalances successfully', function(done) {
          // TODO: uncomment, update parameter values for getDailyBalances call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = [3.4];
          opts.startDate = "startDate_example";
          opts.endDate = "endDate_example";
          opts.withProjection = true;
          opts.page = 1;
          opts.perPage = 20;
          opts.order = ["order_example"];

          instance.getDailyBalances(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.DailyBalanceList);
            expect(data.latestCommonBalanceTimestamp).to.be.a('string');
            expect(data.latestCommonBalanceTimestamp).to.be("2018-01-01 00:00:00.000");
            {
              let dataCtr = data.dailyBalances;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.DailyBalance);
                expect(data._date).to.be.a('string');
                expect(data._date).to.be("2018-01-01 00:00:00.000");
                expect(data.balance).to.be.a('number');
                expect(data.balance).to.be(999.0);
                expect(data.income).to.be.a('number');
                expect(data.income).to.be(99.99);
                expect(data.spending).to.be.a('number');
                expect(data.spending).to.be(-99.99);
                {
                  let dataCtr = data.transactions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMultipleAccounts', function() {
        it('should call getMultipleAccounts successfully', function(done) {
          // TODO: uncomment, update parameter values for getMultipleAccounts call and complete the assertions
          /*
          var ids = [3.4];

          instance.getMultipleAccounts(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.AccountList);
            {
              let dataCtr = data.accounts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Account);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.bankConnectionId).to.be.a('number');
                expect(data.bankConnectionId).to.be(1);
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("Testaccount");
                expect(data.iban).to.be.a('string');
                expect(data.iban).to.be("DE89370400440532013000");
                expect(data.accountNumber).to.be.a('string');
                expect(data.accountNumber).to.be("12345678");
                expect(data.subAccountNumber).to.be.a('string');
                expect(data.subAccountNumber).to.be("1234");
                expect(data.accountHolderName).to.be.a('string');
                expect(data.accountHolderName).to.be("Herr Max Mustermann");
                expect(data.accountHolderId).to.be.a('string');
                expect(data.accountHolderId).to.be("XXXXX");
                expect(data.accountCurrency).to.be.a('string');
                expect(data.accountCurrency).to.be("EUR");
                expect(data.accountTypeId).to.be.a('number');
                expect(data.accountTypeId).to.be(1);
                expect(data.accountTypeName).to.be.a('string');
                expect(data.accountTypeName).to.be("Checking");
                expect(data.accountType).to.be.a('string');
                expect(data.accountType).to.be("Checking");
                expect(data.balance).to.be.a('number');
                expect(data.balance).to.be(99.99);
                expect(data.overdraft).to.be.a('number');
                expect(data.overdraft).to.be(99.99);
                expect(data.overdraftLimit).to.be.a('number');
                expect(data.overdraftLimit).to.be(99.99);
                expect(data.availableFunds).to.be.a('number');
                expect(data.availableFunds).to.be(99.99);
                expect(data.lastSuccessfulUpdate).to.be.a('string');
                expect(data.lastSuccessfulUpdate).to.be("2018-01-01 00:00:00.000");
                expect(data.lastUpdateAttempt).to.be.a('string');
                expect(data.lastUpdateAttempt).to.be("2018-01-01 00:00:00.000");
                expect(data.isNew).to.be.a('boolean');
                expect(data.isNew).to.be(true);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("UPDATED");
                {
                  let dataCtr = data.supportedOrders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("SEPA_MONEY_TRANSFER");
                  }
                }
                {
                  let dataCtr = data.interfaces;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.AccountInterface);
                    expect(data._interface).to.be.a('string');
                    expect(data._interface).to.be("FINTS_SERVER");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("UPDATED");
                    {
                      let dataCtr = data.capabilities;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("DATA_DOWNLOAD");
                      }
                    }
                    expect(data.lastSuccessfulUpdate).to.be.a('string');
                    expect(data.lastSuccessfulUpdate).to.be("2018-01-01 00:00:00.000");
                    expect(data.lastUpdateAttempt).to.be.a('string');
                    expect(data.lastUpdateAttempt).to.be("2018-01-01 00:00:00.000");
                  }
                }
                {
                  let dataCtr = data.clearingAccounts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.ClearingAccountData);
                    expect(data.clearingAccountId).to.be.a('string');
                    expect(data.clearingAccountId).to.be("BA-TUYEF7D24CGK6");
                    expect(data.clearingAccountName).to.be.a('string');
                    expect(data.clearingAccountName).to.be("BA-TUYEF7D24CGK6");
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('requestSepaDirectDebit', function() {
        it('should call requestSepaDirectDebit successfully', function(done) {
          // TODO: uncomment, update parameter values for requestSepaDirectDebit call and complete the assertions
          /*
          var body = new FinApiResTfulServices.RequestSepaDirectDebitParams();
          body.accountId = 1;
          body.bankingPin = "123456";
          body.storeSecrets = true;
          body.twoStepProcedureId = "955";
          body.directDebitType = "B2B";
          body.sequenceType = "OOFF";
          body.executionDate = "2018-01-01";
          body.singleBooking = false;
          body.directDebits = [new FinApiResTfulServices.SingleDirectDebitData()];
          body.directDebits[0].debitorName = "Debitor";
          body.directDebits[0].debitorIban = "DE13700800000061110500";
          body.directDebits[0].debitorBic = "DRESDEFF700";
          body.directDebits[0].amount = 99.99;
          body.directDebits[0].purpose = "Test Payment";
          body.directDebits[0].sepaPurposeCode = "OTHR";
          body.directDebits[0].mandateId = "1";
          body.directDebits[0].mandateDate = "2018-01-01";
          body.directDebits[0].creditorId = "Creditor";
          body.directDebits[0].endToEndId = "001100550526";
          body.hideTransactionDetailsInWebForm = false;
          body.multiStepAuthentication = new FinApiResTfulServices.MultiStepAuthenticationCallback();
          body.multiStepAuthentication.hash = "c7af602c031117458affd825305fb56d";
          body.multiStepAuthentication.challengeResponse = "0123";
          body.multiStepAuthentication.twoStepProcedureId = "955";
          body.multiStepAuthentication.redirectCallback = "bankParam1=X&bankParam2=Y";
          body.multiStepAuthentication.decoupledCallback = true;
          body.storePin = true;

          instance.requestSepaDirectDebit(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.DirectDebitOrderingResponse);
            expect(data.successMessage).to.be.a('string');
            expect(data.successMessage).to.be("Auftrag ausgef√ºhrt.");
            expect(data.warnMessage).to.be.a('string');
            expect(data.warnMessage).to.be("Es liegen Warnungen vor.");
            expect(data.paymentId).to.be.a('number');
            expect(data.paymentId).to.be(1);
            expect(data.challengeMessage).to.be.a('string');
            expect(data.challengeMessage).to.be("Bitte geben Sie die TAN ein, die Sie per SMS erhalten.");
            expect(data.answerFieldLabel).to.be.a('string');
            expect(data.answerFieldLabel).to.be("TAN-Nummer");
            expect(data.tanListNumber).to.be.a('string');
            expect(data.tanListNumber).to.be("001");
            expect(data.opticalData).to.be.a('string');
            expect(data.opticalData).to.be("11048813833205002812775114302C30315D");
            expect(data.photoTanMimeType).to.be.a('string');
            expect(data.photoTanMimeType).to.be("image/svg+xml");
            expect(data.photoTanData).to.be.a('string');
            expect(data.photoTanData).to.be("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IURPQ1RZUEUgc3ZnIFBVQkxJQyAiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQiPgo8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDIxMi43NTUgMjEyLjc1NSIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMjEyLjc1NSAyMTIuNzU1IiB3aWR0aD0iMTZweCIgaGVpZ2h0PSIxNnB4Ij4KICA8Zz4KICAgIDxwYXRoIGQ9Ik0xMDYuMzc3LDBDNDcuNzIxLDAsMCw0Ny43MjEsMCwxMDYuMzc3czQ3LjcyMSwxMDYuMzc3LDEwNi4zNzcsMTA2LjM3N3MxMDYuMzc3LTQ3LjcyMSwxMDYuMzc3LTEwNi4zNzcgICBTMTY1LjAzNCwwLDEwNi4zNzcsMHogTTEwNi4zNzcsMTk4Ljc1NUM1NS40NCwxOTguNzU1LDE0LDE1Ny4zMTQsMTQsMTA2LjM3N1M1NS40NCwxNCwxMDYuMzc3LDE0czkyLjM3Nyw0MS40NCw5Mi4zNzcsOTIuMzc3ICAgUzE1Ny4zMTQsMTk4Ljc1NSwxMDYuMzc3LDE5OC43NTV6IiBmaWxsPSIjMDAwMDAwIi8+CiAgICA8cGF0aCBkPSJtMTEzLjM3NywxMDAuMDk2di0zOS43NDRjMy45NjEsMS40NzEgNy40MTcsNC4xNyA5LjgyLDcuODIgMi4xMjcsMy4yMjkgNi40NjgsNC4xMjMgOS42OTYsMS45OTcgMy4yMjktMi4xMjYgNC4xMjMtNi40NjcgMS45OTYtOS42OTYtNS4wMjktNy42MzYtMTIuNzc4LTEyLjgyLTIxLjUxMi0xNC42NDd2LTExLjEyYzAtMy44NjYtMy4xMzQtNy03LTdzLTcsMy4xMzQtNyw3djExLjA5OWMtMTUuNDkzLDMuMjMtMjcuMTY4LDE2Ljk4OS0yNy4xNjgsMzMuNDI2IDAsMTYuNDM3IDExLjY3NiwzMC4xOTggMjcuMTY4LDMzLjQyOHYzOS43NDRjLTMuOTYxLTEuNDcxLTcuNDE3LTQuMTctOS44Mi03LjgyLTIuMTI3LTMuMjI5LTYuNDY4LTQuMTI0LTkuNjk2LTEuOTk3LTMuMjI5LDIuMTI2LTQuMTIzLDYuNDY3LTEuOTk2LDkuNjk2IDUuMDI5LDcuNjM2IDEyLjc3OCwxMi44MiAyMS41MTIsMTQuNjQ3djExLjExOWMwLDMuODY2IDMuMTM0LDcgNyw3czctMy4xMzQgNy03di0xMS4wOThjMTUuNDkzLTMuMjMgMjcuMTY4LTE2Ljk4OSAyNy4xNjgtMzMuNDI2LTIuODQyMTdlLTE0LTE2LjQzNy0xMS42NzUtMzAuMTk4LTI3LjE2OC0zMy40Mjh6bS0yNy4xNjgtMjAuODY1YzAtOC42NTMgNS40OTQtMTYuMDI3IDEzLjE2OC0xOC44NzR2MzcuNzQ4Yy03LjY3NC0yLjg0Ny0xMy4xNjgtMTAuMjIxLTEzLjE2OC0xOC44NzR6bTI3LjE2OCw3My4xNjZ2LTM3Ljc0OGM3LjY3NCwyLjg0NyAxMy4xNjgsMTAuMjIxIDEzLjE2OCwxOC44NzRzLTUuNDkzLDE2LjAyNy0xMy4xNjgsMTguODc0eiIgZmlsbD0iIzAwMDAwMCIvPgogIDwvZz4KPC9zdmc+Cg==");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('requestSepaMoneyTransfer', function() {
        it('should call requestSepaMoneyTransfer successfully', function(done) {
          // TODO: uncomment, update parameter values for requestSepaMoneyTransfer call and complete the assertions
          /*
          var body = new FinApiResTfulServices.RequestSepaMoneyTransferParams();
          body.recipientName = "Max Mustermann";
          body.recipientIban = "DE13700800000061110500";
          body.recipientBic = "DRESDEFF700";
          body.clearingAccountId = "BA-TUYEF7D24CGK6";
          body.endToEndId = "001100550526";
          body.amount = 99.99;
          body.purpose = "Test Payment";
          body.sepaPurposeCode = "OTHR";
          body.accountId = 1;
          body.bankingPin = "123456";
          body.storeSecrets = true;
          body.twoStepProcedureId = "955";
          body.executionDate = "2018-01-01";
          body.singleBooking = false;
          body.additionalMoneyTransfers = [new FinApiResTfulServices.SingleMoneyTransferRecipientData()];
          body.additionalMoneyTransfers[0].recipientName = "Max Mustermann";
          body.additionalMoneyTransfers[0].recipientIban = "DE13700800000061110500";
          body.additionalMoneyTransfers[0].recipientBic = "DRESDEFF700";
          body.additionalMoneyTransfers[0].clearingAccountId = "BA-TUYEF7D24CGK6";
          body.additionalMoneyTransfers[0].endToEndId = "001100550526";
          body.additionalMoneyTransfers[0].amount = 99.99;
          body.additionalMoneyTransfers[0].purpose = "Test Payment";
          body.additionalMoneyTransfers[0].sepaPurposeCode = "OTHR";
          body.challengeResponse = "0123";
          body.multiStepAuthentication = new FinApiResTfulServices.MultiStepAuthenticationCallback();
          body.multiStepAuthentication.hash = "c7af602c031117458affd825305fb56d";
          body.multiStepAuthentication.challengeResponse = "0123";
          body.multiStepAuthentication.twoStepProcedureId = "955";
          body.multiStepAuthentication.redirectCallback = "bankParam1=X&bankParam2=Y";
          body.multiStepAuthentication.decoupledCallback = true;
          body.hideTransactionDetailsInWebForm = false;
          body.storePin = true;

          instance.requestSepaMoneyTransfer(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.MoneyTransferOrderingResponse);
            expect(data.successMessage).to.be.a('string');
            expect(data.successMessage).to.be("Auftrag ausgef√ºhrt.");
            expect(data.warnMessage).to.be.a('string');
            expect(data.warnMessage).to.be("Es liegen Warnungen vor.");
            expect(data.paymentId).to.be.a('number');
            expect(data.paymentId).to.be(1);
            expect(data.challengeMessage).to.be.a('string');
            expect(data.challengeMessage).to.be("Bitte geben Sie die TAN ein, die Sie per SMS erhalten.");
            expect(data.answerFieldLabel).to.be.a('string');
            expect(data.answerFieldLabel).to.be("TAN-Nummer");
            expect(data.tanListNumber).to.be.a('string');
            expect(data.tanListNumber).to.be("001");
            expect(data.opticalData).to.be.a('string');
            expect(data.opticalData).to.be("11048813833205002812775114302C30315D");
            expect(data.photoTanMimeType).to.be.a('string');
            expect(data.photoTanMimeType).to.be("image/svg+xml");
            expect(data.photoTanData).to.be.a('string');
            expect(data.photoTanData).to.be("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IURPQ1RZUEUgc3ZnIFBVQkxJQyAiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQiPgo8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDIxMi43NTUgMjEyLjc1NSIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMjEyLjc1NSAyMTIuNzU1IiB3aWR0aD0iMTZweCIgaGVpZ2h0PSIxNnB4Ij4KICA8Zz4KICAgIDxwYXRoIGQ9Ik0xMDYuMzc3LDBDNDcuNzIxLDAsMCw0Ny43MjEsMCwxMDYuMzc3czQ3LjcyMSwxMDYuMzc3LDEwNi4zNzcsMTA2LjM3N3MxMDYuMzc3LTQ3LjcyMSwxMDYuMzc3LTEwNi4zNzcgICBTMTY1LjAzNCwwLDEwNi4zNzcsMHogTTEwNi4zNzcsMTk4Ljc1NUM1NS40NCwxOTguNzU1LDE0LDE1Ny4zMTQsMTQsMTA2LjM3N1M1NS40NCwxNCwxMDYuMzc3LDE0czkyLjM3Nyw0MS40NCw5Mi4zNzcsOTIuMzc3ICAgUzE1Ny4zMTQsMTk4Ljc1NSwxMDYuMzc3LDE5OC43NTV6IiBmaWxsPSIjMDAwMDAwIi8+CiAgICA8cGF0aCBkPSJtMTEzLjM3NywxMDAuMDk2di0zOS43NDRjMy45NjEsMS40NzEgNy40MTcsNC4xNyA5LjgyLDcuODIgMi4xMjcsMy4yMjkgNi40NjgsNC4xMjMgOS42OTYsMS45OTcgMy4yMjktMi4xMjYgNC4xMjMtNi40NjcgMS45OTYtOS42OTYtNS4wMjktNy42MzYtMTIuNzc4LTEyLjgyLTIxLjUxMi0xNC42NDd2LTExLjEyYzAtMy44NjYtMy4xMzQtNy03LTdzLTcsMy4xMzQtNyw3djExLjA5OWMtMTUuNDkzLDMuMjMtMjcuMTY4LDE2Ljk4OS0yNy4xNjgsMzMuNDI2IDAsMTYuNDM3IDExLjY3NiwzMC4xOTggMjcuMTY4LDMzLjQyOHYzOS43NDRjLTMuOTYxLTEuNDcxLTcuNDE3LTQuMTctOS44Mi03LjgyLTIuMTI3LTMuMjI5LTYuNDY4LTQuMTI0LTkuNjk2LTEuOTk3LTMuMjI5LDIuMTI2LTQuMTIzLDYuNDY3LTEuOTk2LDkuNjk2IDUuMDI5LDcuNjM2IDEyLjc3OCwxMi44MiAyMS41MTIsMTQuNjQ3djExLjExOWMwLDMuODY2IDMuMTM0LDcgNyw3czctMy4xMzQgNy03di0xMS4wOThjMTUuNDkzLTMuMjMgMjcuMTY4LTE2Ljk4OSAyNy4xNjgtMzMuNDI2LTIuODQyMTdlLTE0LTE2LjQzNy0xMS42NzUtMzAuMTk4LTI3LjE2OC0zMy40Mjh6bS0yNy4xNjgtMjAuODY1YzAtOC42NTMgNS40OTQtMTYuMDI3IDEzLjE2OC0xOC44NzR2MzcuNzQ4Yy03LjY3NC0yLjg0Ny0xMy4xNjgtMTAuMjIxLTEzLjE2OC0xOC44NzR6bTI3LjE2OCw3My4xNjZ2LTM3Ljc0OGM3LjY3NCwyLjg0NyAxMy4xNjgsMTAuMjIxIDEzLjE2OCwxOC44NzRzLTUuNDkzLDE2LjAyNy0xMy4xNjgsMTguODc0eiIgZmlsbD0iIzAwMDAwMCIvPgogIDwvZz4KPC9zdmc+Cg==");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
