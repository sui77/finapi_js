/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.SecuritiesApi();
  });

  describe('(package)', function() {
    describe('SecuritiesApi', function() {
      describe('getAndSearchAllSecurities', function() {
        it('should call getAndSearchAllSecurities successfully', function(done) {
          // TODO: uncomment, update parameter values for getAndSearchAllSecurities call and complete the assertions
          /*
          var opts = {};
          opts.ids = [3.4];
          opts.search = "search_example";
          opts.accountIds = [3.4];
          opts.page = 1;
          opts.perPage = 20;
          opts.order = ["order_example"];

          instance.getAndSearchAllSecurities(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableSecurityList);
            {
              let dataCtr = data.securities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Security);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.accountId).to.be.a('number');
                expect(data.accountId).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Wertapapierbezeichnung");
                expect(data.isin).to.be.a('string');
                expect(data.isin).to.be("DE0008404005");
                expect(data.wkn).to.be.a('string');
                expect(data.wkn).to.be("840400");
                expect(data.quote).to.be.a('number');
                expect(data.quote).to.be(99.999999);
                expect(data.quoteCurrency).to.be.a('string');
                expect(data.quoteCurrency).to.be("EUR");
                expect(data.quoteType).to.be.a('string');
                expect(data.quoteType).to.be("ACTU");
                expect(data.quoteDate).to.be.a('string');
                expect(data.quoteDate).to.be("2018-01-01 00:00:00.000");
                expect(data.quantityNominal).to.be.a('number');
                expect(data.quantityNominal).to.be(99.999999);
                expect(data.quantityNominalType).to.be.a('string');
                expect(data.quantityNominalType).to.be("UNIT");
                expect(data.marketValue).to.be.a('number');
                expect(data.marketValue).to.be(99.999999);
                expect(data.marketValueCurrency).to.be.a('string');
                expect(data.marketValueCurrency).to.be("EUR");
                expect(data.entryQuote).to.be.a('number');
                expect(data.entryQuote).to.be(99.999999);
                expect(data.entryQuoteCurrency).to.be.a('string');
                expect(data.entryQuoteCurrency).to.be("EUR");
                expect(data.profitOrLoss).to.be.a('number');
                expect(data.profitOrLoss).to.be(99.999999);
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMultipleSecurities', function() {
        it('should call getMultipleSecurities successfully', function(done) {
          // TODO: uncomment, update parameter values for getMultipleSecurities call and complete the assertions
          /*
          var ids = [3.4];

          instance.getMultipleSecurities(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.SecurityList);
            {
              let dataCtr = data.securities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Security);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.accountId).to.be.a('number');
                expect(data.accountId).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Wertapapierbezeichnung");
                expect(data.isin).to.be.a('string');
                expect(data.isin).to.be("DE0008404005");
                expect(data.wkn).to.be.a('string');
                expect(data.wkn).to.be("840400");
                expect(data.quote).to.be.a('number');
                expect(data.quote).to.be(99.999999);
                expect(data.quoteCurrency).to.be.a('string');
                expect(data.quoteCurrency).to.be("EUR");
                expect(data.quoteType).to.be.a('string');
                expect(data.quoteType).to.be("ACTU");
                expect(data.quoteDate).to.be.a('string');
                expect(data.quoteDate).to.be("2018-01-01 00:00:00.000");
                expect(data.quantityNominal).to.be.a('number');
                expect(data.quantityNominal).to.be(99.999999);
                expect(data.quantityNominalType).to.be.a('string');
                expect(data.quantityNominalType).to.be("UNIT");
                expect(data.marketValue).to.be.a('number');
                expect(data.marketValue).to.be(99.999999);
                expect(data.marketValueCurrency).to.be.a('string');
                expect(data.marketValueCurrency).to.be("EUR");
                expect(data.entryQuote).to.be.a('number');
                expect(data.entryQuote).to.be(99.999999);
                expect(data.entryQuoteCurrency).to.be.a('string');
                expect(data.entryQuoteCurrency).to.be("EUR");
                expect(data.profitOrLoss).to.be.a('number');
                expect(data.profitOrLoss).to.be(99.999999);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSecurity', function() {
        it('should call getSecurity successfully', function(done) {
          // TODO: uncomment, update parameter values for getSecurity call and complete the assertions
          /*
          var id = 789;

          instance.getSecurity(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Security);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.accountId).to.be.a('number');
            expect(data.accountId).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Wertapapierbezeichnung");
            expect(data.isin).to.be.a('string');
            expect(data.isin).to.be("DE0008404005");
            expect(data.wkn).to.be.a('string');
            expect(data.wkn).to.be("840400");
            expect(data.quote).to.be.a('number');
            expect(data.quote).to.be(99.999999);
            expect(data.quoteCurrency).to.be.a('string');
            expect(data.quoteCurrency).to.be("EUR");
            expect(data.quoteType).to.be.a('string');
            expect(data.quoteType).to.be("ACTU");
            expect(data.quoteDate).to.be.a('string');
            expect(data.quoteDate).to.be("2018-01-01 00:00:00.000");
            expect(data.quantityNominal).to.be.a('number');
            expect(data.quantityNominal).to.be(99.999999);
            expect(data.quantityNominalType).to.be.a('string');
            expect(data.quantityNominalType).to.be("UNIT");
            expect(data.marketValue).to.be.a('number');
            expect(data.marketValue).to.be(99.999999);
            expect(data.marketValueCurrency).to.be.a('string');
            expect(data.marketValueCurrency).to.be("EUR");
            expect(data.entryQuote).to.be.a('number');
            expect(data.entryQuote).to.be(99.999999);
            expect(data.entryQuoteCurrency).to.be.a('string');
            expect(data.entryQuoteCurrency).to.be("EUR");
            expect(data.profitOrLoss).to.be.a('number');
            expect(data.profitOrLoss).to.be(99.999999);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
