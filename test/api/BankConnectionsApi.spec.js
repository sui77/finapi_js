/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.BankConnectionsApi();
  });

  describe('(package)', function() {
    describe('BankConnectionsApi', function() {
      describe('connectInterface', function() {
        it('should call connectInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for connectInterface call and complete the assertions
          /*
          var body = new FinApiResTfulServices.ConnectInterfaceParams();
          body.bankConnectionId = 1;
          body._interface = "XS2A";
          body.loginCredentials = [new FinApiResTfulServices.LoginCredential()];
          body.loginCredentials[0].label = "Onlinebanking-ID";
          body.loginCredentials[0].value = "max.mustermann";
          body.storeSecrets = true;
          body.skipPositionsDownload = false;
          body.loadOwnerData = false;
          body.accountReferences = [new FinApiResTfulServices.AccountReference()];
          body.accountReferences[0].iban = "DE89370400440532013000";
          body.multiStepAuthentication = new FinApiResTfulServices.MultiStepAuthenticationCallback();
          body.multiStepAuthentication.hash = "c7af602c031117458affd825305fb56d";
          body.multiStepAuthentication.challengeResponse = "0123";
          body.multiStepAuthentication.twoStepProcedureId = "955";
          body.multiStepAuthentication.redirectCallback = "bankParam1=X&bankParam2=Y";
          body.multiStepAuthentication.decoupledCallback = true;
          body.redirectUrl = "https://myapp.com";

          instance.connectInterface(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.BankConnection);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.bankId).to.be.a('number');
            expect(data.bankId).to.be(277672);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Bank Connection");
            expect(data.bankingUserId).to.be.a('string');
            expect(data.bankingUserId).to.be("XXXXX");
            expect(data.bankingCustomerId).to.be.a('string');
            expect(data.bankingCustomerId).to.be("XXXXX");
            expect(data.bankingPin).to.be.a('string');
            expect(data.bankingPin).to.be("XXXXX");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("DEMO");
            expect(data.updateStatus).to.be.a('string');
            expect(data.updateStatus).to.be("READY");
            expect(data.categorizationStatus).to.be.a('string');
            expect(data.categorizationStatus).to.be("READY");
            expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastManualUpdate.result).to.be.a('string');
              expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastManualUpdate.errorMessage).to.be.a('string');
              expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastManualUpdate.errorType).to.be.a('string');
              expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastManualUpdate.timestamp).to.be.a('string');
              expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastAutoUpdate.result).to.be.a('string');
              expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
              expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastAutoUpdate.errorType).to.be.a('string');
              expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastAutoUpdate.timestamp).to.be.a('string');
              expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.ibanOnlyMoneyTransferSupported).to.be.a('boolean');
            expect(data.ibanOnlyMoneyTransferSupported).to.be(true);
            expect(data.ibanOnlyDirectDebitSupported).to.be.a('boolean');
            expect(data.ibanOnlyDirectDebitSupported).to.be(true);
            expect(data.collectiveMoneyTransferSupported).to.be.a('boolean');
            expect(data.collectiveMoneyTransferSupported).to.be(false);
            expect(data.defaultTwoStepProcedureId).to.be.a('string');
            expect(data.defaultTwoStepProcedureId).to.be("955");
            {
              let dataCtr = data.twoStepProcedures;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                expect(data.procedureId).to.be.a('string');
                expect(data.procedureId).to.be("955");
                expect(data.procedureName).to.be.a('string');
                expect(data.procedureName).to.be("mobileTAN");
                expect(data.procedureChallengeType).to.be.a('string');
                expect(data.procedureChallengeType).to.be("TEXT");
                expect(data.implicitExecute).to.be.a('boolean');
                expect(data.implicitExecute).to.be(false);
              }
            }
            {
              let dataCtr = data.interfaces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionInterface);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("FINTS_SERVER");
                {
                  let dataCtr = data.loginCredentials;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.LoginCredentialResource);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("Customer ID");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
                expect(data.defaultTwoStepProcedureId).to.be.a('string');
                expect(data.defaultTwoStepProcedureId).to.be("955");
                {
                  let dataCtr = data.twoStepProcedures;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                    expect(data.procedureId).to.be.a('string');
                    expect(data.procedureId).to.be("955");
                    expect(data.procedureName).to.be.a('string');
                    expect(data.procedureName).to.be("mobileTAN");
                    expect(data.procedureChallengeType).to.be.a('string');
                    expect(data.procedureChallengeType).to.be("TEXT");
                    expect(data.implicitExecute).to.be.a('boolean');
                    expect(data.implicitExecute).to.be(false);
                  }
                }
                expect(data.aisConsent).to.be.a(FinApiResTfulServices.BankConsent);
                      expect(data.aisConsent.status).to.be.a('string');
                  expect(data.aisConsent.status).to.be("PRESENT");
                  expect(data.aisConsent.expiresAt).to.be.a('string');
                  expect(data.aisConsent.expiresAt).to.be("2019-07-20 09:05:10.546");
                expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastManualUpdate.result).to.be.a('string');
                  expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                  expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastManualUpdate.errorType).to.be.a('string');
                  expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastManualUpdate.timestamp).to.be.a('string');
                  expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastAutoUpdate.result).to.be.a('string');
                  expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                  expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastAutoUpdate.errorType).to.be.a('string');
                  expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                  expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
              }
            }
            {
              let dataCtr = data.accountIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            {
              let dataCtr = data.owners;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionOwner);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Max");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Mustermann");
                expect(data.salutation).to.be.a('string');
                expect(data.salutation).to.be("Herr");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Dr.");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("email@localhost.de");
                expect(data.dateOfBirth).to.be.a('string');
                expect(data.dateOfBirth).to.be("1980-01-01");
                expect(data.postCode).to.be.a('string');
                expect(data.postCode).to.be("80000");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("Deutschland");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("München");
                expect(data.street).to.be.a('string');
                expect(data.street).to.be("Musterstraße");
                expect(data.houseNumber).to.be.a('string');
                expect(data.houseNumber).to.be("99");
              }
            }
            expect(data.bank).to.be.a(FinApiResTfulServices.Bank);
                  expect(data.bank.id).to.be.a('number');
              expect(data.bank.id).to.be(277672);
              expect(data.bank.name).to.be.a('string');
              expect(data.bank.name).to.be("FinAPI Test Bank");
              expect(data.bank.loginHint).to.be.a('string');
              expect(data.bank.loginHint).to.be("Bitte geben Sie Ihre Online-Identifikation und Ihre PIN ein.");
              expect(data.bank.bic).to.be.a('string');
              expect(data.bank.bic).to.be("TESTBANKING");
              {
                let dataCtr = data.bank.blzs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.bank.blz).to.be.a('string');
              expect(data.bank.blz).to.be("00000000");
              expect(data.bank.location).to.be.a('string');
              expect(data.bank.location).to.be("DE");
              expect(data.bank.city).to.be.a('string');
              expect(data.bank.city).to.be("München");
              expect(data.bank.isSupported).to.be.a('boolean');
              expect(data.bank.isSupported).to.be(true);
              expect(data.bank.isTestBank).to.be.a('boolean');
              expect(data.bank.isTestBank).to.be(true);
              expect(data.bank.popularity).to.be.a('number');
              expect(data.bank.popularity).to.be(95);
              expect(data.bank.health).to.be.a('number');
              expect(data.bank.health).to.be(100);
              expect(data.bank.loginFieldUserId).to.be.a('string');
              expect(data.bank.loginFieldUserId).to.be("Onlinebanking-ID");
              expect(data.bank.loginFieldCustomerId).to.be.a('string');
              expect(data.bank.loginFieldCustomerId).to.be("Kunden-ID");
              expect(data.bank.loginFieldPin).to.be.a('string');
              expect(data.bank.loginFieldPin).to.be("PIN");
              expect(data.bank.pinsAreVolatile).to.be.a('boolean');
              expect(data.bank.pinsAreVolatile).to.be(true);
              expect(data.bank.isCustomerIdPassword).to.be.a('boolean');
              expect(data.bank.isCustomerIdPassword).to.be(false);
              {
                let dataCtr = data.bank.supportedDataSources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("WEB_SCRAPER");
                }
              }
              {
                let dataCtr = data.bank.interfaces;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(FinApiResTfulServices.BankInterface);
                  expect(data._interface).to.be.a('string');
                  expect(data._interface).to.be("FINTS_SERVER");
                  expect(data.tppAuthenticationGroup).to.be.a(FinApiResTfulServices.TppAuthenticationGroup);
                        expect(data.tppAuthenticationGroup.id).to.be.a('number');
                    expect(data.tppAuthenticationGroup.id).to.be(1);
                    expect(data.tppAuthenticationGroup.name).to.be.a('string');
                    expect(data.tppAuthenticationGroup.name).to.be("AirBank XS2A CZ");
                  {
                    let dataCtr = data.loginCredentials;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(FinApiResTfulServices.BankInterfaceLoginField);
                      expect(data.label).to.be.a('string');
                      expect(data.label).to.be("Nutzerkennung");
                      expect(data.isSecret).to.be.a('boolean');
                      expect(data.isSecret).to.be(false);
                      expect(data.isVolatile).to.be.a('boolean');
                      expect(data.isVolatile).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.properties;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("REDIRECT_APPROACH");
                    }
                  }
                  expect(data.loginHint).to.be.a('string');
                  expect(data.loginHint).to.be("Bitte geben Sie nur die ersten fünf Stellen Ihrer PIN ein.");
                  expect(data.health).to.be.a('number');
                  expect(data.health).to.be(100);
                  expect(data.lastCommunicationAttempt).to.be.a('string');
                  expect(data.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                  expect(data.lastSuccessfulCommunication).to.be.a('string');
                  expect(data.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                }
              }
              expect(data.bank.lastCommunicationAttempt).to.be.a('string');
              expect(data.bank.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
              expect(data.bank.lastSuccessfulCommunication).to.be.a('string');
              expect(data.bank.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
            expect(data.furtherLoginNotRecommended).to.be.a('boolean');
            expect(data.furtherLoginNotRecommended).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAllBankConnections', function() {
        it('should call deleteAllBankConnections successfully', function(done) {
          // TODO: uncomment deleteAllBankConnections call and complete the assertions
          /*

          instance.deleteAllBankConnections(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBankConnection', function() {
        it('should call deleteBankConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBankConnection call
          /*
          var id = 789;

          instance.deleteBankConnection(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editBankConnection', function() {
        it('should call editBankConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for editBankConnection call and complete the assertions
          /*
          var id = 789;
          var body = new FinApiResTfulServices.EditBankConnectionParams();
          body.name = "Bank Connection";
          body.bankingUserId = "123456";
          body.bankingCustomerId = "123456";
          body.bankingPin = "123456";
          body._interface = "FINTS_SERVER";
          body.loginCredentials = [new FinApiResTfulServices.LoginCredential()];
          body.loginCredentials[0].label = "Onlinebanking-ID";
          body.loginCredentials[0].value = "max.mustermann";
          body.defaultTwoStepProcedureId = "955";

          instance.editBankConnection(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.BankConnection);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.bankId).to.be.a('number');
            expect(data.bankId).to.be(277672);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Bank Connection");
            expect(data.bankingUserId).to.be.a('string');
            expect(data.bankingUserId).to.be("XXXXX");
            expect(data.bankingCustomerId).to.be.a('string');
            expect(data.bankingCustomerId).to.be("XXXXX");
            expect(data.bankingPin).to.be.a('string');
            expect(data.bankingPin).to.be("XXXXX");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("DEMO");
            expect(data.updateStatus).to.be.a('string');
            expect(data.updateStatus).to.be("READY");
            expect(data.categorizationStatus).to.be.a('string');
            expect(data.categorizationStatus).to.be("READY");
            expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastManualUpdate.result).to.be.a('string');
              expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastManualUpdate.errorMessage).to.be.a('string');
              expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastManualUpdate.errorType).to.be.a('string');
              expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastManualUpdate.timestamp).to.be.a('string');
              expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastAutoUpdate.result).to.be.a('string');
              expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
              expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastAutoUpdate.errorType).to.be.a('string');
              expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastAutoUpdate.timestamp).to.be.a('string');
              expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.ibanOnlyMoneyTransferSupported).to.be.a('boolean');
            expect(data.ibanOnlyMoneyTransferSupported).to.be(true);
            expect(data.ibanOnlyDirectDebitSupported).to.be.a('boolean');
            expect(data.ibanOnlyDirectDebitSupported).to.be(true);
            expect(data.collectiveMoneyTransferSupported).to.be.a('boolean');
            expect(data.collectiveMoneyTransferSupported).to.be(false);
            expect(data.defaultTwoStepProcedureId).to.be.a('string');
            expect(data.defaultTwoStepProcedureId).to.be("955");
            {
              let dataCtr = data.twoStepProcedures;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                expect(data.procedureId).to.be.a('string');
                expect(data.procedureId).to.be("955");
                expect(data.procedureName).to.be.a('string');
                expect(data.procedureName).to.be("mobileTAN");
                expect(data.procedureChallengeType).to.be.a('string');
                expect(data.procedureChallengeType).to.be("TEXT");
                expect(data.implicitExecute).to.be.a('boolean');
                expect(data.implicitExecute).to.be(false);
              }
            }
            {
              let dataCtr = data.interfaces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionInterface);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("FINTS_SERVER");
                {
                  let dataCtr = data.loginCredentials;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.LoginCredentialResource);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("Customer ID");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
                expect(data.defaultTwoStepProcedureId).to.be.a('string');
                expect(data.defaultTwoStepProcedureId).to.be("955");
                {
                  let dataCtr = data.twoStepProcedures;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                    expect(data.procedureId).to.be.a('string');
                    expect(data.procedureId).to.be("955");
                    expect(data.procedureName).to.be.a('string');
                    expect(data.procedureName).to.be("mobileTAN");
                    expect(data.procedureChallengeType).to.be.a('string');
                    expect(data.procedureChallengeType).to.be("TEXT");
                    expect(data.implicitExecute).to.be.a('boolean');
                    expect(data.implicitExecute).to.be(false);
                  }
                }
                expect(data.aisConsent).to.be.a(FinApiResTfulServices.BankConsent);
                      expect(data.aisConsent.status).to.be.a('string');
                  expect(data.aisConsent.status).to.be("PRESENT");
                  expect(data.aisConsent.expiresAt).to.be.a('string');
                  expect(data.aisConsent.expiresAt).to.be("2019-07-20 09:05:10.546");
                expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastManualUpdate.result).to.be.a('string');
                  expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                  expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastManualUpdate.errorType).to.be.a('string');
                  expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastManualUpdate.timestamp).to.be.a('string');
                  expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastAutoUpdate.result).to.be.a('string');
                  expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                  expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastAutoUpdate.errorType).to.be.a('string');
                  expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                  expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
              }
            }
            {
              let dataCtr = data.accountIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            {
              let dataCtr = data.owners;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionOwner);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Max");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Mustermann");
                expect(data.salutation).to.be.a('string');
                expect(data.salutation).to.be("Herr");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Dr.");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("email@localhost.de");
                expect(data.dateOfBirth).to.be.a('string');
                expect(data.dateOfBirth).to.be("1980-01-01");
                expect(data.postCode).to.be.a('string');
                expect(data.postCode).to.be("80000");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("Deutschland");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("München");
                expect(data.street).to.be.a('string');
                expect(data.street).to.be("Musterstraße");
                expect(data.houseNumber).to.be.a('string');
                expect(data.houseNumber).to.be("99");
              }
            }
            expect(data.bank).to.be.a(FinApiResTfulServices.Bank);
                  expect(data.bank.id).to.be.a('number');
              expect(data.bank.id).to.be(277672);
              expect(data.bank.name).to.be.a('string');
              expect(data.bank.name).to.be("FinAPI Test Bank");
              expect(data.bank.loginHint).to.be.a('string');
              expect(data.bank.loginHint).to.be("Bitte geben Sie Ihre Online-Identifikation und Ihre PIN ein.");
              expect(data.bank.bic).to.be.a('string');
              expect(data.bank.bic).to.be("TESTBANKING");
              {
                let dataCtr = data.bank.blzs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.bank.blz).to.be.a('string');
              expect(data.bank.blz).to.be("00000000");
              expect(data.bank.location).to.be.a('string');
              expect(data.bank.location).to.be("DE");
              expect(data.bank.city).to.be.a('string');
              expect(data.bank.city).to.be("München");
              expect(data.bank.isSupported).to.be.a('boolean');
              expect(data.bank.isSupported).to.be(true);
              expect(data.bank.isTestBank).to.be.a('boolean');
              expect(data.bank.isTestBank).to.be(true);
              expect(data.bank.popularity).to.be.a('number');
              expect(data.bank.popularity).to.be(95);
              expect(data.bank.health).to.be.a('number');
              expect(data.bank.health).to.be(100);
              expect(data.bank.loginFieldUserId).to.be.a('string');
              expect(data.bank.loginFieldUserId).to.be("Onlinebanking-ID");
              expect(data.bank.loginFieldCustomerId).to.be.a('string');
              expect(data.bank.loginFieldCustomerId).to.be("Kunden-ID");
              expect(data.bank.loginFieldPin).to.be.a('string');
              expect(data.bank.loginFieldPin).to.be("PIN");
              expect(data.bank.pinsAreVolatile).to.be.a('boolean');
              expect(data.bank.pinsAreVolatile).to.be(true);
              expect(data.bank.isCustomerIdPassword).to.be.a('boolean');
              expect(data.bank.isCustomerIdPassword).to.be(false);
              {
                let dataCtr = data.bank.supportedDataSources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("WEB_SCRAPER");
                }
              }
              {
                let dataCtr = data.bank.interfaces;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(FinApiResTfulServices.BankInterface);
                  expect(data._interface).to.be.a('string');
                  expect(data._interface).to.be("FINTS_SERVER");
                  expect(data.tppAuthenticationGroup).to.be.a(FinApiResTfulServices.TppAuthenticationGroup);
                        expect(data.tppAuthenticationGroup.id).to.be.a('number');
                    expect(data.tppAuthenticationGroup.id).to.be(1);
                    expect(data.tppAuthenticationGroup.name).to.be.a('string');
                    expect(data.tppAuthenticationGroup.name).to.be("AirBank XS2A CZ");
                  {
                    let dataCtr = data.loginCredentials;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(FinApiResTfulServices.BankInterfaceLoginField);
                      expect(data.label).to.be.a('string');
                      expect(data.label).to.be("Nutzerkennung");
                      expect(data.isSecret).to.be.a('boolean');
                      expect(data.isSecret).to.be(false);
                      expect(data.isVolatile).to.be.a('boolean');
                      expect(data.isVolatile).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.properties;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("REDIRECT_APPROACH");
                    }
                  }
                  expect(data.loginHint).to.be.a('string');
                  expect(data.loginHint).to.be("Bitte geben Sie nur die ersten fünf Stellen Ihrer PIN ein.");
                  expect(data.health).to.be.a('number');
                  expect(data.health).to.be(100);
                  expect(data.lastCommunicationAttempt).to.be.a('string');
                  expect(data.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                  expect(data.lastSuccessfulCommunication).to.be.a('string');
                  expect(data.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                }
              }
              expect(data.bank.lastCommunicationAttempt).to.be.a('string');
              expect(data.bank.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
              expect(data.bank.lastSuccessfulCommunication).to.be.a('string');
              expect(data.bank.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
            expect(data.furtherLoginNotRecommended).to.be.a('boolean');
            expect(data.furtherLoginNotRecommended).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllBankConnections', function() {
        it('should call getAllBankConnections successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllBankConnections call and complete the assertions
          /*
          var opts = {};
          opts.ids = [3.4];

          instance.getAllBankConnections(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.BankConnectionList);
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnection);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.bankId).to.be.a('number');
                expect(data.bankId).to.be(277672);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Bank Connection");
                expect(data.bankingUserId).to.be.a('string');
                expect(data.bankingUserId).to.be("XXXXX");
                expect(data.bankingCustomerId).to.be.a('string');
                expect(data.bankingCustomerId).to.be("XXXXX");
                expect(data.bankingPin).to.be.a('string');
                expect(data.bankingPin).to.be("XXXXX");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("DEMO");
                expect(data.updateStatus).to.be.a('string');
                expect(data.updateStatus).to.be("READY");
                expect(data.categorizationStatus).to.be.a('string');
                expect(data.categorizationStatus).to.be("READY");
                expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastManualUpdate.result).to.be.a('string');
                  expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                  expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastManualUpdate.errorType).to.be.a('string');
                  expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastManualUpdate.timestamp).to.be.a('string');
                  expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastAutoUpdate.result).to.be.a('string');
                  expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                  expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastAutoUpdate.errorType).to.be.a('string');
                  expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                  expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.ibanOnlyMoneyTransferSupported).to.be.a('boolean');
                expect(data.ibanOnlyMoneyTransferSupported).to.be(true);
                expect(data.ibanOnlyDirectDebitSupported).to.be.a('boolean');
                expect(data.ibanOnlyDirectDebitSupported).to.be(true);
                expect(data.collectiveMoneyTransferSupported).to.be.a('boolean');
                expect(data.collectiveMoneyTransferSupported).to.be(false);
                expect(data.defaultTwoStepProcedureId).to.be.a('string');
                expect(data.defaultTwoStepProcedureId).to.be("955");
                {
                  let dataCtr = data.twoStepProcedures;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                    expect(data.procedureId).to.be.a('string');
                    expect(data.procedureId).to.be("955");
                    expect(data.procedureName).to.be.a('string');
                    expect(data.procedureName).to.be("mobileTAN");
                    expect(data.procedureChallengeType).to.be.a('string');
                    expect(data.procedureChallengeType).to.be("TEXT");
                    expect(data.implicitExecute).to.be.a('boolean');
                    expect(data.implicitExecute).to.be(false);
                  }
                }
                {
                  let dataCtr = data.interfaces;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.BankConnectionInterface);
                    expect(data._interface).to.be.a('string');
                    expect(data._interface).to.be("FINTS_SERVER");
                    {
                      let dataCtr = data.loginCredentials;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(FinApiResTfulServices.LoginCredentialResource);
                        expect(data.label).to.be.a('string');
                        expect(data.label).to.be("Customer ID");
                        expect(data.value).to.be.a('string');
                        expect(data.value).to.be("");
                      }
                    }
                    expect(data.defaultTwoStepProcedureId).to.be.a('string');
                    expect(data.defaultTwoStepProcedureId).to.be("955");
                    {
                      let dataCtr = data.twoStepProcedures;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                        expect(data.procedureId).to.be.a('string');
                        expect(data.procedureId).to.be("955");
                        expect(data.procedureName).to.be.a('string');
                        expect(data.procedureName).to.be("mobileTAN");
                        expect(data.procedureChallengeType).to.be.a('string');
                        expect(data.procedureChallengeType).to.be("TEXT");
                        expect(data.implicitExecute).to.be.a('boolean');
                        expect(data.implicitExecute).to.be(false);
                      }
                    }
                    expect(data.aisConsent).to.be.a(FinApiResTfulServices.BankConsent);
                          expect(data.aisConsent.status).to.be.a('string');
                      expect(data.aisConsent.status).to.be("PRESENT");
                      expect(data.aisConsent.expiresAt).to.be.a('string');
                      expect(data.aisConsent.expiresAt).to.be("2019-07-20 09:05:10.546");
                    expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                          expect(data.lastManualUpdate.result).to.be.a('string');
                      expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                      expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                      expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                      expect(data.lastManualUpdate.errorType).to.be.a('string');
                      expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                      expect(data.lastManualUpdate.timestamp).to.be.a('string');
                      expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                    expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                          expect(data.lastAutoUpdate.result).to.be.a('string');
                      expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                      expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                      expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                      expect(data.lastAutoUpdate.errorType).to.be.a('string');
                      expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                      expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                      expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                  }
                }
                {
                  let dataCtr = data.accountIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
                {
                  let dataCtr = data.owners;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.BankConnectionOwner);
                    expect(data.firstName).to.be.a('string');
                    expect(data.firstName).to.be("Max");
                    expect(data.lastName).to.be.a('string');
                    expect(data.lastName).to.be("Mustermann");
                    expect(data.salutation).to.be.a('string');
                    expect(data.salutation).to.be("Herr");
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("Dr.");
                    expect(data.email).to.be.a('string');
                    expect(data.email).to.be("email@localhost.de");
                    expect(data.dateOfBirth).to.be.a('string');
                    expect(data.dateOfBirth).to.be("1980-01-01");
                    expect(data.postCode).to.be.a('string');
                    expect(data.postCode).to.be("80000");
                    expect(data.country).to.be.a('string');
                    expect(data.country).to.be("Deutschland");
                    expect(data.city).to.be.a('string');
                    expect(data.city).to.be("München");
                    expect(data.street).to.be.a('string');
                    expect(data.street).to.be("Musterstraße");
                    expect(data.houseNumber).to.be.a('string');
                    expect(data.houseNumber).to.be("99");
                  }
                }
                expect(data.bank).to.be.a(FinApiResTfulServices.Bank);
                      expect(data.bank.id).to.be.a('number');
                  expect(data.bank.id).to.be(277672);
                  expect(data.bank.name).to.be.a('string');
                  expect(data.bank.name).to.be("FinAPI Test Bank");
                  expect(data.bank.loginHint).to.be.a('string');
                  expect(data.bank.loginHint).to.be("Bitte geben Sie Ihre Online-Identifikation und Ihre PIN ein.");
                  expect(data.bank.bic).to.be.a('string');
                  expect(data.bank.bic).to.be("TESTBANKING");
                  {
                    let dataCtr = data.bank.blzs;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.bank.blz).to.be.a('string');
                  expect(data.bank.blz).to.be("00000000");
                  expect(data.bank.location).to.be.a('string');
                  expect(data.bank.location).to.be("DE");
                  expect(data.bank.city).to.be.a('string');
                  expect(data.bank.city).to.be("München");
                  expect(data.bank.isSupported).to.be.a('boolean');
                  expect(data.bank.isSupported).to.be(true);
                  expect(data.bank.isTestBank).to.be.a('boolean');
                  expect(data.bank.isTestBank).to.be(true);
                  expect(data.bank.popularity).to.be.a('number');
                  expect(data.bank.popularity).to.be(95);
                  expect(data.bank.health).to.be.a('number');
                  expect(data.bank.health).to.be(100);
                  expect(data.bank.loginFieldUserId).to.be.a('string');
                  expect(data.bank.loginFieldUserId).to.be("Onlinebanking-ID");
                  expect(data.bank.loginFieldCustomerId).to.be.a('string');
                  expect(data.bank.loginFieldCustomerId).to.be("Kunden-ID");
                  expect(data.bank.loginFieldPin).to.be.a('string');
                  expect(data.bank.loginFieldPin).to.be("PIN");
                  expect(data.bank.pinsAreVolatile).to.be.a('boolean');
                  expect(data.bank.pinsAreVolatile).to.be(true);
                  expect(data.bank.isCustomerIdPassword).to.be.a('boolean');
                  expect(data.bank.isCustomerIdPassword).to.be(false);
                  {
                    let dataCtr = data.bank.supportedDataSources;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("WEB_SCRAPER");
                    }
                  }
                  {
                    let dataCtr = data.bank.interfaces;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(FinApiResTfulServices.BankInterface);
                      expect(data._interface).to.be.a('string');
                      expect(data._interface).to.be("FINTS_SERVER");
                      expect(data.tppAuthenticationGroup).to.be.a(FinApiResTfulServices.TppAuthenticationGroup);
                            expect(data.tppAuthenticationGroup.id).to.be.a('number');
                        expect(data.tppAuthenticationGroup.id).to.be(1);
                        expect(data.tppAuthenticationGroup.name).to.be.a('string');
                        expect(data.tppAuthenticationGroup.name).to.be("AirBank XS2A CZ");
                      {
                        let dataCtr = data.loginCredentials;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(FinApiResTfulServices.BankInterfaceLoginField);
                          expect(data.label).to.be.a('string');
                          expect(data.label).to.be("Nutzerkennung");
                          expect(data.isSecret).to.be.a('boolean');
                          expect(data.isSecret).to.be(false);
                          expect(data.isVolatile).to.be.a('boolean');
                          expect(data.isVolatile).to.be(false);
                        }
                      }
                      {
                        let dataCtr = data.properties;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("REDIRECT_APPROACH");
                        }
                      }
                      expect(data.loginHint).to.be.a('string');
                      expect(data.loginHint).to.be("Bitte geben Sie nur die ersten fünf Stellen Ihrer PIN ein.");
                      expect(data.health).to.be.a('number');
                      expect(data.health).to.be(100);
                      expect(data.lastCommunicationAttempt).to.be.a('string');
                      expect(data.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                      expect(data.lastSuccessfulCommunication).to.be.a('string');
                      expect(data.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                    }
                  }
                  expect(data.bank.lastCommunicationAttempt).to.be.a('string');
                  expect(data.bank.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                  expect(data.bank.lastSuccessfulCommunication).to.be.a('string');
                  expect(data.bank.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                expect(data.furtherLoginNotRecommended).to.be.a('boolean');
                expect(data.furtherLoginNotRecommended).to.be(true);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBankConnection', function() {
        it('should call getBankConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for getBankConnection call and complete the assertions
          /*
          var id = 789;

          instance.getBankConnection(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.BankConnection);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.bankId).to.be.a('number');
            expect(data.bankId).to.be(277672);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Bank Connection");
            expect(data.bankingUserId).to.be.a('string');
            expect(data.bankingUserId).to.be("XXXXX");
            expect(data.bankingCustomerId).to.be.a('string');
            expect(data.bankingCustomerId).to.be("XXXXX");
            expect(data.bankingPin).to.be.a('string');
            expect(data.bankingPin).to.be("XXXXX");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("DEMO");
            expect(data.updateStatus).to.be.a('string');
            expect(data.updateStatus).to.be("READY");
            expect(data.categorizationStatus).to.be.a('string');
            expect(data.categorizationStatus).to.be("READY");
            expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastManualUpdate.result).to.be.a('string');
              expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastManualUpdate.errorMessage).to.be.a('string');
              expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastManualUpdate.errorType).to.be.a('string');
              expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastManualUpdate.timestamp).to.be.a('string');
              expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastAutoUpdate.result).to.be.a('string');
              expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
              expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastAutoUpdate.errorType).to.be.a('string');
              expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastAutoUpdate.timestamp).to.be.a('string');
              expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.ibanOnlyMoneyTransferSupported).to.be.a('boolean');
            expect(data.ibanOnlyMoneyTransferSupported).to.be(true);
            expect(data.ibanOnlyDirectDebitSupported).to.be.a('boolean');
            expect(data.ibanOnlyDirectDebitSupported).to.be(true);
            expect(data.collectiveMoneyTransferSupported).to.be.a('boolean');
            expect(data.collectiveMoneyTransferSupported).to.be(false);
            expect(data.defaultTwoStepProcedureId).to.be.a('string');
            expect(data.defaultTwoStepProcedureId).to.be("955");
            {
              let dataCtr = data.twoStepProcedures;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                expect(data.procedureId).to.be.a('string');
                expect(data.procedureId).to.be("955");
                expect(data.procedureName).to.be.a('string');
                expect(data.procedureName).to.be("mobileTAN");
                expect(data.procedureChallengeType).to.be.a('string');
                expect(data.procedureChallengeType).to.be("TEXT");
                expect(data.implicitExecute).to.be.a('boolean');
                expect(data.implicitExecute).to.be(false);
              }
            }
            {
              let dataCtr = data.interfaces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionInterface);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("FINTS_SERVER");
                {
                  let dataCtr = data.loginCredentials;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.LoginCredentialResource);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("Customer ID");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
                expect(data.defaultTwoStepProcedureId).to.be.a('string');
                expect(data.defaultTwoStepProcedureId).to.be("955");
                {
                  let dataCtr = data.twoStepProcedures;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                    expect(data.procedureId).to.be.a('string');
                    expect(data.procedureId).to.be("955");
                    expect(data.procedureName).to.be.a('string');
                    expect(data.procedureName).to.be("mobileTAN");
                    expect(data.procedureChallengeType).to.be.a('string');
                    expect(data.procedureChallengeType).to.be("TEXT");
                    expect(data.implicitExecute).to.be.a('boolean');
                    expect(data.implicitExecute).to.be(false);
                  }
                }
                expect(data.aisConsent).to.be.a(FinApiResTfulServices.BankConsent);
                      expect(data.aisConsent.status).to.be.a('string');
                  expect(data.aisConsent.status).to.be("PRESENT");
                  expect(data.aisConsent.expiresAt).to.be.a('string');
                  expect(data.aisConsent.expiresAt).to.be("2019-07-20 09:05:10.546");
                expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastManualUpdate.result).to.be.a('string');
                  expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                  expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastManualUpdate.errorType).to.be.a('string');
                  expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastManualUpdate.timestamp).to.be.a('string');
                  expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastAutoUpdate.result).to.be.a('string');
                  expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                  expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastAutoUpdate.errorType).to.be.a('string');
                  expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                  expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
              }
            }
            {
              let dataCtr = data.accountIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            {
              let dataCtr = data.owners;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionOwner);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Max");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Mustermann");
                expect(data.salutation).to.be.a('string');
                expect(data.salutation).to.be("Herr");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Dr.");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("email@localhost.de");
                expect(data.dateOfBirth).to.be.a('string');
                expect(data.dateOfBirth).to.be("1980-01-01");
                expect(data.postCode).to.be.a('string');
                expect(data.postCode).to.be("80000");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("Deutschland");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("München");
                expect(data.street).to.be.a('string');
                expect(data.street).to.be("Musterstraße");
                expect(data.houseNumber).to.be.a('string');
                expect(data.houseNumber).to.be("99");
              }
            }
            expect(data.bank).to.be.a(FinApiResTfulServices.Bank);
                  expect(data.bank.id).to.be.a('number');
              expect(data.bank.id).to.be(277672);
              expect(data.bank.name).to.be.a('string');
              expect(data.bank.name).to.be("FinAPI Test Bank");
              expect(data.bank.loginHint).to.be.a('string');
              expect(data.bank.loginHint).to.be("Bitte geben Sie Ihre Online-Identifikation und Ihre PIN ein.");
              expect(data.bank.bic).to.be.a('string');
              expect(data.bank.bic).to.be("TESTBANKING");
              {
                let dataCtr = data.bank.blzs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.bank.blz).to.be.a('string');
              expect(data.bank.blz).to.be("00000000");
              expect(data.bank.location).to.be.a('string');
              expect(data.bank.location).to.be("DE");
              expect(data.bank.city).to.be.a('string');
              expect(data.bank.city).to.be("München");
              expect(data.bank.isSupported).to.be.a('boolean');
              expect(data.bank.isSupported).to.be(true);
              expect(data.bank.isTestBank).to.be.a('boolean');
              expect(data.bank.isTestBank).to.be(true);
              expect(data.bank.popularity).to.be.a('number');
              expect(data.bank.popularity).to.be(95);
              expect(data.bank.health).to.be.a('number');
              expect(data.bank.health).to.be(100);
              expect(data.bank.loginFieldUserId).to.be.a('string');
              expect(data.bank.loginFieldUserId).to.be("Onlinebanking-ID");
              expect(data.bank.loginFieldCustomerId).to.be.a('string');
              expect(data.bank.loginFieldCustomerId).to.be("Kunden-ID");
              expect(data.bank.loginFieldPin).to.be.a('string');
              expect(data.bank.loginFieldPin).to.be("PIN");
              expect(data.bank.pinsAreVolatile).to.be.a('boolean');
              expect(data.bank.pinsAreVolatile).to.be(true);
              expect(data.bank.isCustomerIdPassword).to.be.a('boolean');
              expect(data.bank.isCustomerIdPassword).to.be(false);
              {
                let dataCtr = data.bank.supportedDataSources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("WEB_SCRAPER");
                }
              }
              {
                let dataCtr = data.bank.interfaces;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(FinApiResTfulServices.BankInterface);
                  expect(data._interface).to.be.a('string');
                  expect(data._interface).to.be("FINTS_SERVER");
                  expect(data.tppAuthenticationGroup).to.be.a(FinApiResTfulServices.TppAuthenticationGroup);
                        expect(data.tppAuthenticationGroup.id).to.be.a('number');
                    expect(data.tppAuthenticationGroup.id).to.be(1);
                    expect(data.tppAuthenticationGroup.name).to.be.a('string');
                    expect(data.tppAuthenticationGroup.name).to.be("AirBank XS2A CZ");
                  {
                    let dataCtr = data.loginCredentials;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(FinApiResTfulServices.BankInterfaceLoginField);
                      expect(data.label).to.be.a('string');
                      expect(data.label).to.be("Nutzerkennung");
                      expect(data.isSecret).to.be.a('boolean');
                      expect(data.isSecret).to.be(false);
                      expect(data.isVolatile).to.be.a('boolean');
                      expect(data.isVolatile).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.properties;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("REDIRECT_APPROACH");
                    }
                  }
                  expect(data.loginHint).to.be.a('string');
                  expect(data.loginHint).to.be("Bitte geben Sie nur die ersten fünf Stellen Ihrer PIN ein.");
                  expect(data.health).to.be.a('number');
                  expect(data.health).to.be(100);
                  expect(data.lastCommunicationAttempt).to.be.a('string');
                  expect(data.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                  expect(data.lastSuccessfulCommunication).to.be.a('string');
                  expect(data.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                }
              }
              expect(data.bank.lastCommunicationAttempt).to.be.a('string');
              expect(data.bank.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
              expect(data.bank.lastSuccessfulCommunication).to.be.a('string');
              expect(data.bank.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
            expect(data.furtherLoginNotRecommended).to.be.a('boolean');
            expect(data.furtherLoginNotRecommended).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMultipleBankConnections', function() {
        it('should call getMultipleBankConnections successfully', function(done) {
          // TODO: uncomment, update parameter values for getMultipleBankConnections call and complete the assertions
          /*
          var ids = [3.4];

          instance.getMultipleBankConnections(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.BankConnectionList);
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnection);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.bankId).to.be.a('number');
                expect(data.bankId).to.be(277672);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Bank Connection");
                expect(data.bankingUserId).to.be.a('string');
                expect(data.bankingUserId).to.be("XXXXX");
                expect(data.bankingCustomerId).to.be.a('string');
                expect(data.bankingCustomerId).to.be("XXXXX");
                expect(data.bankingPin).to.be.a('string');
                expect(data.bankingPin).to.be("XXXXX");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("DEMO");
                expect(data.updateStatus).to.be.a('string');
                expect(data.updateStatus).to.be("READY");
                expect(data.categorizationStatus).to.be.a('string');
                expect(data.categorizationStatus).to.be("READY");
                expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastManualUpdate.result).to.be.a('string');
                  expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                  expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastManualUpdate.errorType).to.be.a('string');
                  expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastManualUpdate.timestamp).to.be.a('string');
                  expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastAutoUpdate.result).to.be.a('string');
                  expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                  expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastAutoUpdate.errorType).to.be.a('string');
                  expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                  expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.ibanOnlyMoneyTransferSupported).to.be.a('boolean');
                expect(data.ibanOnlyMoneyTransferSupported).to.be(true);
                expect(data.ibanOnlyDirectDebitSupported).to.be.a('boolean');
                expect(data.ibanOnlyDirectDebitSupported).to.be(true);
                expect(data.collectiveMoneyTransferSupported).to.be.a('boolean');
                expect(data.collectiveMoneyTransferSupported).to.be(false);
                expect(data.defaultTwoStepProcedureId).to.be.a('string');
                expect(data.defaultTwoStepProcedureId).to.be("955");
                {
                  let dataCtr = data.twoStepProcedures;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                    expect(data.procedureId).to.be.a('string');
                    expect(data.procedureId).to.be("955");
                    expect(data.procedureName).to.be.a('string');
                    expect(data.procedureName).to.be("mobileTAN");
                    expect(data.procedureChallengeType).to.be.a('string');
                    expect(data.procedureChallengeType).to.be("TEXT");
                    expect(data.implicitExecute).to.be.a('boolean');
                    expect(data.implicitExecute).to.be(false);
                  }
                }
                {
                  let dataCtr = data.interfaces;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.BankConnectionInterface);
                    expect(data._interface).to.be.a('string');
                    expect(data._interface).to.be("FINTS_SERVER");
                    {
                      let dataCtr = data.loginCredentials;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(FinApiResTfulServices.LoginCredentialResource);
                        expect(data.label).to.be.a('string');
                        expect(data.label).to.be("Customer ID");
                        expect(data.value).to.be.a('string');
                        expect(data.value).to.be("");
                      }
                    }
                    expect(data.defaultTwoStepProcedureId).to.be.a('string');
                    expect(data.defaultTwoStepProcedureId).to.be("955");
                    {
                      let dataCtr = data.twoStepProcedures;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                        expect(data.procedureId).to.be.a('string');
                        expect(data.procedureId).to.be("955");
                        expect(data.procedureName).to.be.a('string');
                        expect(data.procedureName).to.be("mobileTAN");
                        expect(data.procedureChallengeType).to.be.a('string');
                        expect(data.procedureChallengeType).to.be("TEXT");
                        expect(data.implicitExecute).to.be.a('boolean');
                        expect(data.implicitExecute).to.be(false);
                      }
                    }
                    expect(data.aisConsent).to.be.a(FinApiResTfulServices.BankConsent);
                          expect(data.aisConsent.status).to.be.a('string');
                      expect(data.aisConsent.status).to.be("PRESENT");
                      expect(data.aisConsent.expiresAt).to.be.a('string');
                      expect(data.aisConsent.expiresAt).to.be("2019-07-20 09:05:10.546");
                    expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                          expect(data.lastManualUpdate.result).to.be.a('string');
                      expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                      expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                      expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                      expect(data.lastManualUpdate.errorType).to.be.a('string');
                      expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                      expect(data.lastManualUpdate.timestamp).to.be.a('string');
                      expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                    expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                          expect(data.lastAutoUpdate.result).to.be.a('string');
                      expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                      expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                      expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                      expect(data.lastAutoUpdate.errorType).to.be.a('string');
                      expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                      expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                      expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                  }
                }
                {
                  let dataCtr = data.accountIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
                {
                  let dataCtr = data.owners;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.BankConnectionOwner);
                    expect(data.firstName).to.be.a('string');
                    expect(data.firstName).to.be("Max");
                    expect(data.lastName).to.be.a('string');
                    expect(data.lastName).to.be("Mustermann");
                    expect(data.salutation).to.be.a('string');
                    expect(data.salutation).to.be("Herr");
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("Dr.");
                    expect(data.email).to.be.a('string');
                    expect(data.email).to.be("email@localhost.de");
                    expect(data.dateOfBirth).to.be.a('string');
                    expect(data.dateOfBirth).to.be("1980-01-01");
                    expect(data.postCode).to.be.a('string');
                    expect(data.postCode).to.be("80000");
                    expect(data.country).to.be.a('string');
                    expect(data.country).to.be("Deutschland");
                    expect(data.city).to.be.a('string');
                    expect(data.city).to.be("München");
                    expect(data.street).to.be.a('string');
                    expect(data.street).to.be("Musterstraße");
                    expect(data.houseNumber).to.be.a('string');
                    expect(data.houseNumber).to.be("99");
                  }
                }
                expect(data.bank).to.be.a(FinApiResTfulServices.Bank);
                      expect(data.bank.id).to.be.a('number');
                  expect(data.bank.id).to.be(277672);
                  expect(data.bank.name).to.be.a('string');
                  expect(data.bank.name).to.be("FinAPI Test Bank");
                  expect(data.bank.loginHint).to.be.a('string');
                  expect(data.bank.loginHint).to.be("Bitte geben Sie Ihre Online-Identifikation und Ihre PIN ein.");
                  expect(data.bank.bic).to.be.a('string');
                  expect(data.bank.bic).to.be("TESTBANKING");
                  {
                    let dataCtr = data.bank.blzs;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.bank.blz).to.be.a('string');
                  expect(data.bank.blz).to.be("00000000");
                  expect(data.bank.location).to.be.a('string');
                  expect(data.bank.location).to.be("DE");
                  expect(data.bank.city).to.be.a('string');
                  expect(data.bank.city).to.be("München");
                  expect(data.bank.isSupported).to.be.a('boolean');
                  expect(data.bank.isSupported).to.be(true);
                  expect(data.bank.isTestBank).to.be.a('boolean');
                  expect(data.bank.isTestBank).to.be(true);
                  expect(data.bank.popularity).to.be.a('number');
                  expect(data.bank.popularity).to.be(95);
                  expect(data.bank.health).to.be.a('number');
                  expect(data.bank.health).to.be(100);
                  expect(data.bank.loginFieldUserId).to.be.a('string');
                  expect(data.bank.loginFieldUserId).to.be("Onlinebanking-ID");
                  expect(data.bank.loginFieldCustomerId).to.be.a('string');
                  expect(data.bank.loginFieldCustomerId).to.be("Kunden-ID");
                  expect(data.bank.loginFieldPin).to.be.a('string');
                  expect(data.bank.loginFieldPin).to.be("PIN");
                  expect(data.bank.pinsAreVolatile).to.be.a('boolean');
                  expect(data.bank.pinsAreVolatile).to.be(true);
                  expect(data.bank.isCustomerIdPassword).to.be.a('boolean');
                  expect(data.bank.isCustomerIdPassword).to.be(false);
                  {
                    let dataCtr = data.bank.supportedDataSources;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("WEB_SCRAPER");
                    }
                  }
                  {
                    let dataCtr = data.bank.interfaces;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(FinApiResTfulServices.BankInterface);
                      expect(data._interface).to.be.a('string');
                      expect(data._interface).to.be("FINTS_SERVER");
                      expect(data.tppAuthenticationGroup).to.be.a(FinApiResTfulServices.TppAuthenticationGroup);
                            expect(data.tppAuthenticationGroup.id).to.be.a('number');
                        expect(data.tppAuthenticationGroup.id).to.be(1);
                        expect(data.tppAuthenticationGroup.name).to.be.a('string');
                        expect(data.tppAuthenticationGroup.name).to.be("AirBank XS2A CZ");
                      {
                        let dataCtr = data.loginCredentials;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(FinApiResTfulServices.BankInterfaceLoginField);
                          expect(data.label).to.be.a('string');
                          expect(data.label).to.be("Nutzerkennung");
                          expect(data.isSecret).to.be.a('boolean');
                          expect(data.isSecret).to.be(false);
                          expect(data.isVolatile).to.be.a('boolean');
                          expect(data.isVolatile).to.be(false);
                        }
                      }
                      {
                        let dataCtr = data.properties;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("REDIRECT_APPROACH");
                        }
                      }
                      expect(data.loginHint).to.be.a('string');
                      expect(data.loginHint).to.be("Bitte geben Sie nur die ersten fünf Stellen Ihrer PIN ein.");
                      expect(data.health).to.be.a('number');
                      expect(data.health).to.be(100);
                      expect(data.lastCommunicationAttempt).to.be.a('string');
                      expect(data.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                      expect(data.lastSuccessfulCommunication).to.be.a('string');
                      expect(data.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                    }
                  }
                  expect(data.bank.lastCommunicationAttempt).to.be.a('string');
                  expect(data.bank.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                  expect(data.bank.lastSuccessfulCommunication).to.be.a('string');
                  expect(data.bank.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                expect(data.furtherLoginNotRecommended).to.be.a('boolean');
                expect(data.furtherLoginNotRecommended).to.be(true);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('importBankConnection', function() {
        it('should call importBankConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for importBankConnection call and complete the assertions
          /*
          var body = new FinApiResTfulServices.ImportBankConnectionParams();
          body.bankId = 277672;
          body.name = "Bank connection";
          body.bankingUserId = "123456";
          body.bankingCustomerId = "123456";
          body.bankingPin = "123456";
          body.storePin = true;
          body._interface = "XS2A";
          body.loginCredentials = [new FinApiResTfulServices.LoginCredential()];
          body.loginCredentials[0].label = "Onlinebanking-ID";
          body.loginCredentials[0].value = "max.mustermann";
          body.storeSecrets = true;
          body.skipPositionsDownload = false;
          body.loadOwnerData = false;
          body.maxDaysForDownload = 365;
          body.accountTypes = ["Checking","Savings","CreditCard","Security","Loan","Pocket","Membership","Bausparen"];
          body.accountTypeIds = [1,2,3,4,5,6,7,8];
          body.accountReferences = [new FinApiResTfulServices.AccountReference()];
          body.accountReferences[0].iban = "DE89370400440532013000";
          body.challengeResponse = "0123";
          body.multiStepAuthentication = new FinApiResTfulServices.MultiStepAuthenticationCallback();
          body.multiStepAuthentication.hash = "c7af602c031117458affd825305fb56d";
          body.multiStepAuthentication.challengeResponse = "0123";
          body.multiStepAuthentication.twoStepProcedureId = "955";
          body.multiStepAuthentication.redirectCallback = "bankParam1=X&bankParam2=Y";
          body.multiStepAuthentication.decoupledCallback = true;
          body.redirectUrl = "https://myapp.com";

          instance.importBankConnection(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.BankConnection);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.bankId).to.be.a('number');
            expect(data.bankId).to.be(277672);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Bank Connection");
            expect(data.bankingUserId).to.be.a('string');
            expect(data.bankingUserId).to.be("XXXXX");
            expect(data.bankingCustomerId).to.be.a('string');
            expect(data.bankingCustomerId).to.be("XXXXX");
            expect(data.bankingPin).to.be.a('string');
            expect(data.bankingPin).to.be("XXXXX");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("DEMO");
            expect(data.updateStatus).to.be.a('string');
            expect(data.updateStatus).to.be("READY");
            expect(data.categorizationStatus).to.be.a('string');
            expect(data.categorizationStatus).to.be("READY");
            expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastManualUpdate.result).to.be.a('string');
              expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastManualUpdate.errorMessage).to.be.a('string');
              expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastManualUpdate.errorType).to.be.a('string');
              expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastManualUpdate.timestamp).to.be.a('string');
              expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastAutoUpdate.result).to.be.a('string');
              expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
              expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastAutoUpdate.errorType).to.be.a('string');
              expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastAutoUpdate.timestamp).to.be.a('string');
              expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.ibanOnlyMoneyTransferSupported).to.be.a('boolean');
            expect(data.ibanOnlyMoneyTransferSupported).to.be(true);
            expect(data.ibanOnlyDirectDebitSupported).to.be.a('boolean');
            expect(data.ibanOnlyDirectDebitSupported).to.be(true);
            expect(data.collectiveMoneyTransferSupported).to.be.a('boolean');
            expect(data.collectiveMoneyTransferSupported).to.be(false);
            expect(data.defaultTwoStepProcedureId).to.be.a('string');
            expect(data.defaultTwoStepProcedureId).to.be("955");
            {
              let dataCtr = data.twoStepProcedures;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                expect(data.procedureId).to.be.a('string');
                expect(data.procedureId).to.be("955");
                expect(data.procedureName).to.be.a('string');
                expect(data.procedureName).to.be("mobileTAN");
                expect(data.procedureChallengeType).to.be.a('string');
                expect(data.procedureChallengeType).to.be("TEXT");
                expect(data.implicitExecute).to.be.a('boolean');
                expect(data.implicitExecute).to.be(false);
              }
            }
            {
              let dataCtr = data.interfaces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionInterface);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("FINTS_SERVER");
                {
                  let dataCtr = data.loginCredentials;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.LoginCredentialResource);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("Customer ID");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
                expect(data.defaultTwoStepProcedureId).to.be.a('string');
                expect(data.defaultTwoStepProcedureId).to.be("955");
                {
                  let dataCtr = data.twoStepProcedures;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                    expect(data.procedureId).to.be.a('string');
                    expect(data.procedureId).to.be("955");
                    expect(data.procedureName).to.be.a('string');
                    expect(data.procedureName).to.be("mobileTAN");
                    expect(data.procedureChallengeType).to.be.a('string');
                    expect(data.procedureChallengeType).to.be("TEXT");
                    expect(data.implicitExecute).to.be.a('boolean');
                    expect(data.implicitExecute).to.be(false);
                  }
                }
                expect(data.aisConsent).to.be.a(FinApiResTfulServices.BankConsent);
                      expect(data.aisConsent.status).to.be.a('string');
                  expect(data.aisConsent.status).to.be("PRESENT");
                  expect(data.aisConsent.expiresAt).to.be.a('string');
                  expect(data.aisConsent.expiresAt).to.be("2019-07-20 09:05:10.546");
                expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastManualUpdate.result).to.be.a('string');
                  expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                  expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastManualUpdate.errorType).to.be.a('string');
                  expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastManualUpdate.timestamp).to.be.a('string');
                  expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastAutoUpdate.result).to.be.a('string');
                  expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                  expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastAutoUpdate.errorType).to.be.a('string');
                  expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                  expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
              }
            }
            {
              let dataCtr = data.accountIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            {
              let dataCtr = data.owners;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionOwner);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Max");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Mustermann");
                expect(data.salutation).to.be.a('string');
                expect(data.salutation).to.be("Herr");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Dr.");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("email@localhost.de");
                expect(data.dateOfBirth).to.be.a('string');
                expect(data.dateOfBirth).to.be("1980-01-01");
                expect(data.postCode).to.be.a('string');
                expect(data.postCode).to.be("80000");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("Deutschland");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("München");
                expect(data.street).to.be.a('string');
                expect(data.street).to.be("Musterstraße");
                expect(data.houseNumber).to.be.a('string');
                expect(data.houseNumber).to.be("99");
              }
            }
            expect(data.bank).to.be.a(FinApiResTfulServices.Bank);
                  expect(data.bank.id).to.be.a('number');
              expect(data.bank.id).to.be(277672);
              expect(data.bank.name).to.be.a('string');
              expect(data.bank.name).to.be("FinAPI Test Bank");
              expect(data.bank.loginHint).to.be.a('string');
              expect(data.bank.loginHint).to.be("Bitte geben Sie Ihre Online-Identifikation und Ihre PIN ein.");
              expect(data.bank.bic).to.be.a('string');
              expect(data.bank.bic).to.be("TESTBANKING");
              {
                let dataCtr = data.bank.blzs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.bank.blz).to.be.a('string');
              expect(data.bank.blz).to.be("00000000");
              expect(data.bank.location).to.be.a('string');
              expect(data.bank.location).to.be("DE");
              expect(data.bank.city).to.be.a('string');
              expect(data.bank.city).to.be("München");
              expect(data.bank.isSupported).to.be.a('boolean');
              expect(data.bank.isSupported).to.be(true);
              expect(data.bank.isTestBank).to.be.a('boolean');
              expect(data.bank.isTestBank).to.be(true);
              expect(data.bank.popularity).to.be.a('number');
              expect(data.bank.popularity).to.be(95);
              expect(data.bank.health).to.be.a('number');
              expect(data.bank.health).to.be(100);
              expect(data.bank.loginFieldUserId).to.be.a('string');
              expect(data.bank.loginFieldUserId).to.be("Onlinebanking-ID");
              expect(data.bank.loginFieldCustomerId).to.be.a('string');
              expect(data.bank.loginFieldCustomerId).to.be("Kunden-ID");
              expect(data.bank.loginFieldPin).to.be.a('string');
              expect(data.bank.loginFieldPin).to.be("PIN");
              expect(data.bank.pinsAreVolatile).to.be.a('boolean');
              expect(data.bank.pinsAreVolatile).to.be(true);
              expect(data.bank.isCustomerIdPassword).to.be.a('boolean');
              expect(data.bank.isCustomerIdPassword).to.be(false);
              {
                let dataCtr = data.bank.supportedDataSources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("WEB_SCRAPER");
                }
              }
              {
                let dataCtr = data.bank.interfaces;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(FinApiResTfulServices.BankInterface);
                  expect(data._interface).to.be.a('string');
                  expect(data._interface).to.be("FINTS_SERVER");
                  expect(data.tppAuthenticationGroup).to.be.a(FinApiResTfulServices.TppAuthenticationGroup);
                        expect(data.tppAuthenticationGroup.id).to.be.a('number');
                    expect(data.tppAuthenticationGroup.id).to.be(1);
                    expect(data.tppAuthenticationGroup.name).to.be.a('string');
                    expect(data.tppAuthenticationGroup.name).to.be("AirBank XS2A CZ");
                  {
                    let dataCtr = data.loginCredentials;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(FinApiResTfulServices.BankInterfaceLoginField);
                      expect(data.label).to.be.a('string');
                      expect(data.label).to.be("Nutzerkennung");
                      expect(data.isSecret).to.be.a('boolean');
                      expect(data.isSecret).to.be(false);
                      expect(data.isVolatile).to.be.a('boolean');
                      expect(data.isVolatile).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.properties;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("REDIRECT_APPROACH");
                    }
                  }
                  expect(data.loginHint).to.be.a('string');
                  expect(data.loginHint).to.be("Bitte geben Sie nur die ersten fünf Stellen Ihrer PIN ein.");
                  expect(data.health).to.be.a('number');
                  expect(data.health).to.be(100);
                  expect(data.lastCommunicationAttempt).to.be.a('string');
                  expect(data.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                  expect(data.lastSuccessfulCommunication).to.be.a('string');
                  expect(data.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                }
              }
              expect(data.bank.lastCommunicationAttempt).to.be.a('string');
              expect(data.bank.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
              expect(data.bank.lastSuccessfulCommunication).to.be.a('string');
              expect(data.bank.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
            expect(data.furtherLoginNotRecommended).to.be.a('boolean');
            expect(data.furtherLoginNotRecommended).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeInterface', function() {
        it('should call removeInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for removeInterface call
          /*
          var body = new FinApiResTfulServices.RemoveInterfaceParams();
          body.bankConnectionId = 1;
          body._interface = "FINTS_SERVER";

          instance.removeInterface(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBankConnection', function() {
        it('should call updateBankConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBankConnection call and complete the assertions
          /*
          var body = new FinApiResTfulServices.UpdateBankConnectionParams();
          body.bankConnectionId = 1;
          body.bankingPin = "123456";
          body.storePin = true;
          body._interface = "XS2A";
          body.loginCredentials = [new FinApiResTfulServices.LoginCredential()];
          body.loginCredentials[0].label = "Onlinebanking-ID";
          body.loginCredentials[0].value = "max.mustermann";
          body.storeSecrets = true;
          body.importNewAccounts = false;
          body.skipPositionsDownload = false;
          body.loadOwnerData = false;
          body.accountReferences = [new FinApiResTfulServices.AccountReference()];
          body.accountReferences[0].iban = "DE89370400440532013000";
          body.challengeResponse = "0123";
          body.multiStepAuthentication = new FinApiResTfulServices.MultiStepAuthenticationCallback();
          body.multiStepAuthentication.hash = "c7af602c031117458affd825305fb56d";
          body.multiStepAuthentication.challengeResponse = "0123";
          body.multiStepAuthentication.twoStepProcedureId = "955";
          body.multiStepAuthentication.redirectCallback = "bankParam1=X&bankParam2=Y";
          body.multiStepAuthentication.decoupledCallback = true;
          body.redirectUrl = "https://myapp.com";

          instance.updateBankConnection(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.BankConnection);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.bankId).to.be.a('number');
            expect(data.bankId).to.be(277672);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Bank Connection");
            expect(data.bankingUserId).to.be.a('string');
            expect(data.bankingUserId).to.be("XXXXX");
            expect(data.bankingCustomerId).to.be.a('string');
            expect(data.bankingCustomerId).to.be("XXXXX");
            expect(data.bankingPin).to.be.a('string');
            expect(data.bankingPin).to.be("XXXXX");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("DEMO");
            expect(data.updateStatus).to.be.a('string');
            expect(data.updateStatus).to.be("READY");
            expect(data.categorizationStatus).to.be.a('string');
            expect(data.categorizationStatus).to.be("READY");
            expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastManualUpdate.result).to.be.a('string');
              expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastManualUpdate.errorMessage).to.be.a('string');
              expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastManualUpdate.errorType).to.be.a('string');
              expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastManualUpdate.timestamp).to.be.a('string');
              expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                  expect(data.lastAutoUpdate.result).to.be.a('string');
              expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
              expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
              expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
              expect(data.lastAutoUpdate.errorType).to.be.a('string');
              expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
              expect(data.lastAutoUpdate.timestamp).to.be.a('string');
              expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
            expect(data.ibanOnlyMoneyTransferSupported).to.be.a('boolean');
            expect(data.ibanOnlyMoneyTransferSupported).to.be(true);
            expect(data.ibanOnlyDirectDebitSupported).to.be.a('boolean');
            expect(data.ibanOnlyDirectDebitSupported).to.be(true);
            expect(data.collectiveMoneyTransferSupported).to.be.a('boolean');
            expect(data.collectiveMoneyTransferSupported).to.be(false);
            expect(data.defaultTwoStepProcedureId).to.be.a('string');
            expect(data.defaultTwoStepProcedureId).to.be("955");
            {
              let dataCtr = data.twoStepProcedures;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                expect(data.procedureId).to.be.a('string');
                expect(data.procedureId).to.be("955");
                expect(data.procedureName).to.be.a('string');
                expect(data.procedureName).to.be("mobileTAN");
                expect(data.procedureChallengeType).to.be.a('string');
                expect(data.procedureChallengeType).to.be("TEXT");
                expect(data.implicitExecute).to.be.a('boolean');
                expect(data.implicitExecute).to.be(false);
              }
            }
            {
              let dataCtr = data.interfaces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionInterface);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("FINTS_SERVER");
                {
                  let dataCtr = data.loginCredentials;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.LoginCredentialResource);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("Customer ID");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
                expect(data.defaultTwoStepProcedureId).to.be.a('string');
                expect(data.defaultTwoStepProcedureId).to.be("955");
                {
                  let dataCtr = data.twoStepProcedures;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.TwoStepProcedure);
                    expect(data.procedureId).to.be.a('string');
                    expect(data.procedureId).to.be("955");
                    expect(data.procedureName).to.be.a('string');
                    expect(data.procedureName).to.be("mobileTAN");
                    expect(data.procedureChallengeType).to.be.a('string');
                    expect(data.procedureChallengeType).to.be("TEXT");
                    expect(data.implicitExecute).to.be.a('boolean');
                    expect(data.implicitExecute).to.be(false);
                  }
                }
                expect(data.aisConsent).to.be.a(FinApiResTfulServices.BankConsent);
                      expect(data.aisConsent.status).to.be.a('string');
                  expect(data.aisConsent.status).to.be("PRESENT");
                  expect(data.aisConsent.expiresAt).to.be.a('string');
                  expect(data.aisConsent.expiresAt).to.be("2019-07-20 09:05:10.546");
                expect(data.lastManualUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastManualUpdate.result).to.be.a('string');
                  expect(data.lastManualUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastManualUpdate.errorMessage).to.be.a('string');
                  expect(data.lastManualUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastManualUpdate.errorType).to.be.a('string');
                  expect(data.lastManualUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastManualUpdate.timestamp).to.be.a('string');
                  expect(data.lastManualUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
                expect(data.lastAutoUpdate).to.be.a(FinApiResTfulServices.UpdateResult);
                      expect(data.lastAutoUpdate.result).to.be.a('string');
                  expect(data.lastAutoUpdate.result).to.be("INTERNAL_SERVER_ERROR");
                  expect(data.lastAutoUpdate.errorMessage).to.be.a('string');
                  expect(data.lastAutoUpdate.errorMessage).to.be("Internal server error");
                  expect(data.lastAutoUpdate.errorType).to.be.a('string');
                  expect(data.lastAutoUpdate.errorType).to.be("TECHNICAL");
                  expect(data.lastAutoUpdate.timestamp).to.be.a('string');
                  expect(data.lastAutoUpdate.timestamp).to.be("2018-01-01 00:00:00.000");
              }
            }
            {
              let dataCtr = data.accountIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            {
              let dataCtr = data.owners;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.BankConnectionOwner);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Max");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Mustermann");
                expect(data.salutation).to.be.a('string');
                expect(data.salutation).to.be("Herr");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Dr.");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("email@localhost.de");
                expect(data.dateOfBirth).to.be.a('string');
                expect(data.dateOfBirth).to.be("1980-01-01");
                expect(data.postCode).to.be.a('string');
                expect(data.postCode).to.be("80000");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("Deutschland");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("München");
                expect(data.street).to.be.a('string');
                expect(data.street).to.be("Musterstraße");
                expect(data.houseNumber).to.be.a('string');
                expect(data.houseNumber).to.be("99");
              }
            }
            expect(data.bank).to.be.a(FinApiResTfulServices.Bank);
                  expect(data.bank.id).to.be.a('number');
              expect(data.bank.id).to.be(277672);
              expect(data.bank.name).to.be.a('string');
              expect(data.bank.name).to.be("FinAPI Test Bank");
              expect(data.bank.loginHint).to.be.a('string');
              expect(data.bank.loginHint).to.be("Bitte geben Sie Ihre Online-Identifikation und Ihre PIN ein.");
              expect(data.bank.bic).to.be.a('string');
              expect(data.bank.bic).to.be("TESTBANKING");
              {
                let dataCtr = data.bank.blzs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.bank.blz).to.be.a('string');
              expect(data.bank.blz).to.be("00000000");
              expect(data.bank.location).to.be.a('string');
              expect(data.bank.location).to.be("DE");
              expect(data.bank.city).to.be.a('string');
              expect(data.bank.city).to.be("München");
              expect(data.bank.isSupported).to.be.a('boolean');
              expect(data.bank.isSupported).to.be(true);
              expect(data.bank.isTestBank).to.be.a('boolean');
              expect(data.bank.isTestBank).to.be(true);
              expect(data.bank.popularity).to.be.a('number');
              expect(data.bank.popularity).to.be(95);
              expect(data.bank.health).to.be.a('number');
              expect(data.bank.health).to.be(100);
              expect(data.bank.loginFieldUserId).to.be.a('string');
              expect(data.bank.loginFieldUserId).to.be("Onlinebanking-ID");
              expect(data.bank.loginFieldCustomerId).to.be.a('string');
              expect(data.bank.loginFieldCustomerId).to.be("Kunden-ID");
              expect(data.bank.loginFieldPin).to.be.a('string');
              expect(data.bank.loginFieldPin).to.be("PIN");
              expect(data.bank.pinsAreVolatile).to.be.a('boolean');
              expect(data.bank.pinsAreVolatile).to.be(true);
              expect(data.bank.isCustomerIdPassword).to.be.a('boolean');
              expect(data.bank.isCustomerIdPassword).to.be(false);
              {
                let dataCtr = data.bank.supportedDataSources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("WEB_SCRAPER");
                }
              }
              {
                let dataCtr = data.bank.interfaces;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(FinApiResTfulServices.BankInterface);
                  expect(data._interface).to.be.a('string');
                  expect(data._interface).to.be("FINTS_SERVER");
                  expect(data.tppAuthenticationGroup).to.be.a(FinApiResTfulServices.TppAuthenticationGroup);
                        expect(data.tppAuthenticationGroup.id).to.be.a('number');
                    expect(data.tppAuthenticationGroup.id).to.be(1);
                    expect(data.tppAuthenticationGroup.name).to.be.a('string');
                    expect(data.tppAuthenticationGroup.name).to.be("AirBank XS2A CZ");
                  {
                    let dataCtr = data.loginCredentials;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(FinApiResTfulServices.BankInterfaceLoginField);
                      expect(data.label).to.be.a('string');
                      expect(data.label).to.be("Nutzerkennung");
                      expect(data.isSecret).to.be.a('boolean');
                      expect(data.isSecret).to.be(false);
                      expect(data.isVolatile).to.be.a('boolean');
                      expect(data.isVolatile).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.properties;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("REDIRECT_APPROACH");
                    }
                  }
                  expect(data.loginHint).to.be.a('string');
                  expect(data.loginHint).to.be("Bitte geben Sie nur die ersten fünf Stellen Ihrer PIN ein.");
                  expect(data.health).to.be.a('number');
                  expect(data.health).to.be(100);
                  expect(data.lastCommunicationAttempt).to.be.a('string');
                  expect(data.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
                  expect(data.lastSuccessfulCommunication).to.be.a('string');
                  expect(data.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
                }
              }
              expect(data.bank.lastCommunicationAttempt).to.be.a('string');
              expect(data.bank.lastCommunicationAttempt).to.be("2018-01-01 00:00:00.000");
              expect(data.bank.lastSuccessfulCommunication).to.be.a('string');
              expect(data.bank.lastSuccessfulCommunication).to.be("2018-01-01 00:00:00.000");
            expect(data.furtherLoginNotRecommended).to.be.a('boolean');
            expect(data.furtherLoginNotRecommended).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
