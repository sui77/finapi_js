/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.CategoriesApi();
  });

  describe('(package)', function() {
    describe('CategoriesApi', function() {
      describe('createCategory', function() {
        it('should call createCategory successfully', function(done) {
          // TODO: uncomment, update parameter values for createCategory call and complete the assertions
          /*
          var opts = {};
          opts.body = new FinApiResTfulServices.CategoryParams();
          opts.body.name = "Sport & Fitness";
          opts.body.parentId = 373;

          instance.createCategory(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Category);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(378);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Sport & Fitness");
            expect(data.parentId).to.be.a('number');
            expect(data.parentId).to.be(373);
            expect(data.parentName).to.be.a('string');
            expect(data.parentName).to.be("Freizeit, Hobbys & Soziales");
            expect(data.isCustom).to.be.a('boolean');
            expect(data.isCustom).to.be(false);
            {
              let dataCtr = data.children;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAllCategories', function() {
        it('should call deleteAllCategories successfully', function(done) {
          // TODO: uncomment deleteAllCategories call and complete the assertions
          /*

          instance.deleteAllCategories(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteCategory', function() {
        it('should call deleteCategory successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCategory call
          /*
          var id = 789;

          instance.deleteCategory(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editCategory', function() {
        it('should call editCategory successfully', function(done) {
          // TODO: uncomment, update parameter values for editCategory call and complete the assertions
          /*
          var id = 789;
          var opts = {};
          opts.body = new FinApiResTfulServices.EditCategoryParams();
          opts.body.name = "Sport & Fitness";

          instance.editCategory(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Category);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(378);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Sport & Fitness");
            expect(data.parentId).to.be.a('number');
            expect(data.parentId).to.be(373);
            expect(data.parentName).to.be.a('string');
            expect(data.parentName).to.be("Freizeit, Hobbys & Soziales");
            expect(data.isCustom).to.be.a('boolean');
            expect(data.isCustom).to.be(false);
            {
              let dataCtr = data.children;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAndSearchAllCategories', function() {
        it('should call getAndSearchAllCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getAndSearchAllCategories call and complete the assertions
          /*
          var opts = {};
          opts.ids = [3.4];
          opts.search = "search_example";
          opts.isCustom = true;
          opts.page = 1;
          opts.perPage = 20;
          opts.order = ["order_example"];

          instance.getAndSearchAllCategories(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableCategoryList);
            {
              let dataCtr = data.categories;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Category);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(378);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Sport & Fitness");
                expect(data.parentId).to.be.a('number');
                expect(data.parentId).to.be(373);
                expect(data.parentName).to.be.a('string');
                expect(data.parentName).to.be("Freizeit, Hobbys & Soziales");
                expect(data.isCustom).to.be.a('boolean');
                expect(data.isCustom).to.be(false);
                {
                  let dataCtr = data.children;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCashFlows', function() {
        it('should call getCashFlows successfully', function(done) {
          // TODO: uncomment, update parameter values for getCashFlows call and complete the assertions
          /*
          var opts = {};
          opts.search = "search_example";
          opts.counterpart = "counterpart_example";
          opts.purpose = "purpose_example";
          opts.accountIds = [3.4];
          opts.minBankBookingDate = "minBankBookingDate_example";
          opts.maxBankBookingDate = "maxBankBookingDate_example";
          opts.minFinapiBookingDate = "minFinapiBookingDate_example";
          opts.maxFinapiBookingDate = "maxFinapiBookingDate_example";
          opts.minAmount = 8.14;
          opts.maxAmount = 8.14;
          opts.direction = "all";
          opts.labelIds = [3.4];
          opts.categoryIds = [3.4];
          opts.isNew = true;
          opts.minImportDate = "minImportDate_example";
          opts.maxImportDate = "maxImportDate_example";
          opts.includeSubCashFlows = true;
          opts.order = ["order_example"];

          instance.getCashFlows(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.CashFlowList);
            {
              let dataCtr = data.cashFlows;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.CashFlow);
                expect(data.category).to.be.a(FinApiResTfulServices.Category);
                      expect(data.category.id).to.be.a('number');
                  expect(data.category.id).to.be(378);
                  expect(data.category.name).to.be.a('string');
                  expect(data.category.name).to.be("Sport & Fitness");
                  expect(data.category.parentId).to.be.a('number');
                  expect(data.category.parentId).to.be(373);
                  expect(data.category.parentName).to.be.a('string');
                  expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
                  expect(data.category.isCustom).to.be.a('boolean');
                  expect(data.category.isCustom).to.be(false);
                  {
                    let dataCtr = data.category.children;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be("0");
                    }
                  }
                expect(data.income).to.be.a('number');
                expect(data.income).to.be(199.99);
                expect(data.spending).to.be.a('number');
                expect(data.spending).to.be(-99.99);
                expect(data.balance).to.be.a('number');
                expect(data.balance).to.be(100.0);
                expect(data.countIncomeTransactions).to.be.a('number');
                expect(data.countIncomeTransactions).to.be(5);
                expect(data.countSpendingTransactions).to.be.a('number');
                expect(data.countSpendingTransactions).to.be(3);
                expect(data.countAllTransactions).to.be.a('number');
                expect(data.countAllTransactions).to.be(8);
              }
            }
            expect(data.totalIncome).to.be.a('number');
            expect(data.totalIncome).to.be(199.99);
            expect(data.totalSpending).to.be.a('number');
            expect(data.totalSpending).to.be(-99.99);
            expect(data.totalBalance).to.be.a('number');
            expect(data.totalBalance).to.be(100.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCategory', function() {
        it('should call getCategory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCategory call and complete the assertions
          /*
          var id = 789;

          instance.getCategory(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.Category);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(378);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Sport & Fitness");
            expect(data.parentId).to.be.a('number');
            expect(data.parentId).to.be(373);
            expect(data.parentName).to.be.a('string');
            expect(data.parentName).to.be("Freizeit, Hobbys & Soziales");
            expect(data.isCustom).to.be.a('boolean');
            expect(data.isCustom).to.be(false);
            {
              let dataCtr = data.children;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMultipleCategories', function() {
        it('should call getMultipleCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getMultipleCategories call and complete the assertions
          /*
          var ids = [3.4];

          instance.getMultipleCategories(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.CategoryList);
            {
              let dataCtr = data.categories;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.Category);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(378);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Sport & Fitness");
                expect(data.parentId).to.be.a('number');
                expect(data.parentId).to.be(373);
                expect(data.parentName).to.be.a('string');
                expect(data.parentName).to.be("Freizeit, Hobbys & Soziales");
                expect(data.isCustom).to.be.a('boolean');
                expect(data.isCustom).to.be(false);
                {
                  let dataCtr = data.children;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be("0");
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('trainCategorization', function() {
        it('should call trainCategorization successfully', function(done) {
          // TODO: uncomment, update parameter values for trainCategorization call
          /*
          var opts = {};
          opts.body = new FinApiResTfulServices.TrainCategorizationData();
          opts.body.transactionData = [new FinApiResTfulServices.TrainCategorizationTransactionData()];
          opts.body.transactionData[0].accountTypeId = 1;
          opts.body.transactionData[0].amount = -99.99;
          opts.body.transactionData[0].purpose = "Restaurantbesuch";
          opts.body.transactionData[0].counterpart = "Bar Centrale";
          opts.body.transactionData[0].counterpartIban = "DE13700800000061110500";
          opts.body.transactionData[0].counterpartAccountNumber = "61110500";
          opts.body.transactionData[0].counterpartBlz = "70080000";
          opts.body.transactionData[0].counterpartBic = "DRESDEFF700";
          opts.body.transactionData[0].mcCode = "5542";
          opts.body.categoryId = 378;

          instance.trainCategorization(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
