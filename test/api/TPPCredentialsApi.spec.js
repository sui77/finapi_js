/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.TPPCredentialsApi();
  });

  describe('(package)', function() {
    describe('TPPCredentialsApi', function() {
      describe('createTppCredential', function() {
        it('should call createTppCredential successfully', function(done) {
          // TODO: uncomment, update parameter values for createTppCredential call and complete the assertions
          /*
          var body = new FinApiResTfulServices.TppCredentialsParams();
          body.tppAuthenticationGroupId = 1;
          body.label = "";
          body.tppClientId = "a23312";
          body.tppClientSecret = "followTheWhiteRabbit";
          body.tppApiKey = "";
          body.validFromDate = "2019-04-23";
          body.validUntilDate = "2022-04-23";

          instance.createTppCredential(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.TppCredentials);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.label).to.be.a('string');
            expect(data.label).to.be("Credentials for imperial bank");
            expect(data.tppAuthenticationGroupId).to.be.a('number');
            expect(data.tppAuthenticationGroupId).to.be(1);
            expect(data.validFrom).to.be.a('string');
            expect(data.validFrom).to.be("2019-07-20");
            expect(data.validUntil).to.be.a('string');
            expect(data.validUntil).to.be("2019-07-20");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTppCredential', function() {
        it('should call deleteTppCredential successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTppCredential call
          /*
          var id = 789;

          instance.deleteTppCredential(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editTppCredential', function() {
        it('should call editTppCredential successfully', function(done) {
          // TODO: uncomment, update parameter values for editTppCredential call and complete the assertions
          /*
          var id = 789;
          var body = new FinApiResTfulServices.EditTppCredentialParams();
          body.tppAuthenticationGroupId = 1;
          body.label = "";
          body.tppClientId = "a23312";
          body.tppClientSecret = "followTheWhiteRabbit";
          body.tppApiKey = "";
          body.validFromDate = "2019-04-23";
          body.validUntilDate = "2022-04-23";

          instance.editTppCredential(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.TppCredentials);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.label).to.be.a('string');
            expect(data.label).to.be("Credentials for imperial bank");
            expect(data.tppAuthenticationGroupId).to.be.a('number');
            expect(data.tppAuthenticationGroupId).to.be(1);
            expect(data.validFrom).to.be.a('string');
            expect(data.validFrom).to.be("2019-07-20");
            expect(data.validUntil).to.be.a('string');
            expect(data.validUntil).to.be("2019-07-20");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllTppCredentials', function() {
        it('should call getAllTppCredentials successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllTppCredentials call and complete the assertions
          /*
          var opts = {};
          opts.search = "search_example";
          opts.page = 1;
          opts.perPage = 20;

          instance.getAllTppCredentials(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableTppCredentialResources);
            {
              let dataCtr = data.tppCredentials;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.TppCredentials);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.label).to.be.a('string');
                expect(data.label).to.be("Credentials for imperial bank");
                expect(data.tppAuthenticationGroupId).to.be.a('number');
                expect(data.tppAuthenticationGroupId).to.be(1);
                expect(data.validFrom).to.be.a('string');
                expect(data.validFrom).to.be("2019-07-20");
                expect(data.validUntil).to.be.a('string');
                expect(data.validUntil).to.be("2019-07-20");
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAndSearchTppAuthenticationGroups', function() {
        it('should call getAndSearchTppAuthenticationGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getAndSearchTppAuthenticationGroups call and complete the assertions
          /*
          var opts = {};
          opts.ids = [3.4];
          opts.name = "name_example";
          opts.bankBlz = "bankBlz_example";
          opts.bankName = "bankName_example";
          opts.page = 1;
          opts.perPage = 20;

          instance.getAndSearchTppAuthenticationGroups(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableTppAuthenticationGroupResources);
            {
              let dataCtr = data.tppAuthenticationGroups;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.TppAuthenticationGroup);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("AirBank XS2A CZ");
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTppCredential', function() {
        it('should call getTppCredential successfully', function(done) {
          // TODO: uncomment, update parameter values for getTppCredential call and complete the assertions
          /*
          var id = 789;

          instance.getTppCredential(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.TppCredentials);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.label).to.be.a('string');
            expect(data.label).to.be("Credentials for imperial bank");
            expect(data.tppAuthenticationGroupId).to.be.a('number');
            expect(data.tppAuthenticationGroupId).to.be(1);
            expect(data.validFrom).to.be.a('string');
            expect(data.validFrom).to.be("2019-07-20");
            expect(data.validUntil).to.be.a('string');
            expect(data.validUntil).to.be("2019-07-20");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
