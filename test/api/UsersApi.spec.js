/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.UsersApi();
  });

  describe('(package)', function() {
    describe('UsersApi', function() {
      describe('createUser', function() {
        it('should call createUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createUser call and complete the assertions
          /*
          var body = new FinApiResTfulServices.UserCreateParams();
          body.id = "username";
          body.password = "password";
          body.email = "email@localhost.de";
          body.phone = "+49 99 999999-999";
          body.isAutoUpdateEnabled = true;

          instance.createUser(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.User);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("username");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("password");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("email@localhost.de");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("+49 99 999999-999");
            expect(data.isAutoUpdateEnabled).to.be.a('boolean');
            expect(data.isAutoUpdateEnabled).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAuthorizedUser', function() {
        it('should call deleteAuthorizedUser successfully', function(done) {
          // TODO: uncomment deleteAuthorizedUser call
          /*

          instance.deleteAuthorizedUser(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUnverifiedUser', function() {
        it('should call deleteUnverifiedUser successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUnverifiedUser call
          /*
          var userId = "userId_example";

          instance.deleteUnverifiedUser(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editAuthorizedUser', function() {
        it('should call editAuthorizedUser successfully', function(done) {
          // TODO: uncomment, update parameter values for editAuthorizedUser call and complete the assertions
          /*
          var body = new FinApiResTfulServices.UserUpdateParams();
          body.email = "email@localhost.de";
          body.phone = "+49 99 999999-999";
          body.isAutoUpdateEnabled = true;

          instance.editAuthorizedUser(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.User);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("username");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("password");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("email@localhost.de");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("+49 99 999999-999");
            expect(data.isAutoUpdateEnabled).to.be.a('boolean');
            expect(data.isAutoUpdateEnabled).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executePasswordChange', function() {
        it('should call executePasswordChange successfully', function(done) {
          // TODO: uncomment, update parameter values for executePasswordChange call
          /*
          var opts = {};
          opts.body = new FinApiResTfulServices.ExecutePasswordChangeParams();
          opts.body.userId = "username";
          opts.body.password = "password";
          opts.body.passwordChangeToken = "45a611d8-8a19-4a02-8726-a24b6a691ce9";

          instance.executePasswordChange(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAuthorizedUser', function() {
        it('should call getAuthorizedUser successfully', function(done) {
          // TODO: uncomment getAuthorizedUser call and complete the assertions
          /*

          instance.getAuthorizedUser(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.User);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("username");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("password");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("email@localhost.de");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("+49 99 999999-999");
            expect(data.isAutoUpdateEnabled).to.be.a('boolean');
            expect(data.isAutoUpdateEnabled).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVerificationStatus', function() {
        it('should call getVerificationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getVerificationStatus call and complete the assertions
          /*
          var userId = "userId_example";

          instance.getVerificationStatus(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.VerificationStatusResource);
            expect(data.userId).to.be.a('string');
            expect(data.userId).to.be("username");
            expect(data.isUserVerified).to.be.a('boolean');
            expect(data.isUserVerified).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('requestPasswordChange', function() {
        it('should call requestPasswordChange successfully', function(done) {
          // TODO: uncomment, update parameter values for requestPasswordChange call and complete the assertions
          /*
          var opts = {};
          opts.body = new FinApiResTfulServices.RequestPasswordChangeParams();
          opts.body.userId = "username";

          instance.requestPasswordChange(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PasswordChangingResource);
            expect(data.userId).to.be.a('string');
            expect(data.userId).to.be("username");
            expect(data.userEmail).to.be.a('string');
            expect(data.userEmail).to.be("email@localhost.de");
            expect(data.passwordChangeToken).to.be.a('string');
            expect(data.passwordChangeToken).to.be("EnCRyPTEDPassWordCHAnGEToKen==");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('verifyUser', function() {
        it('should call verifyUser successfully', function(done) {
          // TODO: uncomment, update parameter values for verifyUser call
          /*
          var userId = "userId_example";

          instance.verifyUser(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
