/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.MandatorAdministrationApi();
  });

  describe('(package)', function() {
    describe('MandatorAdministrationApi', function() {
      describe('changeClientCredentials', function() {
        it('should call changeClientCredentials successfully', function(done) {
          // TODO: uncomment, update parameter values for changeClientCredentials call
          /*
          var body = new FinApiResTfulServices.ChangeClientCredentialsParams();
          body.clientId = "01234567-89ab-cdef-0123-456789abcdef";
          body.oldClientSecret = "01234567-89ab-cdef-0123-456789abcdef";
          body.newClientSecret = "01234567-89ab-cdef-0123-456789abcdef";

          instance.changeClientCredentials(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createIbanRules', function() {
        it('should call createIbanRules successfully', function(done) {
          // TODO: uncomment, update parameter values for createIbanRules call and complete the assertions
          /*
          var body = new FinApiResTfulServices.IbanRulesParams();
          body.ibanRules = [new FinApiResTfulServices.IbanRuleParams()];
          body.ibanRules[0].iban = "DE89370400440532013000";
          body.ibanRules[0].categoryId = 378;
          body.ibanRules[0].direction = "Spending";

          instance.createIbanRules(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IbanRuleList);
            {
              let dataCtr = data.ibanRules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.IbanRule);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.category).to.be.a(FinApiResTfulServices.Category);
                      expect(data.category.id).to.be.a('number');
                  expect(data.category.id).to.be(378);
                  expect(data.category.name).to.be.a('string');
                  expect(data.category.name).to.be("Sport & Fitness");
                  expect(data.category.parentId).to.be.a('number');
                  expect(data.category.parentId).to.be(373);
                  expect(data.category.parentName).to.be.a('string');
                  expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
                  expect(data.category.isCustom).to.be.a('boolean');
                  expect(data.category.isCustom).to.be(false);
                  {
                    let dataCtr = data.category.children;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be("0");
                    }
                  }
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("Income");
                expect(data.creationDate).to.be.a('string');
                expect(data.creationDate).to.be("2018-01-01 00:00:00.000");
                expect(data.iban).to.be.a('string');
                expect(data.iban).to.be("DE89370400440532013000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createKeywordRules', function() {
        it('should call createKeywordRules successfully', function(done) {
          // TODO: uncomment, update parameter values for createKeywordRules call and complete the assertions
          /*
          var body = new FinApiResTfulServices.KeywordRulesParams();
          body.keywordRules = [new FinApiResTfulServices.KeywordRuleParams()];
          body.keywordRules[0].categoryId = 378;
          body.keywordRules[0].direction = "Spending";
          body.keywordRules[0].keywords = ["coffee","pizza","burger"];

          instance.createKeywordRules(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.KeywordRuleList);
            {
              let dataCtr = data.keywordRules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.KeywordRule);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.category).to.be.a(FinApiResTfulServices.Category);
                      expect(data.category.id).to.be.a('number');
                  expect(data.category.id).to.be(378);
                  expect(data.category.name).to.be.a('string');
                  expect(data.category.name).to.be("Sport & Fitness");
                  expect(data.category.parentId).to.be.a('number');
                  expect(data.category.parentId).to.be(373);
                  expect(data.category.parentName).to.be.a('string');
                  expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
                  expect(data.category.isCustom).to.be.a('boolean');
                  expect(data.category.isCustom).to.be(false);
                  {
                    let dataCtr = data.category.children;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be("0");
                    }
                  }
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("Spending");
                expect(data.creationDate).to.be.a('string');
                expect(data.creationDate).to.be("2018-01-01 00:00:00.000");
                {
                  let dataCtr = data.keywords;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteIbanRules', function() {
        it('should call deleteIbanRules successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteIbanRules call and complete the assertions
          /*
          var body = new FinApiResTfulServices.IbanRuleIdentifiersParams();
          body.ids = [1,2,3];

          instance.deleteIbanRules(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteKeywordRules', function() {
        it('should call deleteKeywordRules successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteKeywordRules call and complete the assertions
          /*
          var body = new FinApiResTfulServices.KeywordRuleIdentifiersParams();
          body.ids = [1,2,3];

          instance.deleteKeywordRules(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.IdentifierList);
            {
              let dataCtr = data.identifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUsers', function() {
        it('should call deleteUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUsers call and complete the assertions
          /*
          var body = new FinApiResTfulServices.UserIdentifiersParams();
          body.userIds = ["first_user","second_user","third_user","fourth_user"];

          instance.deleteUsers(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.UserIdentifiersList);
            {
              let dataCtr = data.deletedUsers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.nonDeletedUsers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIbanRuleList', function() {
        it('should call getIbanRuleList successfully', function(done) {
          // TODO: uncomment, update parameter values for getIbanRuleList call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.perPage = 20;

          instance.getIbanRuleList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableIbanRuleList);
            {
              let dataCtr = data.ibanRules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.IbanRule);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.category).to.be.a(FinApiResTfulServices.Category);
                      expect(data.category.id).to.be.a('number');
                  expect(data.category.id).to.be(378);
                  expect(data.category.name).to.be.a('string');
                  expect(data.category.name).to.be("Sport & Fitness");
                  expect(data.category.parentId).to.be.a('number');
                  expect(data.category.parentId).to.be(373);
                  expect(data.category.parentName).to.be.a('string');
                  expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
                  expect(data.category.isCustom).to.be.a('boolean');
                  expect(data.category.isCustom).to.be(false);
                  {
                    let dataCtr = data.category.children;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be("0");
                    }
                  }
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("Income");
                expect(data.creationDate).to.be.a('string');
                expect(data.creationDate).to.be("2018-01-01 00:00:00.000");
                expect(data.iban).to.be.a('string');
                expect(data.iban).to.be("DE89370400440532013000");
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getKeywordRuleList', function() {
        it('should call getKeywordRuleList successfully', function(done) {
          // TODO: uncomment, update parameter values for getKeywordRuleList call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.perPage = 20;

          instance.getKeywordRuleList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableKeywordRuleList);
            {
              let dataCtr = data.keywordRules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.KeywordRule);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.category).to.be.a(FinApiResTfulServices.Category);
                      expect(data.category.id).to.be.a('number');
                  expect(data.category.id).to.be(378);
                  expect(data.category.name).to.be.a('string');
                  expect(data.category.name).to.be("Sport & Fitness");
                  expect(data.category.parentId).to.be.a('number');
                  expect(data.category.parentId).to.be(373);
                  expect(data.category.parentName).to.be.a('string');
                  expect(data.category.parentName).to.be("Freizeit, Hobbys & Soziales");
                  expect(data.category.isCustom).to.be.a('boolean');
                  expect(data.category.isCustom).to.be(false);
                  {
                    let dataCtr = data.category.children;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be("0");
                    }
                  }
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("Spending");
                expect(data.creationDate).to.be.a('string');
                expect(data.creationDate).to.be("2018-01-01 00:00:00.000");
                {
                  let dataCtr = data.keywords;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserList', function() {
        it('should call getUserList successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserList call and complete the assertions
          /*
          var opts = {};
          opts.minRegistrationDate = "minRegistrationDate_example";
          opts.maxRegistrationDate = "maxRegistrationDate_example";
          opts.minDeletionDate = "minDeletionDate_example";
          opts.maxDeletionDate = "maxDeletionDate_example";
          opts.minLastActiveDate = "minLastActiveDate_example";
          opts.maxLastActiveDate = "maxLastActiveDate_example";
          opts.includeMonthlyStats = false;
          opts.monthlyStatsStartDate = "monthlyStatsStartDate_example";
          opts.monthlyStatsEndDate = "monthlyStatsEndDate_example";
          opts.minBankConnectionCountInMonthlyStats = 0;
          opts.userId = "userId_example";
          opts.isDeleted = true;
          opts.isLocked = true;
          opts.page = 1;
          opts.perPage = 20;
          opts.order = ["order_example"];

          instance.getUserList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.PageableUserInfoList);
            {
              let dataCtr = data.users;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(FinApiResTfulServices.UserInfo);
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("1");
                expect(data.registrationDate).to.be.a('string');
                expect(data.registrationDate).to.be("2018-01-01");
                expect(data.deletionDate).to.be.a('string');
                expect(data.deletionDate).to.be("2018-01-31");
                expect(data.lastActiveDate).to.be.a('string');
                expect(data.lastActiveDate).to.be("2018-01-31");
                expect(data.bankConnectionCount).to.be.a('number');
                expect(data.bankConnectionCount).to.be(5);
                expect(data.latestBankConnectionImportDate).to.be.a('string');
                expect(data.latestBankConnectionImportDate).to.be("2018-01-01");
                expect(data.latestBankConnectionDeletionDate).to.be.a('string');
                expect(data.latestBankConnectionDeletionDate).to.be("2018-01-31");
                {
                  let dataCtr = data.monthlyStats;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(FinApiResTfulServices.MonthlyUserStats);
                    expect(data.month).to.be.a('string');
                    expect(data.month).to.be("2018-01");
                    expect(data.minBankConnectionCount).to.be.a('number');
                    expect(data.minBankConnectionCount).to.be(1);
                    expect(data.maxBankConnectionCount).to.be.a('number');
                    expect(data.maxBankConnectionCount).to.be(5);
                  }
                }
                expect(data.isLocked).to.be.a('boolean');
                expect(data.isLocked).to.be(false);
              }
            }
            expect(data.paging).to.be.a(FinApiResTfulServices.Paging);
                  expect(data.paging.page).to.be.a('number');
              expect(data.paging.page).to.be(1);
              expect(data.paging.perPage).to.be.a('number');
              expect(data.paging.perPage).to.be(20);
              expect(data.paging.pageCount).to.be.a('number');
              expect(data.paging.pageCount).to.be(10);
              expect(data.paging.totalCount).to.be.a('number');
              expect(data.paging.totalCount).to.be(200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
