/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinApiResTfulServices.AuthorizationApi();
  });

  describe('(package)', function() {
    describe('AuthorizationApi', function() {
      describe('getToken', function() {
        it('should call getToken successfully', function(done) {
          // TODO: uncomment, update parameter values for getToken call and complete the assertions
          /*
          var grantType = "grantType_example";
          var clientId = "clientId_example";
          var clientSecret = "clientSecret_example";
          var opts = {};
          opts.refreshToken = "refreshToken_example";
          opts.username = "username_example";
          opts.password = "password_example";

          instance.getToken(grantType, clientId, clientSecret, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinApiResTfulServices.AccessToken);
            expect(data.tokenType).to.be.a('string');
            expect(data.tokenType).to.be("bearer");
            expect(data.expiresIn).to.be.a('number');
            expect(data.expiresIn).to.be(3600);
            expect(data.scope).to.be.a('string');
            expect(data.scope).to.be("all");
            expect(data.refreshToken).to.be.a('string');
            expect(data.refreshToken).to.be("0b9KjiBVlZLz7a4HshSAIcFuscStiXT1VzT5mgNYwCQ_dWctTDsaIjedAhD1LpsOFJ7x6K8Emf8M3VOQkwNFR9FHijALYSQw2UeRwAC2MvrOKwfF1dHmOq5VEVYEaGf6");
            expect(data.accessToken).to.be.a('string');
            expect(data.accessToken).to.be("yvMbx_TgwdYE0hgOVb8N4ZOvxOukqfjzYOGRZcJiCjQuRGkVIBfjjV3YG4zKTGiY2aPn2cQTGaQOT8uo5uo7_QOXts1s5UBSVuRHc6a8X30RrGBTyqV9h26SUHcZPNbZ");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('revokeToken', function() {
        it('should call revokeToken successfully', function(done) {
          // TODO: uncomment, update parameter values for revokeToken call
          /*
          var token = "token_example";
          var opts = {};
          opts.tokenTypeHint = "tokenTypeHint_example";

          instance.revokeToken(token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
