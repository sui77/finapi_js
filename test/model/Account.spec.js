/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Account', function() {
      beforeEach(function() {
        instance = new FinApiResTfulServices.Account();
      });

      it('should create an instance of Account', function() {
        // TODO: update the code to test Account
        expect(instance).to.be.a(FinApiResTfulServices.Account);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property bankConnectionId (base name: "bankConnectionId")', function() {
        // TODO: update the code to test the property bankConnectionId
        expect(instance).to.have.property('bankConnectionId');
        // expect(instance.bankConnectionId).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property iban (base name: "iban")', function() {
        // TODO: update the code to test the property iban
        expect(instance).to.have.property('iban');
        // expect(instance.iban).to.be(expectedValueLiteral);
      });

      it('should have the property accountNumber (base name: "accountNumber")', function() {
        // TODO: update the code to test the property accountNumber
        expect(instance).to.have.property('accountNumber');
        // expect(instance.accountNumber).to.be(expectedValueLiteral);
      });

      it('should have the property subAccountNumber (base name: "subAccountNumber")', function() {
        // TODO: update the code to test the property subAccountNumber
        expect(instance).to.have.property('subAccountNumber');
        // expect(instance.subAccountNumber).to.be(expectedValueLiteral);
      });

      it('should have the property accountHolderName (base name: "accountHolderName")', function() {
        // TODO: update the code to test the property accountHolderName
        expect(instance).to.have.property('accountHolderName');
        // expect(instance.accountHolderName).to.be(expectedValueLiteral);
      });

      it('should have the property accountHolderId (base name: "accountHolderId")', function() {
        // TODO: update the code to test the property accountHolderId
        expect(instance).to.have.property('accountHolderId');
        // expect(instance.accountHolderId).to.be(expectedValueLiteral);
      });

      it('should have the property accountCurrency (base name: "accountCurrency")', function() {
        // TODO: update the code to test the property accountCurrency
        expect(instance).to.have.property('accountCurrency');
        // expect(instance.accountCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property accountTypeId (base name: "accountTypeId")', function() {
        // TODO: update the code to test the property accountTypeId
        expect(instance).to.have.property('accountTypeId');
        // expect(instance.accountTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property accountTypeName (base name: "accountTypeName")', function() {
        // TODO: update the code to test the property accountTypeName
        expect(instance).to.have.property('accountTypeName');
        // expect(instance.accountTypeName).to.be(expectedValueLiteral);
      });

      it('should have the property accountType (base name: "accountType")', function() {
        // TODO: update the code to test the property accountType
        expect(instance).to.have.property('accountType');
        // expect(instance.accountType).to.be(expectedValueLiteral);
      });

      it('should have the property balance (base name: "balance")', function() {
        // TODO: update the code to test the property balance
        expect(instance).to.have.property('balance');
        // expect(instance.balance).to.be(expectedValueLiteral);
      });

      it('should have the property overdraft (base name: "overdraft")', function() {
        // TODO: update the code to test the property overdraft
        expect(instance).to.have.property('overdraft');
        // expect(instance.overdraft).to.be(expectedValueLiteral);
      });

      it('should have the property overdraftLimit (base name: "overdraftLimit")', function() {
        // TODO: update the code to test the property overdraftLimit
        expect(instance).to.have.property('overdraftLimit');
        // expect(instance.overdraftLimit).to.be(expectedValueLiteral);
      });

      it('should have the property availableFunds (base name: "availableFunds")', function() {
        // TODO: update the code to test the property availableFunds
        expect(instance).to.have.property('availableFunds');
        // expect(instance.availableFunds).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulUpdate (base name: "lastSuccessfulUpdate")', function() {
        // TODO: update the code to test the property lastSuccessfulUpdate
        expect(instance).to.have.property('lastSuccessfulUpdate');
        // expect(instance.lastSuccessfulUpdate).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdateAttempt (base name: "lastUpdateAttempt")', function() {
        // TODO: update the code to test the property lastUpdateAttempt
        expect(instance).to.have.property('lastUpdateAttempt');
        // expect(instance.lastUpdateAttempt).to.be(expectedValueLiteral);
      });

      it('should have the property isNew (base name: "isNew")', function() {
        // TODO: update the code to test the property isNew
        expect(instance).to.have.property('isNew');
        // expect(instance.isNew).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property supportedOrders (base name: "supportedOrders")', function() {
        // TODO: update the code to test the property supportedOrders
        expect(instance).to.have.property('supportedOrders');
        // expect(instance.supportedOrders).to.be(expectedValueLiteral);
      });

      it('should have the property interfaces (base name: "interfaces")', function() {
        // TODO: update the code to test the property interfaces
        expect(instance).to.have.property('interfaces');
        // expect(instance.interfaces).to.be(expectedValueLiteral);
      });

      it('should have the property clearingAccounts (base name: "clearingAccounts")', function() {
        // TODO: update the code to test the property clearingAccounts
        expect(instance).to.have.property('clearingAccounts');
        // expect(instance.clearingAccounts).to.be(expectedValueLiteral);
      });

    });
  });

}));
