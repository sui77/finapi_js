/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MultiStepAuthenticationChallenge', function() {
      beforeEach(function() {
        instance = new FinApiResTfulServices.MultiStepAuthenticationChallenge();
      });

      it('should create an instance of MultiStepAuthenticationChallenge', function() {
        // TODO: update the code to test MultiStepAuthenticationChallenge
        expect(instance).to.be.a(FinApiResTfulServices.MultiStepAuthenticationChallenge);
      });

      it('should have the property hash (base name: "hash")', function() {
        // TODO: update the code to test the property hash
        expect(instance).to.have.property('hash');
        // expect(instance.hash).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property challengeMessage (base name: "challengeMessage")', function() {
        // TODO: update the code to test the property challengeMessage
        expect(instance).to.have.property('challengeMessage');
        // expect(instance.challengeMessage).to.be(expectedValueLiteral);
      });

      it('should have the property answerFieldLabel (base name: "answerFieldLabel")', function() {
        // TODO: update the code to test the property answerFieldLabel
        expect(instance).to.have.property('answerFieldLabel');
        // expect(instance.answerFieldLabel).to.be(expectedValueLiteral);
      });

      it('should have the property redirectUrl (base name: "redirectUrl")', function() {
        // TODO: update the code to test the property redirectUrl
        expect(instance).to.have.property('redirectUrl');
        // expect(instance.redirectUrl).to.be(expectedValueLiteral);
      });

      it('should have the property redirectContext (base name: "redirectContext")', function() {
        // TODO: update the code to test the property redirectContext
        expect(instance).to.have.property('redirectContext');
        // expect(instance.redirectContext).to.be(expectedValueLiteral);
      });

      it('should have the property redirectContextField (base name: "redirectContextField")', function() {
        // TODO: update the code to test the property redirectContextField
        expect(instance).to.have.property('redirectContextField');
        // expect(instance.redirectContextField).to.be(expectedValueLiteral);
      });

      it('should have the property twoStepProcedures (base name: "twoStepProcedures")', function() {
        // TODO: update the code to test the property twoStepProcedures
        expect(instance).to.have.property('twoStepProcedures');
        // expect(instance.twoStepProcedures).to.be(expectedValueLiteral);
      });

      it('should have the property opticalData (base name: "opticalData")', function() {
        // TODO: update the code to test the property opticalData
        expect(instance).to.have.property('opticalData');
        // expect(instance.opticalData).to.be(expectedValueLiteral);
      });

      it('should have the property photoTanMimeType (base name: "photoTanMimeType")', function() {
        // TODO: update the code to test the property photoTanMimeType
        expect(instance).to.have.property('photoTanMimeType');
        // expect(instance.photoTanMimeType).to.be(expectedValueLiteral);
      });

      it('should have the property photoTanData (base name: "photoTanData")', function() {
        // TODO: update the code to test the property photoTanData
        expect(instance).to.have.property('photoTanData');
        // expect(instance.photoTanData).to.be(expectedValueLiteral);
      });

    });
  });

}));
