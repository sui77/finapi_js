/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Transaction', function() {
      beforeEach(function() {
        instance = new FinApiResTfulServices.Transaction();
      });

      it('should create an instance of Transaction', function() {
        // TODO: update the code to test Transaction
        expect(instance).to.be.a(FinApiResTfulServices.Transaction);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property parentId (base name: "parentId")', function() {
        // TODO: update the code to test the property parentId
        expect(instance).to.have.property('parentId');
        // expect(instance.parentId).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property valueDate (base name: "valueDate")', function() {
        // TODO: update the code to test the property valueDate
        expect(instance).to.have.property('valueDate');
        // expect(instance.valueDate).to.be(expectedValueLiteral);
      });

      it('should have the property bankBookingDate (base name: "bankBookingDate")', function() {
        // TODO: update the code to test the property bankBookingDate
        expect(instance).to.have.property('bankBookingDate');
        // expect(instance.bankBookingDate).to.be(expectedValueLiteral);
      });

      it('should have the property finapiBookingDate (base name: "finapiBookingDate")', function() {
        // TODO: update the code to test the property finapiBookingDate
        expect(instance).to.have.property('finapiBookingDate');
        // expect(instance.finapiBookingDate).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property purpose (base name: "purpose")', function() {
        // TODO: update the code to test the property purpose
        expect(instance).to.have.property('purpose');
        // expect(instance.purpose).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartName (base name: "counterpartName")', function() {
        // TODO: update the code to test the property counterpartName
        expect(instance).to.have.property('counterpartName');
        // expect(instance.counterpartName).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartAccountNumber (base name: "counterpartAccountNumber")', function() {
        // TODO: update the code to test the property counterpartAccountNumber
        expect(instance).to.have.property('counterpartAccountNumber');
        // expect(instance.counterpartAccountNumber).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartIban (base name: "counterpartIban")', function() {
        // TODO: update the code to test the property counterpartIban
        expect(instance).to.have.property('counterpartIban');
        // expect(instance.counterpartIban).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartBlz (base name: "counterpartBlz")', function() {
        // TODO: update the code to test the property counterpartBlz
        expect(instance).to.have.property('counterpartBlz');
        // expect(instance.counterpartBlz).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartBic (base name: "counterpartBic")', function() {
        // TODO: update the code to test the property counterpartBic
        expect(instance).to.have.property('counterpartBic');
        // expect(instance.counterpartBic).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartBankName (base name: "counterpartBankName")', function() {
        // TODO: update the code to test the property counterpartBankName
        expect(instance).to.have.property('counterpartBankName');
        // expect(instance.counterpartBankName).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartMandateReference (base name: "counterpartMandateReference")', function() {
        // TODO: update the code to test the property counterpartMandateReference
        expect(instance).to.have.property('counterpartMandateReference');
        // expect(instance.counterpartMandateReference).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartCustomerReference (base name: "counterpartCustomerReference")', function() {
        // TODO: update the code to test the property counterpartCustomerReference
        expect(instance).to.have.property('counterpartCustomerReference');
        // expect(instance.counterpartCustomerReference).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartCreditorId (base name: "counterpartCreditorId")', function() {
        // TODO: update the code to test the property counterpartCreditorId
        expect(instance).to.have.property('counterpartCreditorId');
        // expect(instance.counterpartCreditorId).to.be(expectedValueLiteral);
      });

      it('should have the property counterpartDebitorId (base name: "counterpartDebitorId")', function() {
        // TODO: update the code to test the property counterpartDebitorId
        expect(instance).to.have.property('counterpartDebitorId');
        // expect(instance.counterpartDebitorId).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property typeCodeZka (base name: "typeCodeZka")', function() {
        // TODO: update the code to test the property typeCodeZka
        expect(instance).to.have.property('typeCodeZka');
        // expect(instance.typeCodeZka).to.be(expectedValueLiteral);
      });

      it('should have the property typeCodeSwift (base name: "typeCodeSwift")', function() {
        // TODO: update the code to test the property typeCodeSwift
        expect(instance).to.have.property('typeCodeSwift');
        // expect(instance.typeCodeSwift).to.be(expectedValueLiteral);
      });

      it('should have the property sepaPurposeCode (base name: "sepaPurposeCode")', function() {
        // TODO: update the code to test the property sepaPurposeCode
        expect(instance).to.have.property('sepaPurposeCode');
        // expect(instance.sepaPurposeCode).to.be(expectedValueLiteral);
      });

      it('should have the property primanota (base name: "primanota")', function() {
        // TODO: update the code to test the property primanota
        expect(instance).to.have.property('primanota');
        // expect(instance.primanota).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property labels (base name: "labels")', function() {
        // TODO: update the code to test the property labels
        expect(instance).to.have.property('labels');
        // expect(instance.labels).to.be(expectedValueLiteral);
      });

      it('should have the property isPotentialDuplicate (base name: "isPotentialDuplicate")', function() {
        // TODO: update the code to test the property isPotentialDuplicate
        expect(instance).to.have.property('isPotentialDuplicate');
        // expect(instance.isPotentialDuplicate).to.be(expectedValueLiteral);
      });

      it('should have the property isAdjustingEntry (base name: "isAdjustingEntry")', function() {
        // TODO: update the code to test the property isAdjustingEntry
        expect(instance).to.have.property('isAdjustingEntry');
        // expect(instance.isAdjustingEntry).to.be(expectedValueLiteral);
      });

      it('should have the property isNew (base name: "isNew")', function() {
        // TODO: update the code to test the property isNew
        expect(instance).to.have.property('isNew');
        // expect(instance.isNew).to.be(expectedValueLiteral);
      });

      it('should have the property importDate (base name: "importDate")', function() {
        // TODO: update the code to test the property importDate
        expect(instance).to.have.property('importDate');
        // expect(instance.importDate).to.be(expectedValueLiteral);
      });

      it('should have the property children (base name: "children")', function() {
        // TODO: update the code to test the property children
        expect(instance).to.have.property('children');
        // expect(instance.children).to.be(expectedValueLiteral);
      });

      it('should have the property paypalData (base name: "paypalData")', function() {
        // TODO: update the code to test the property paypalData
        expect(instance).to.have.property('paypalData');
        // expect(instance.paypalData).to.be(expectedValueLiteral);
      });

      it('should have the property endToEndReference (base name: "endToEndReference")', function() {
        // TODO: update the code to test the property endToEndReference
        expect(instance).to.have.property('endToEndReference');
        // expect(instance.endToEndReference).to.be(expectedValueLiteral);
      });

      it('should have the property compensationAmount (base name: "compensationAmount")', function() {
        // TODO: update the code to test the property compensationAmount
        expect(instance).to.have.property('compensationAmount');
        // expect(instance.compensationAmount).to.be(expectedValueLiteral);
      });

      it('should have the property originalAmount (base name: "originalAmount")', function() {
        // TODO: update the code to test the property originalAmount
        expect(instance).to.have.property('originalAmount');
        // expect(instance.originalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property differentDebitor (base name: "differentDebitor")', function() {
        // TODO: update the code to test the property differentDebitor
        expect(instance).to.have.property('differentDebitor');
        // expect(instance.differentDebitor).to.be(expectedValueLiteral);
      });

      it('should have the property differentCreditor (base name: "differentCreditor")', function() {
        // TODO: update the code to test the property differentCreditor
        expect(instance).to.have.property('differentCreditor');
        // expect(instance.differentCreditor).to.be(expectedValueLiteral);
      });

    });
  });

}));
