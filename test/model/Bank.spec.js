/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Bank', function() {
      beforeEach(function() {
        instance = new FinApiResTfulServices.Bank();
      });

      it('should create an instance of Bank', function() {
        // TODO: update the code to test Bank
        expect(instance).to.be.a(FinApiResTfulServices.Bank);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property loginHint (base name: "loginHint")', function() {
        // TODO: update the code to test the property loginHint
        expect(instance).to.have.property('loginHint');
        // expect(instance.loginHint).to.be(expectedValueLiteral);
      });

      it('should have the property bic (base name: "bic")', function() {
        // TODO: update the code to test the property bic
        expect(instance).to.have.property('bic');
        // expect(instance.bic).to.be(expectedValueLiteral);
      });

      it('should have the property blzs (base name: "blzs")', function() {
        // TODO: update the code to test the property blzs
        expect(instance).to.have.property('blzs');
        // expect(instance.blzs).to.be(expectedValueLiteral);
      });

      it('should have the property blz (base name: "blz")', function() {
        // TODO: update the code to test the property blz
        expect(instance).to.have.property('blz');
        // expect(instance.blz).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property isSupported (base name: "isSupported")', function() {
        // TODO: update the code to test the property isSupported
        expect(instance).to.have.property('isSupported');
        // expect(instance.isSupported).to.be(expectedValueLiteral);
      });

      it('should have the property isTestBank (base name: "isTestBank")', function() {
        // TODO: update the code to test the property isTestBank
        expect(instance).to.have.property('isTestBank');
        // expect(instance.isTestBank).to.be(expectedValueLiteral);
      });

      it('should have the property popularity (base name: "popularity")', function() {
        // TODO: update the code to test the property popularity
        expect(instance).to.have.property('popularity');
        // expect(instance.popularity).to.be(expectedValueLiteral);
      });

      it('should have the property health (base name: "health")', function() {
        // TODO: update the code to test the property health
        expect(instance).to.have.property('health');
        // expect(instance.health).to.be(expectedValueLiteral);
      });

      it('should have the property loginFieldUserId (base name: "loginFieldUserId")', function() {
        // TODO: update the code to test the property loginFieldUserId
        expect(instance).to.have.property('loginFieldUserId');
        // expect(instance.loginFieldUserId).to.be(expectedValueLiteral);
      });

      it('should have the property loginFieldCustomerId (base name: "loginFieldCustomerId")', function() {
        // TODO: update the code to test the property loginFieldCustomerId
        expect(instance).to.have.property('loginFieldCustomerId');
        // expect(instance.loginFieldCustomerId).to.be(expectedValueLiteral);
      });

      it('should have the property loginFieldPin (base name: "loginFieldPin")', function() {
        // TODO: update the code to test the property loginFieldPin
        expect(instance).to.have.property('loginFieldPin');
        // expect(instance.loginFieldPin).to.be(expectedValueLiteral);
      });

      it('should have the property pinsAreVolatile (base name: "pinsAreVolatile")', function() {
        // TODO: update the code to test the property pinsAreVolatile
        expect(instance).to.have.property('pinsAreVolatile');
        // expect(instance.pinsAreVolatile).to.be(expectedValueLiteral);
      });

      it('should have the property isCustomerIdPassword (base name: "isCustomerIdPassword")', function() {
        // TODO: update the code to test the property isCustomerIdPassword
        expect(instance).to.have.property('isCustomerIdPassword');
        // expect(instance.isCustomerIdPassword).to.be(expectedValueLiteral);
      });

      it('should have the property supportedDataSources (base name: "supportedDataSources")', function() {
        // TODO: update the code to test the property supportedDataSources
        expect(instance).to.have.property('supportedDataSources');
        // expect(instance.supportedDataSources).to.be(expectedValueLiteral);
      });

      it('should have the property interfaces (base name: "interfaces")', function() {
        // TODO: update the code to test the property interfaces
        expect(instance).to.have.property('interfaces');
        // expect(instance.interfaces).to.be(expectedValueLiteral);
      });

      it('should have the property lastCommunicationAttempt (base name: "lastCommunicationAttempt")', function() {
        // TODO: update the code to test the property lastCommunicationAttempt
        expect(instance).to.have.property('lastCommunicationAttempt');
        // expect(instance.lastCommunicationAttempt).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulCommunication (base name: "lastSuccessfulCommunication")', function() {
        // TODO: update the code to test the property lastSuccessfulCommunication
        expect(instance).to.have.property('lastSuccessfulCommunication');
        // expect(instance.lastSuccessfulCommunication).to.be(expectedValueLiteral);
      });

    });
  });

}));
