/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UserInfo', function() {
      beforeEach(function() {
        instance = new FinApiResTfulServices.UserInfo();
      });

      it('should create an instance of UserInfo', function() {
        // TODO: update the code to test UserInfo
        expect(instance).to.be.a(FinApiResTfulServices.UserInfo);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property registrationDate (base name: "registrationDate")', function() {
        // TODO: update the code to test the property registrationDate
        expect(instance).to.have.property('registrationDate');
        // expect(instance.registrationDate).to.be(expectedValueLiteral);
      });

      it('should have the property deletionDate (base name: "deletionDate")', function() {
        // TODO: update the code to test the property deletionDate
        expect(instance).to.have.property('deletionDate');
        // expect(instance.deletionDate).to.be(expectedValueLiteral);
      });

      it('should have the property lastActiveDate (base name: "lastActiveDate")', function() {
        // TODO: update the code to test the property lastActiveDate
        expect(instance).to.have.property('lastActiveDate');
        // expect(instance.lastActiveDate).to.be(expectedValueLiteral);
      });

      it('should have the property bankConnectionCount (base name: "bankConnectionCount")', function() {
        // TODO: update the code to test the property bankConnectionCount
        expect(instance).to.have.property('bankConnectionCount');
        // expect(instance.bankConnectionCount).to.be(expectedValueLiteral);
      });

      it('should have the property latestBankConnectionImportDate (base name: "latestBankConnectionImportDate")', function() {
        // TODO: update the code to test the property latestBankConnectionImportDate
        expect(instance).to.have.property('latestBankConnectionImportDate');
        // expect(instance.latestBankConnectionImportDate).to.be(expectedValueLiteral);
      });

      it('should have the property latestBankConnectionDeletionDate (base name: "latestBankConnectionDeletionDate")', function() {
        // TODO: update the code to test the property latestBankConnectionDeletionDate
        expect(instance).to.have.property('latestBankConnectionDeletionDate');
        // expect(instance.latestBankConnectionDeletionDate).to.be(expectedValueLiteral);
      });

      it('should have the property monthlyStats (base name: "monthlyStats")', function() {
        // TODO: update the code to test the property monthlyStats
        expect(instance).to.have.property('monthlyStats');
        // expect(instance.monthlyStats).to.be(expectedValueLiteral);
      });

      it('should have the property isLocked (base name: "isLocked")', function() {
        // TODO: update the code to test the property isLocked
        expect(instance).to.have.property('isLocked');
        // expect(instance.isLocked).to.be(expectedValueLiteral);
      });

    });
  });

}));
