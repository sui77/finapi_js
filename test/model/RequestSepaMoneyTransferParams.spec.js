/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RequestSepaMoneyTransferParams', function() {
      beforeEach(function() {
        instance = new FinApiResTfulServices.RequestSepaMoneyTransferParams();
      });

      it('should create an instance of RequestSepaMoneyTransferParams', function() {
        // TODO: update the code to test RequestSepaMoneyTransferParams
        expect(instance).to.be.a(FinApiResTfulServices.RequestSepaMoneyTransferParams);
      });

      it('should have the property recipientName (base name: "recipientName")', function() {
        // TODO: update the code to test the property recipientName
        expect(instance).to.have.property('recipientName');
        // expect(instance.recipientName).to.be(expectedValueLiteral);
      });

      it('should have the property recipientIban (base name: "recipientIban")', function() {
        // TODO: update the code to test the property recipientIban
        expect(instance).to.have.property('recipientIban');
        // expect(instance.recipientIban).to.be(expectedValueLiteral);
      });

      it('should have the property recipientBic (base name: "recipientBic")', function() {
        // TODO: update the code to test the property recipientBic
        expect(instance).to.have.property('recipientBic');
        // expect(instance.recipientBic).to.be(expectedValueLiteral);
      });

      it('should have the property clearingAccountId (base name: "clearingAccountId")', function() {
        // TODO: update the code to test the property clearingAccountId
        expect(instance).to.have.property('clearingAccountId');
        // expect(instance.clearingAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property endToEndId (base name: "endToEndId")', function() {
        // TODO: update the code to test the property endToEndId
        expect(instance).to.have.property('endToEndId');
        // expect(instance.endToEndId).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property purpose (base name: "purpose")', function() {
        // TODO: update the code to test the property purpose
        expect(instance).to.have.property('purpose');
        // expect(instance.purpose).to.be(expectedValueLiteral);
      });

      it('should have the property sepaPurposeCode (base name: "sepaPurposeCode")', function() {
        // TODO: update the code to test the property sepaPurposeCode
        expect(instance).to.have.property('sepaPurposeCode');
        // expect(instance.sepaPurposeCode).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property bankingPin (base name: "bankingPin")', function() {
        // TODO: update the code to test the property bankingPin
        expect(instance).to.have.property('bankingPin');
        // expect(instance.bankingPin).to.be(expectedValueLiteral);
      });

      it('should have the property storeSecrets (base name: "storeSecrets")', function() {
        // TODO: update the code to test the property storeSecrets
        expect(instance).to.have.property('storeSecrets');
        // expect(instance.storeSecrets).to.be(expectedValueLiteral);
      });

      it('should have the property twoStepProcedureId (base name: "twoStepProcedureId")', function() {
        // TODO: update the code to test the property twoStepProcedureId
        expect(instance).to.have.property('twoStepProcedureId');
        // expect(instance.twoStepProcedureId).to.be(expectedValueLiteral);
      });

      it('should have the property executionDate (base name: "executionDate")', function() {
        // TODO: update the code to test the property executionDate
        expect(instance).to.have.property('executionDate');
        // expect(instance.executionDate).to.be(expectedValueLiteral);
      });

      it('should have the property singleBooking (base name: "singleBooking")', function() {
        // TODO: update the code to test the property singleBooking
        expect(instance).to.have.property('singleBooking');
        // expect(instance.singleBooking).to.be(expectedValueLiteral);
      });

      it('should have the property additionalMoneyTransfers (base name: "additionalMoneyTransfers")', function() {
        // TODO: update the code to test the property additionalMoneyTransfers
        expect(instance).to.have.property('additionalMoneyTransfers');
        // expect(instance.additionalMoneyTransfers).to.be(expectedValueLiteral);
      });

      it('should have the property challengeResponse (base name: "challengeResponse")', function() {
        // TODO: update the code to test the property challengeResponse
        expect(instance).to.have.property('challengeResponse');
        // expect(instance.challengeResponse).to.be(expectedValueLiteral);
      });

      it('should have the property multiStepAuthentication (base name: "multiStepAuthentication")', function() {
        // TODO: update the code to test the property multiStepAuthentication
        expect(instance).to.have.property('multiStepAuthentication');
        // expect(instance.multiStepAuthentication).to.be(expectedValueLiteral);
      });

      it('should have the property hideTransactionDetailsInWebForm (base name: "hideTransactionDetailsInWebForm")', function() {
        // TODO: update the code to test the property hideTransactionDetailsInWebForm
        expect(instance).to.have.property('hideTransactionDetailsInWebForm');
        // expect(instance.hideTransactionDetailsInWebForm).to.be(expectedValueLiteral);
      });

      it('should have the property storePin (base name: "storePin")', function() {
        // TODO: update the code to test the property storePin
        expect(instance).to.have.property('storePin');
        // expect(instance.storePin).to.be(expectedValueLiteral);
      });

    });
  });

}));
