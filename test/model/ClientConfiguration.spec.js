/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.92.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinApiResTfulServices);
  }
}(this, function(expect, FinApiResTfulServices) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ClientConfiguration', function() {
      beforeEach(function() {
        instance = new FinApiResTfulServices.ClientConfiguration();
      });

      it('should create an instance of ClientConfiguration', function() {
        // TODO: update the code to test ClientConfiguration
        expect(instance).to.be.a(FinApiResTfulServices.ClientConfiguration);
      });

      it('should have the property isAutomaticBatchUpdateEnabled (base name: "isAutomaticBatchUpdateEnabled")', function() {
        // TODO: update the code to test the property isAutomaticBatchUpdateEnabled
        expect(instance).to.have.property('isAutomaticBatchUpdateEnabled');
        // expect(instance.isAutomaticBatchUpdateEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property userNotificationCallbackUrl (base name: "userNotificationCallbackUrl")', function() {
        // TODO: update the code to test the property userNotificationCallbackUrl
        expect(instance).to.have.property('userNotificationCallbackUrl');
        // expect(instance.userNotificationCallbackUrl).to.be(expectedValueLiteral);
      });

      it('should have the property userSynchronizationCallbackUrl (base name: "userSynchronizationCallbackUrl")', function() {
        // TODO: update the code to test the property userSynchronizationCallbackUrl
        expect(instance).to.have.property('userSynchronizationCallbackUrl');
        // expect(instance.userSynchronizationCallbackUrl).to.be(expectedValueLiteral);
      });

      it('should have the property refreshTokensValidityPeriod (base name: "refreshTokensValidityPeriod")', function() {
        // TODO: update the code to test the property refreshTokensValidityPeriod
        expect(instance).to.have.property('refreshTokensValidityPeriod');
        // expect(instance.refreshTokensValidityPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property userAccessTokensValidityPeriod (base name: "userAccessTokensValidityPeriod")', function() {
        // TODO: update the code to test the property userAccessTokensValidityPeriod
        expect(instance).to.have.property('userAccessTokensValidityPeriod');
        // expect(instance.userAccessTokensValidityPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property clientAccessTokensValidityPeriod (base name: "clientAccessTokensValidityPeriod")', function() {
        // TODO: update the code to test the property clientAccessTokensValidityPeriod
        expect(instance).to.have.property('clientAccessTokensValidityPeriod');
        // expect(instance.clientAccessTokensValidityPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property maxUserLoginAttempts (base name: "maxUserLoginAttempts")', function() {
        // TODO: update the code to test the property maxUserLoginAttempts
        expect(instance).to.have.property('maxUserLoginAttempts');
        // expect(instance.maxUserLoginAttempts).to.be(expectedValueLiteral);
      });

      it('should have the property isUserAutoVerificationEnabled (base name: "isUserAutoVerificationEnabled")', function() {
        // TODO: update the code to test the property isUserAutoVerificationEnabled
        expect(instance).to.have.property('isUserAutoVerificationEnabled');
        // expect(instance.isUserAutoVerificationEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property isMandatorAdmin (base name: "isMandatorAdmin")', function() {
        // TODO: update the code to test the property isMandatorAdmin
        expect(instance).to.have.property('isMandatorAdmin');
        // expect(instance.isMandatorAdmin).to.be(expectedValueLiteral);
      });

      it('should have the property isWebScrapingEnabled (base name: "isWebScrapingEnabled")', function() {
        // TODO: update the code to test the property isWebScrapingEnabled
        expect(instance).to.have.property('isWebScrapingEnabled');
        // expect(instance.isWebScrapingEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property isXs2aEnabled (base name: "isXs2aEnabled")', function() {
        // TODO: update the code to test the property isXs2aEnabled
        expect(instance).to.have.property('isXs2aEnabled');
        // expect(instance.isXs2aEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property availableBankGroups (base name: "availableBankGroups")', function() {
        // TODO: update the code to test the property availableBankGroups
        expect(instance).to.have.property('availableBankGroups');
        // expect(instance.availableBankGroups).to.be(expectedValueLiteral);
      });

      it('should have the property applicationName (base name: "applicationName")', function() {
        // TODO: update the code to test the property applicationName
        expect(instance).to.have.property('applicationName');
        // expect(instance.applicationName).to.be(expectedValueLiteral);
      });

      it('should have the property finTSProductRegistrationNumber (base name: "finTSProductRegistrationNumber")', function() {
        // TODO: update the code to test the property finTSProductRegistrationNumber
        expect(instance).to.have.property('finTSProductRegistrationNumber');
        // expect(instance.finTSProductRegistrationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property storeSecretsAvailableInWebForm (base name: "storeSecretsAvailableInWebForm")', function() {
        // TODO: update the code to test the property storeSecretsAvailableInWebForm
        expect(instance).to.have.property('storeSecretsAvailableInWebForm');
        // expect(instance.storeSecretsAvailableInWebForm).to.be(expectedValueLiteral);
      });

      it('should have the property paymentsEnabled (base name: "paymentsEnabled")', function() {
        // TODO: update the code to test the property paymentsEnabled
        expect(instance).to.have.property('paymentsEnabled');
        // expect(instance.paymentsEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property pinStorageAvailableInWebForm (base name: "pinStorageAvailableInWebForm")', function() {
        // TODO: update the code to test the property pinStorageAvailableInWebForm
        expect(instance).to.have.property('pinStorageAvailableInWebForm');
        // expect(instance.pinStorageAvailableInWebForm).to.be(expectedValueLiteral);
      });

    });
  });

}));
